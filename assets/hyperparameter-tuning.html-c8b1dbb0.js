import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-c31a6da5.js";const t={},p=e(`<h1 id="hyperparameter-tuning" tabindex="-1"><a class="header-anchor" href="#hyperparameter-tuning" aria-hidden="true">#</a> Hyperparameter tuning</h1><ul><li>Ridge/lasso regression: Choosing alpha</li><li>KNN: Choosing n_neighbors</li></ul><p>Choosing the correct hyperparameters：</p><ol><li>Try lots of di(erent hyperparameter values</li><li>Fit all of them separately</li><li>See how well they perform</li><li>Choose the best performing values</li></ol><p>这个过程被称为 hyperparameter tuning</p><ol><li>必须使用交叉验证来避免过度使用测试集</li><li>我们仍然可以拆分数据并对训练集进行交叉验证</li><li>我们保留用于最终评估的测试集</li></ol><img src="https://pic.hanjiaming.com.cn/2022/07/22/34c9fe26ce823.png" alt="1658500465631.png" style="zoom:50%;"><h2 id="gridsearchcv-in-sk" tabindex="-1"><a class="header-anchor" href="#gridsearchcv-in-sk" aria-hidden="true">#</a> GridSearchCV in sk</h2><p>网格搜索+交叉验证，搜索的是参数，即在指定的参数范围内，按步长依次调整参数，利用调整的参数训练学习器，从所有的参数中找到在验证集上精度最高的参数，这其实是一个循环和比较的过程。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV

kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>
param_grid <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;alpha&quot;</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;solver&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;sag&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lsqr&quot;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
ridge <span class="token operator">=</span> Ridge<span class="token punctuation">(</span><span class="token punctuation">)</span>
ridge_cv <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>ridge<span class="token punctuation">,</span> param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span>kf<span class="token punctuation">)</span>

ridge_cv<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ridge_cv<span class="token punctuation">.</span>best_params_<span class="token punctuation">,</span> ridge_cv<span class="token punctuation">.</span>best_score_<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&#39;alpha&#39;: 0.0001, &#39;solver&#39;: &#39;sag&#39;}
0.7529912278705785
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Limitations and an alternative approach</p><ul><li>3-fold cross-validation, 1 hyperparameter, 10 total values = 30 ,ts</li><li>10 fold cross-validation, 3 hyperparameters, 30 total values = 900 ,ts</li></ul></div><h2 id="randomizedsearchcv" tabindex="-1"><a class="header-anchor" href="#randomizedsearchcv" aria-hidden="true">#</a> RandomizedSearchCV</h2><p>在超参数空间搜索几十几百个点，其中就有可能比较小的值，比稀疏化网络的做法快，而且实验证明，随机搜索结果比稀疏网络法稍好。随机搜索不是尝试所有可能的组合，而是通过选择每一个超参数的随机值的特定数量的随机组合，有两个优点：比如运行1000次，中探索每个超参数的1000个不同的值；通过设定搜索次数，控制超参数搜索的计算量。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> RandomizedSearchCV

kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>
param_grid <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;alpha&#39;</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">0.0001</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;solver&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&#39;sag&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;lsqr&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
ridge <span class="token operator">=</span> Ridge<span class="token punctuation">(</span><span class="token punctuation">)</span>
ridge_cv <span class="token operator">=</span> RandomizedSearchCV<span class="token punctuation">(</span>ridge<span class="token punctuation">,</span> param_grid<span class="token punctuation">,</span> cv<span class="token operator">=</span>kf<span class="token punctuation">,</span> n_iter<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment"># Checking model parameters</span>
ridge_cv<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>ridge_cv<span class="token punctuation">.</span>best_params_<span class="token punctuation">,</span> ridge_cv<span class="token punctuation">.</span>best_score_<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{&#39;solver&#39;: &#39;sag&#39;, &#39;alpha&#39;: 0.0001}
0.7529912278705785
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="evaluating-on-the-test-set" tabindex="-1"><a class="header-anchor" href="#evaluating-on-the-test-set" aria-hidden="true">#</a> Evaluating on the test set</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># ridge_cv 将会挑选最佳参数计算测试集的得分</span>
test_score <span class="token operator">=</span> ridge_cv<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>test_score<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0.7564731534089224
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,19),o=[p];function i(c,l){return a(),s("div",null,o)}const d=n(t,[["render",i],["__file","hyperparameter-tuning.html.vue"]]);export{d as default};
