const n=JSON.parse('{"key":"v-7e296db6","path":"/note/cs/programming/java/io/net-io.html","title":"Java 简单网络通信 IO","lang":"zh-CN","frontmatter":{"article":false,"date":"2023-09-10T00:00:00.000Z","order":5,"description":"Java 简单网络通信 IO TCP 文本通信 对于客户端 public class Client{ public static void main(String[] args){ Socket socket = null; OutputStream = null; try{ // 写入服务器的地址，端口号 InetAddress serverIP = InetAddress.getByName(\\"127.0.0.1\\"); int port = 8808; // 创建 socket 链接 socket = new Socket(serverIP, port); // 发送IO 消息流 os = socket.getOutputStream(); os.write(\\"hello, this is hirsun\\".getBytes()); } cache (Exception e){ e.printStackTrace(); } finally{ if (os != null){ try{ os.close(); } catch (IOException e){ e.printstackTrace(); } } \\t if (socket != null){ try{ socket.close(); } catch (IOException e){ e.printstackTrace(); } } } } }","head":[["meta",{"property":"og:url","content":"https://guomaimang.github.io/note/cs/programming/java/io/net-io.html"}],["meta",{"property":"og:site_name","content":"Hirsun HAN (Jiaming) | 韩佳明"}],["meta",{"property":"og:title","content":"Java 简单网络通信 IO"}],["meta",{"property":"og:description","content":"Java 简单网络通信 IO TCP 文本通信 对于客户端 public class Client{ public static void main(String[] args){ Socket socket = null; OutputStream = null; try{ // 写入服务器的地址，端口号 InetAddress serverIP = InetAddress.getByName(\\"127.0.0.1\\"); int port = 8808; // 创建 socket 链接 socket = new Socket(serverIP, port); // 发送IO 消息流 os = socket.getOutputStream(); os.write(\\"hello, this is hirsun\\".getBytes()); } cache (Exception e){ e.printStackTrace(); } finally{ if (os != null){ try{ os.close(); } catch (IOException e){ e.printstackTrace(); } } \\t if (socket != null){ try{ socket.close(); } catch (IOException e){ e.printstackTrace(); } } } } }"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-15T05:33:29.000Z"}],["meta",{"property":"article:author","content":"Hirsun (HAN Jiaming)"}],["meta",{"property":"article:published_time","content":"2023-09-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-15T05:33:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Java 简单网络通信 IO\\",\\"description\\":\\"Java 简单网络通信 IO TCP 文本通信 对于客户端 public class Client{ public static void main(String[] args){ Socket socket = null; OutputStream = null; try{ // 写入服务器的地址，端口号 InetAddress serverIP = InetAddress.getByName(\\\\\\"127.0.0.1\\\\\\"); int port = 8808; // 创建 socket 链接 socket = new Socket(serverIP, port); // 发送IO 消息流 os = socket.getOutputStream(); os.write(\\\\\\"hello, this is hirsun\\\\\\".getBytes()); } cache (Exception e){ e.printStackTrace(); } finally{ if (os != null){ try{ os.close(); } catch (IOException e){ e.printstackTrace(); } } \\\\t if (socket != null){ try{ socket.close(); } catch (IOException e){ e.printstackTrace(); } } } } }\\"}"]]},"headers":[{"level":2,"title":"TCP 文本通信","slug":"tcp-文本通信","link":"#tcp-文本通信","children":[]},{"level":2,"title":"UDP 文本通信","slug":"udp-文本通信","link":"#udp-文本通信","children":[]}],"git":{"createdTime":1726378409000,"updatedTime":1726378409000,"contributors":[{"name":"hanjiaming","email":"47519540+guomaimang@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":6.27,"words":627},"filePathRelative":"note/cs/programming/java/io/net-io.md","localizedDate":"2023年9月10日","excerpt":"<h1> Java 简单网络通信 IO</h1>\\n<h2> TCP 文本通信</h2>\\n<p>对于客户端</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code><span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Client</span><span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">public</span> <span class=\\"token keyword\\">static</span>  <span class=\\"token keyword\\">void</span> <span class=\\"token function\\">main</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">String</span><span class=\\"token punctuation\\">[</span><span class=\\"token punctuation\\">]</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n    \\n    <span class=\\"token class-name\\">Socket</span> socket <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token class-name\\">OutputStream</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">;</span>\\n    \\n    <span class=\\"token keyword\\">try</span><span class=\\"token punctuation\\">{</span>\\n      <span class=\\"token comment\\">// 写入服务器的地址，端口号</span>\\n      <span class=\\"token class-name\\">InetAddress</span> serverIP <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">InetAddress</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getByName</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"127.0.0.1\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      <span class=\\"token keyword\\">int</span> port <span class=\\"token operator\\">=</span> <span class=\\"token number\\">8808</span><span class=\\"token punctuation\\">;</span>\\n      \\n      <span class=\\"token comment\\">// 创建 socket 链接</span>\\n      socket <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">Socket</span><span class=\\"token punctuation\\">(</span>serverIP<span class=\\"token punctuation\\">,</span> port<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      \\n      <span class=\\"token comment\\">// 发送IO 消息流</span>\\n      os <span class=\\"token operator\\">=</span> socket<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getOutputStream</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n      os<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">write</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"hello, this is hirsun\\"</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getBytes</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> \\n      \\n    <span class=\\"token punctuation\\">}</span> cache <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Exception</span> e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n      e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printStackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">finally</span><span class=\\"token punctuation\\">{</span>\\n      \\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>os <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token keyword\\">try</span><span class=\\"token punctuation\\">{</span>\\n            os<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token punctuation\\">}</span>\\n          <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printstackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> \\n          <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      \\t\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>socket <span class=\\"token operator\\">!=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n          <span class=\\"token keyword\\">try</span><span class=\\"token punctuation\\">{</span>\\n            socket<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">close</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n          <span class=\\"token punctuation\\">}</span>\\n          <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">IOException</span> e<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n            e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">printstackTrace</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> \\n          <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token punctuation\\">}</span>\\n      \\n    <span class=\\"token punctuation\\">}</span>\\n  <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
