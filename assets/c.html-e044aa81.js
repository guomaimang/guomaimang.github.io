import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as o,a as n,b as a,d as e,e as i}from"./app-0c64ccd6.js";const l={},u=i(`<h1 id="c-语言要点" tabindex="-1"><a class="header-anchor" href="#c-语言要点" aria-hidden="true">#</a> C 语言要点</h1><h2 id="函数指针" tabindex="-1"><a class="header-anchor" href="#函数指针" aria-hidden="true">#</a> 函数指针</h2><p>如果在程序中定义了一个函数，那么在编译时系统就会为这个函数代码分配一段存储空间，这段存储空间的首地址称为这个函数的地址。而且函数名表示的就是这个地址。既然是地址我们就可以定义一个指针变量来存放，这个指针变量就叫作函数指针变量，简称函数指针。</p><p>函数指针是指向函数的指针变量。函数指针可以像一般函数一样，用于调用函数、传递参数。</p><h3 id="如何用函数指针调用函数" tabindex="-1"><a class="header-anchor" href="#如何用函数指针调用函数" aria-hidden="true">#</a> 如何用函数指针调用函数</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">Func</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">/*声明一个函数*/</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/*定义一个函数指针*/</span>
p <span class="token operator">=</span> Func<span class="token punctuation">;</span>          <span class="token comment">/*将Func函数的首地址赋给指针变量p*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后需要注意的是，指向函数的指针变量没有 ++ 和 -- 运算。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>

<span class="token keyword">int</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//函数声明</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//定义一个函数指针</span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>
    p <span class="token operator">=</span> Max<span class="token punctuation">;</span>  <span class="token comment">//把函数Max赋给指针变量p, 使p指向Max函数</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;please enter a and b:&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d%d&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//通过函数指针调用Max函数</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;a = %d\\nb = %d\\nmax = %d\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">Max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>  <span class="token comment">//定义Max函数{</span>
    <span class="token keyword">int</span> z<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        z <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">else</span><span class="token punctuation">{</span>
        z <span class="token operator">=</span> y<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数指针变量的声明：<code>typedef int (*fun_ptr)(int,int); // 声明一个指向同样参数、返回值的函数指针类型</code></p><h2 id="c-结构体" tabindex="-1"><a class="header-anchor" href="#c-结构体" aria-hidden="true">#</a> C 结构体</h2><p><strong>结构</strong>是 C 编程中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</p><h3 id="定义结构" tabindex="-1"><a class="header-anchor" href="#定义结构" aria-hidden="true">#</a> 定义结构</h3><p>为了定义结构，您必须使用 <strong>struct</strong> 语句。struct 语句定义了一个包含多个成员的新的数据类型，struct 语句的格式如下：</p><figure><img src="https://pic.hanjiaming.com.cn/2022/10/24/0c0b8fe08c2e2.png" alt="1666616850341.png" tabindex="0" loading="lazy"><figcaption>1666616850341.png</figcaption></figure><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Books</span>
<span class="token punctuation">{</span>
   <span class="token keyword">char</span>  title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span>  author<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span>  subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span>   book_id<span class="token punctuation">;</span>
<span class="token punctuation">}</span> book<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">printBook</span><span class="token punctuation">(</span> <span class="token keyword">struct</span> <span class="token class-name">Books</span> book <span class="token punctuation">)</span>
<span class="token punctuation">{</span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Book title : %s\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Book author : %s\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Book subject : %s\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">printf</span><span class="token punctuation">(</span> <span class="token string">&quot;Book book_id : %d\\n&quot;</span><span class="token punctuation">,</span> book<span class="token punctuation">.</span>book_id<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="指向结构的指针" tabindex="-1"><a class="header-anchor" href="#指向结构的指针" aria-hidden="true">#</a> 指向结构的指针</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">Books</span> <span class="token operator">*</span>struct_pointer<span class="token punctuation">;</span>
struct_pointer <span class="token operator">=</span> <span class="token operator">&amp;</span>Book1<span class="token punctuation">;</span>

<span class="token comment">// 为了使用指向该结构的指针访问结构的成员，您必须使用 -&gt; 运算符，如下所示：</span>
struct_pointer<span class="token operator">-&gt;</span>title<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="深入理解" tabindex="-1"><a class="header-anchor" href="#深入理解" aria-hidden="true">#</a> 深入理解</h3><p>struct 不是 class。它就像数组一样，仅仅是创建一个集合而已。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//此声明声明了拥有3个成员的结构体</span>
<span class="token comment">//同时又声明了结构体变量s1</span>
<span class="token comment">//这个结构体并没有标明其标签</span>
<span class="token keyword">struct</span> 
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">char</span> b<span class="token punctuation">;</span>
    <span class="token keyword">double</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span> s1<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//此声明声明了拥有3个成员的结构体</span>
<span class="token comment">//结构体的标签被命名为SIMPLE,没有声明变量</span>
<span class="token keyword">struct</span> <span class="token class-name">SIMPLE</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">char</span> b<span class="token punctuation">;</span>
    <span class="token keyword">double</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//用SIMPLE标签的结构体，另外声明了变量t1、t2、t3</span>
<span class="token comment">//这相当于创建了 一个 SIMPLE 的 struct，一个 SIMPLE 的数组，一个 SIMPLE 的指针。</span>
<span class="token keyword">struct</span> <span class="token class-name">SIMPLE</span> t1<span class="token punctuation">,</span> t2<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>t3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h3><p>即初次赋值可通过</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
 
<span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">{</span>
   <span class="token keyword">char</span>  title<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span>  author<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">char</span>  subject<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token keyword">int</span>   book_id<span class="token punctuation">;</span>
<span class="token punctuation">}</span> book <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;C 语言&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;RUNOOB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;编程语言&quot;</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="typedef" tabindex="-1"><a class="header-anchor" href="#typedef" aria-hidden="true">#</a> typedef</h2><p>C语言允许用户使用 typedef 关键字来定义自己习惯的数据类型名称，来替代系统默认的基本类型名称、数组类型名称、指针类型名称与用户自定义的结构型名称、共用型名称、枚举型名称等。</p><p>例如，C 语言在 C99 之前并未提供布尔类型，但我们可以使用 typedef 关键字来定义一个简单的布尔类型，如下面的代码所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> BOOL<span class="token punctuation">;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">TRUE</span> <span class="token expression"><span class="token number">1</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FALSE</span> <span class="token expression"><span class="token number">0</span></span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义好之后，就可以像使用基本类型数据一样使用它了，如下面的代码所示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>BOOL bflag<span class="token operator">=</span>TRUE<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="为基本数据类型定义新的类型名" tabindex="-1"><a class="header-anchor" href="#为基本数据类型定义新的类型名" aria-hidden="true">#</a> 为基本数据类型定义新的类型名</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/10/25/1365b9ecb8a8f.png" alt="1666696771840.png" tabindex="0" loading="lazy"><figcaption>1666696771840.png</figcaption></figure><h3 id="为自定义数据类型定义类型名" tabindex="-1"><a class="header-anchor" href="#为自定义数据类型定义类型名" aria-hidden="true">#</a> 为自定义数据类型定义类型名</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// struct</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">tagPoint</span>
<span class="token punctuation">{</span>
    <span class="token keyword">double</span> x<span class="token punctuation">;</span>
    <span class="token keyword">double</span> y<span class="token punctuation">;</span>
    <span class="token keyword">double</span> z<span class="token punctuation">;</span>
<span class="token punctuation">}</span> Point<span class="token punctuation">;</span>

<span class="token comment">// 给 struct 起别名</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">tagPoint</span> Point

<span class="token comment">// []</span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> INT_ARRAY_100<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
INT_ARRAY_100 arr<span class="token punctuation">;</span>

<span class="token comment">// pointer</span>
<span class="token keyword">typedef</span> <span class="token keyword">char</span><span class="token operator">*</span> PCHAR<span class="token punctuation">;</span>
PCHAR pa<span class="token punctuation">;</span>

<span class="token comment">//</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="define" tabindex="-1"><a class="header-anchor" href="#define" aria-hidden="true">#</a> #define</h2><p>C语言中，可以用 #define 定义一个标识符来表示一个常量。其特点是：定义的标识符不占内存，只是一个临时的符号，预编译后这个符号就不存在了。</p><p>预编译又叫预处理。预编译不是编译，而是编译前的处理，编译器正式开始编译程序之前，会执行一段预处理程序（又称预处理器）专门对程序执行预处理操作。</p><p>用 #define 定义标识符的一般形式为：<code>\\#define 标识符 常量 //注意, 最后没有分号</code></p><h2 id="c-头文件" tabindex="-1"><a class="header-anchor" href="#c-头文件" aria-hidden="true">#</a> C 头文件</h2><p>头文件是扩展名为 <strong>.h</strong> 的文件，包含了 C 函数声明和宏定义，被多个源文件中引用共享。有两种类型的头文件：程序员编写的头文件和编译器自带的头文件。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 这种形式用于引用系统头文件。它在系统目录的标准列表中搜索名为 file 的文件。在编译源代码时，您可以通过 -I 选项把目录前置在该列表前。</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;file&gt;</span></span>

<span class="token comment">// 这种形式用于引用用户头文件。它在包含当前文件的目录中搜索名为 file 的文件。在编译源代码时，您可以通过 -I 选项把目录前置在该列表前。</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&quot;file&quot;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="错误输出函数-perror" tabindex="-1"><a class="header-anchor" href="#错误输出函数-perror" aria-hidden="true">#</a> 错误输出函数 perror()</h2><p>perror() 用来将上一个函数发生错误的原因输出到标准设备 (stderr) 。</p><p>参数 s 所指的字符串会先打印出,后面再加上错误原因字符串。此错误原因依照全局变量error 的值来决定要输出的字符串。</p><h2 id="extern-关键字" tabindex="-1"><a class="header-anchor" href="#extern-关键字" aria-hidden="true">#</a> extern 关键字</h2><p>我们知道，程序的编译单位是源程序文件，一个源文件可以包含一个或若干个函数。</p><p>在函数内定义的变量是局部变量，而在函数之外定义的变量则称为外部变量，外部变量也就是我们所讲的全局变量。它的存储方式为静态存储，其生存周期为整个程序的生存周期。全局变量可以为本文件中的其他函数所共用，它的有效范围为从定义变量的位置开始到本源文件结束。</p><p>然而，如果全局变量不在文件的开头定义，有效的作用范围将只限于其定义处到文件结束。如果在定义点之前的函数想引用该全局变量，则应该在引用之前用关键字 extern 对该变量作“外部变量声明”，表示该变量是一个已经定义的外部变量。有了此声明，就可以从“声明”处起，合法地使用该外部变量。</p><h3 id="变量的声明和定义" tabindex="-1"><a class="header-anchor" href="#变量的声明和定义" aria-hidden="true">#</a> 变量的声明和定义</h3><p>extern是 c 引入的一个关键字，它可以应用于一个<strong>全局变量，函数或模板声明</strong>，说明该符号具有外部链接*(external linkage)*属性。也就是说，这个符号在别处定义。</p><p>一般而言，C 全局变量的作用范围仅限于当前的文件，但同时C也支持分离式编译，允许将程序分割为若干个文件被独立编译。于是就需要在文件间共享数据，这里 extern 就发挥了作用。</p><ul><li>变量的声明指向程序表名变量的类型和名字，即使得名字为程序所知，一个文件如果想使用别处定义的名字则必须包含对那个名字的声明。</li><li>变量的定义指申请存储空间，并将其与变量名相关联，除此之外，还可以为变量指定初始值。</li></ul><p>在程序中变量可以声明多次，但只能定义一次。</p><p><strong>凡是没有带extern的声明同时也都是定义</strong>。而对函数而言，带有{}是定义，否则是声明。如果想声明一个变量而非定义它，就在变量名前添加关键字extern，且不要显式的初始化变量。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">//fileA.cpp</span>
<span class="token keyword">int</span> i<span class="token punctuation">;</span>                <span class="token comment">//声明并定义i</span>
<span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">//声明并定义j</span>
<span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> d1<span class="token punctuation">,</span><span class="token keyword">double</span> d2<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">//定义</span>

<span class="token comment">//fileB.cpp</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>          <span class="token comment">//声明i而非定义</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment">//定义j而非声明，会报错，多重定义</span>
<span class="token keyword">int</span> j<span class="token punctuation">;</span>                <span class="token comment">//错误，重定义，注意这里的j是在全局范围内声明</span>
<span class="token keyword">extern</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> d1<span class="token punctuation">,</span><span class="token keyword">double</span> d2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//声明</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="案例分析" tabindex="-1"><a class="header-anchor" href="#案例分析" aria-hidden="true">#</a> 案例分析</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> result<span class="token punctuation">;</span>
    <span class="token comment">/*外部变量声明*/</span>
    <span class="token keyword">extern</span> <span class="token keyword">int</span> g_X<span class="token punctuation">;</span>
    <span class="token keyword">extern</span> <span class="token keyword">int</span> g_Y<span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>g_X<span class="token punctuation">,</span>g_Y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the max value is %d\\n&quot;</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*定义两个全局变量*/</span>
<span class="token keyword">int</span> g_X <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> g_Y <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">&gt;</span>y <span class="token operator">?</span> x <span class="token operator">:</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码中，全局变量 g_X 与 g_Y 是在 main 函数之后声明的，因此它的作用范围不在 main 函数中。如果我们需要在 main 函数中调用它们，就必须使用 extern 来对变量 g_X 与 g_Y 作“外部变量声明”，以扩展全局变量的作用域。也就是说，如果在变量定义之前要使用该变量，则应在使用之前加 extern 声明变量，使作用域扩展到从声明开始到本文件结束。</p><p>如果整个工程由多个源文件组成，在一个源文件中想引用另外一个源文件中已经定义的外部变量，同样只需在引用变量的文件中用 extern 关键字加以声明即可。下面就来看一个多文件的示例:</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">/****max.c****/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token comment">/*外部变量声明*/</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> g_X <span class="token punctuation">;</span>
<span class="token keyword">extern</span> <span class="token keyword">int</span> g_Y <span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>g_X <span class="token operator">&gt;</span> g_Y <span class="token operator">?</span> g_X <span class="token operator">:</span> g_Y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/***main.c****/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token comment">/*定义两个全局变量*/</span>
<span class="token keyword">int</span> g_X<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> g_Y<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> result<span class="token punctuation">;</span>
    result <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;the max value is %d\\n&quot;</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于多个文件的工程，都可以采用上面这种方法来操作。对于模块化的程序文件，可在其文件中预先留好外部变量的接口，也就是只采用 extern 声明变量，而不定义变量，max.c 文件中的 g_X 与 g_Y 就是如此操作的。</p><p>通常，这些外部变量的接口都是在模块程序的头文件中声明的，当需要使用该模块时，只需要在使用时具体定义一下这些外部变量即可。main.c 里的 g_X 与 g_Y 则是相关示例。</p><p>不过，需要特别注意的是，由于用 extern 引用外部变量，可以在引用的模块内修改其变量的值，因此，如果有多个文件同时要对应用的变量进行操作，而且可能会修改该变量，那就会影响其他模块的使用。因此，我们要慎重使用。</p><h2 id="const-and-pointer" tabindex="-1"><a class="header-anchor" href="#const-and-pointer" aria-hidden="true">#</a> const and pointer</h2><ul><li><p>指向 const 的指针: <code>const int *p</code> 或者 <code>int const *p</code>, 地址p可以随便改，指针指向的内容不能改</p></li><li><p><code>int * const p = 地址</code>，地址p不能改，内容可以改。</p><ul><li>因为地址p是不能被修改的，所以必须被初始化。</li></ul></li><li><p>都不可变</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token keyword">const</span> p <span class="token operator">=</span> 地址值
<span class="token keyword">int</span> <span class="token keyword">const</span> <span class="token operator">*</span> <span class="token keyword">const</span> p <span class="token operator">=</span> 地址值
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="static-修饰函数" tabindex="-1"><a class="header-anchor" href="#static-修饰函数" aria-hidden="true">#</a> static 修饰函数</h2><p>static函数与普通函数作用域不同,仅在本文件。只在当前源文件中使用的函数应该说明为内部函数(static修饰的函数)，内部函数应该在当前源文件中说明和定义。对于可在当前源文件以外使用的函数，应该在一个头文件中说明，要使用这些函数的源文件要包含这个头文件.</p><p>static函数在内存中只有一份，普通函数在每个被调用中维持一份拷贝。</p><p>当我们同时编译多个文件时，所有未加static前缀的全局变量和函数都具有全局可见性。为理解这句话，我举例来说明。我们要同时编译两个源文件，一个是static_extern.c，另一个是static_main.c。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// static_main.c</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
	<span class="token keyword">extern</span> <span class="token keyword">char</span> i<span class="token punctuation">;</span>    <span class="token comment">// extern variable must be declared before use</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%c &quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// static_extern.c</span>
<span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span> <span class="token comment">// global variable</span>
<span class="token keyword">void</span> <span class="token function">msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;I Love Beijing!I Love hanyue!\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有未加 static 前缀的全局变量和函数都具有全局可见性，其它的源文件也能访问。此例中，i是全局变量，msg 是函数，并且都没有加 static 前缀，因此对于另外的源文件 static_main.c 是可见的。如果加了static，就会对其它源文件隐藏。例如在 i 和 msg 的定义前加上 static， static_main.c就看不到它们了。利用这一特性可以在不同的文件中定义同名函数和同名变量，而不必担心命名冲突。Static可以用作函数和变量的前缀，对于函数来讲，static的作用仅限于隐藏。</p><div class="hint-container tip"><p class="hint-container-title">为什么在 static_extern.c 中定义的全局变量i和函数 msg 能在 static_main.c中使用?</p><p>所有未加static前缀的全局变量和函数都具有全局可见性，其它的源文件也能访问。此例中，i是全局变量，msg是函数，并且都没有加static前缀，因此对于另外的源文件 static_main.c 是可见的。如果加了static，就会对其它源文件隐藏。例如在 i 和 msg 的定义前加上static， static_main.c 就看不到它们了。利用这一特性可以在不同的文件中定义同名函数和同名变量，而不必担心命名冲突。Static可以用作函数和变量的前缀，对于函数来讲，static的作用仅限于隐藏。</p></div><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> Ref.</h2>`,74),r={href:"https://www.cnblogs.com/honernan/p/13431431.html",target:"_blank",rel:"noopener noreferrer"},d={href:"http://c.biancheng.net/view/404.html",target:"_blank",rel:"noopener noreferrer"},k={href:"http://c.biancheng.net/view/187.html",target:"_blank",rel:"noopener noreferrer"},v={href:"https://blog.csdn.net/qq_37858386/article/details/79064900",target:"_blank",rel:"noopener noreferrer"},m={href:"http://c.biancheng.net/view/298.html",target:"_blank",rel:"noopener noreferrer"};function b(h,g){const s=p("ExternalLinkIcon");return c(),o("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[a("https://www.cnblogs.com/honernan/p/13431431.html"),e(s)])]),n("li",null,[n("a",d,[a("http://c.biancheng.net/view/404.html"),e(s)])]),n("li",null,[n("a",k,[a("http://c.biancheng.net/view/187.html"),e(s)])]),n("li",null,[n("a",v,[a("https://blog.csdn.net/qq_37858386/article/details/79064900"),e(s)])]),n("li",null,[n("a",m,[a("http://c.biancheng.net/view/298.html"),e(s)])])])])}const f=t(l,[["render",b],["__file","c.html.vue"]]);export{f as default};
