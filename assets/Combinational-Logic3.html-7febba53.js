import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as t}from"./app-8f8c0af4.js";const n={},l=t('<h1 id="combinational-logic-3" tabindex="-1"><a class="header-anchor" href="#combinational-logic-3" aria-hidden="true">#</a> Combinational Logic 3</h1><h2 id="review" tabindex="-1"><a class="header-anchor" href="#review" aria-hidden="true">#</a> Review</h2><p>Work flow: from real-world problems to digital circuits「工作流程：从实际问题到数字电路」</p><ul><li>modeling of real-world problems (input, output, switching functions, Z = f (A,B,C, …, ))</li><li>truth table: another representation of boolean functions</li><li>SOP/POS forms</li><li>digital circuits</li></ul><h2 id="simplification" tabindex="-1"><a class="header-anchor" href="#simplification" aria-hidden="true">#</a> Simplification</h2><img src="https://pic.hanjiaming.com.cn/2021/03/30/00f16665b8f84.png" alt="image.png" title="image.png"><p>Given a Boolean expression, we may have two qustions</p><ul><li>can it be simplified?</li><li>if you found simplification, is it the simplest form? <ul><li>a systematical way — Karnaugh map (K-map)</li></ul></li></ul><p><strong>大致有以下方法</strong></p><ul><li><p>Algebraic simplification「代数简化」</p><ul><li>applying the properties「属性/性质」 of boolean algebra「应用布尔代数的属性」</li><li>essentially「实质上」, it is done by observation — not good for complex expressions</li></ul></li><li><p>Karnaugh map (K-map)「卡诺地图」</p><ul><li>a systematical way「成系统的方法」 to deal with expressions with few (up to 4, 5) variables「一种处理带有很少（最多4、5）个变量的表达式的系统方法」</li></ul></li><li><p>Quine-McKluskey tables 「奎因-麦克卢斯基表」(more variables)</p></li></ul><h3 id="karnaugh-map" tabindex="-1"><a class="header-anchor" href="#karnaugh-map" aria-hidden="true">#</a> Karnaugh Map</h3><p>A representation of boolean function「实质：一种布尔函数的表示方法」</p><ul><li>an array of squares「正方形阵列」</li><li>each square represent a combination of input values「每个正方形代表输入值的组合」</li><li>for n variables, there are 2^n￼ squares「对于n个变量，有个2^n个正方形」</li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/30/efaeaf9b96d46.png" alt="image.png" title="image.png"><ul><li>each square can also represent a product term</li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/30/ce3abfa9e2ea9.png" alt="image.png" title="image.png"><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4><p>把 K-Map转换成 SOP式子</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/d09ee68d4536e.png" alt="image.png" title="image.png"><h4 id="use-for-simplification" tabindex="-1"><a class="header-anchor" href="#use-for-simplification" aria-hidden="true">#</a> Use for Simplification</h4><p>Given any boolean function, how to do simplification use Karnaugh map?<br> Transform the boolean function to canonical form: each term must contain each variable「将布尔函数转换为规范形式：每个term必须包含每个变量」</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/274e79c0adf55.png" alt="image.png" title="image.png"><h5 id="operation" tabindex="-1"><a class="header-anchor" href="#operation" aria-hidden="true">#</a> Operation</h5><p>Group “1-squares” to blocks</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/7170bd7fe6d98.png" alt="image.png" title="image.png"><p><strong>Grouping Squares into Blocks 「将方块分组」</strong></p><ul><li>Rules of grouping 1-squares into blocks <ul><li>group adjacent 1-squares into one block</li><li>one block can contain ￼ 2^i 1-squares (1, 2, 4, 8,…)</li></ul></li><li>Goals ogrou ouping 1-squares into blocks <ul><li>number of blocks should be minimized「块的数量应最小化」</li><li>size of a block should be maximized「块的大小应最大化」</li></ul></li></ul><h5 id="adjacent-squares" tabindex="-1"><a class="header-anchor" href="#adjacent-squares" aria-hidden="true">#</a> Adjacent squares</h5><p>「相邻方块」</p><p>Note: “00, 01, 11, 10” are arranged in this order such that adjacent squares differ in one variable</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/e0f6ffe72cb75.png" alt="image.png" title="image.png"><p>Example</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/eaaf55ca2ba65.png" alt="image.png" title="image.png"><p>以上都算相邻的</p><p>We wan to minimize the number of blocks「我们要最小化块数」</p><h5 id="reuse-block" tabindex="-1"><a class="header-anchor" href="#reuse-block" aria-hidden="true">#</a> Reuse Block</h5><p>We can reuse the 1-square to increase the size of the block「我们可以重用1平方来增加块的大小」</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/e4d1af9c1699b.png" alt="image.png" title="image.png"><p>Example 1</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/582c8291931de.png" alt="image.png" title="image.png"><p>Which one is better?</p><p>Choose blocks with larger size even there are more overlaps — the first one can result in the simplest form「即使有更多的重叠，也要选择更大尺寸的块-第一个可以形成最简单的形式」</p><p>Example 2</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/46ba0ad173be9.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/03/30/3ebe93f31d16c.png" alt="image.png" title="image.png"><h5 id="derive-term-from-block" tabindex="-1"><a class="header-anchor" href="#derive-term-from-block" aria-hidden="true">#</a> Derive Term from Block</h5><ul><li>Each block represents a term</li><li>cancel the variable which has inconsistent values in the block 「取消块中值不一致的变量」</li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/30/5ab6dfe8856a1.png" alt="image.png" title="image.png"><h5 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h5><img src="https://pic.hanjiaming.com.cn/2021/03/30/72ba18e7e4139.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/03/30/d994af1a1fb61.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/03/30/b0a3f2d691366.png" alt="image.png" title="image.png"><h5 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h5><p>Steps of using K-map for simplification</p><ul><li>given any boolean function</li><li>transform it canonical form</li><li>draw the K-map</li><li>group the 1-squares into blocks</li><li>derive terms from blocks</li></ul><h4 id="another-feature" tabindex="-1"><a class="header-anchor" href="#another-feature" aria-hidden="true">#</a> Another feature</h4><p>featute 此处翻译为 特点，而不是功能</p><p>Another feature of K-map — “don’t care” conditions</p><p>Motivation: for some problems, we do not need to define a complete truth table</p><ul><li>that is, some combinations of input values are not meaningful「也就是说，输入值的某些组合是没有意义的」 <ul><li>example: consider decimal incrementer: input = X, output = (X+1) mod 10, where X ranges from 0 to 9「示例：考虑十进制增量器：输入= X，输出=（X + 1）mod 10，其中X的范围是0到9」 <ul><li>we use 4 bits to represent the input/output — there is redundant「有余的」</li></ul></li></ul></li></ul><p>for don’t care conditions, we mark the corresponding「相应的」 squares in K-map as “d”</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/a62516c47d5d6.png" alt="image.png" title="image.png"><h4 id="d-square-in-k-map" tabindex="-1"><a class="header-anchor" href="#d-square-in-k-map" aria-hidden="true">#</a> d-square in K-map</h4><p>you can specify「指定」the value of “d” (1 or blank) in the K-map<br> Purpose: reduce the number of blocks &amp; increase the size of blocks</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/914e95253c0f5.png" alt="image.png" title="image.png"><h2 id="sequential-circuits" tabindex="-1"><a class="header-anchor" href="#sequential-circuits" aria-hidden="true">#</a> Sequential Circuits</h2><p>Sequential Circuits「顺序电路」</p><h3 id="comparation" tabindex="-1"><a class="header-anchor" href="#comparation" aria-hidden="true">#</a> Comparation</h3><p>Combinational Circuits「组合电路」 vs. Sequential Circuits「顺序电路」</p><p><strong>Combinational Circuits</strong> are memoryless「组合电路是无记忆的」</p><ul><li>the output depends only on the current input (there is an exceptional case of ROM)「输出仅取决于当前输入（ROM有一个例外情况）」</li><li>there is another class of logic circuits with such property: the outputs depend not only on the current inputs, but also on the past behavior of the circuit — there are storage elements (memory) in the circuits「还有另一类具有这种特性的逻辑电路：输出不仅取决于电流输入，还取决于电路的过去行为—电路中有存储元件（存储器）」</li></ul><h3 id="concept" tabindex="-1"><a class="header-anchor" href="#concept" aria-hidden="true">#</a> Concept</h3><ul><li>the contents of the storage elements represent the state of the circuit「存储元件的内容表示电路的状态」</li><li>the input may leave the circuit in the same state, or cause it to a new state;「输入可能使电路保持相同状态，或使其变为新状态；」 <ul><li>output (next state) = current input + current state「输出（下一个状态）=当前输入+当前状态」</li></ul></li><li><strong>over time, the circuit changes through a sequence of states as a result of changes in the inputs「随着时间的流逝，由于输入的变化，电路会通过一系列状态变化」</strong></li><li><strong>circuits that exhibit this behavior are referred to as sequential circuits「表现出这种行为的电路称为顺序电路」</strong></li></ul><h4 id="example-2" tabindex="-1"><a class="header-anchor" href="#example-2" aria-hidden="true">#</a> Example</h4><p>Simple but useful examples of sequential circuits</p><ul><li>different types of Flip-Flops</li><li>registers</li><li>counters</li></ul><h3 id="flip-flops" tabindex="-1"><a class="header-anchor" href="#flip-flops" aria-hidden="true">#</a> Flip-Flops</h3><p>There are a variety of flip-flops, all of which share two properties「有各种各样的触发器，它们都具有两个特性」</p><ul><li>it is a bistable「双稳态」 device: it exists in one of two states and, in the absence of input, remains in that state「<strong>它是一个双稳态设备：它处于两种状态之一，并且在没有输入的情况下仍保持该状态</strong>」</li><li>it has two outputs, Qand -Q (the complement of each other)「它有两个输出，Q和Q拔（彼此互补）」</li></ul><h4 id="s-r-latch-s-r-flip-flop" tabindex="-1"><a class="header-anchor" href="#s-r-latch-s-r-flip-flop" aria-hidden="true">#</a> S-R Latch (S-R Flip-Flop)</h4><p>S-R Latch (S-R Flip-Flop) 「S-R锁存器」</p><ul><li>Use the output Q as the state of the Latch</li><li>it has two stable states: Q = 1 and Q = 0</li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/30/46a5593f4dc88.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/03/30/c5376ec0b1d38.png" alt="image.png" title="image.png"><p>We can see that S-R Latch can be used as a storage element to store 1 bit (1-bit memory)「我们可以看到S-R锁存器可以用作存储1位（1位内存）的存储元素」</p><p>Note the feedback path in the circuit「Note the feedback path in the circuit」</p><p>注：连线的地方电压相同，即表示信号相同。如下图</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/df3c99ef7bbc1.png" alt="image.png" title="image.png"><h5 id="change-input" tabindex="-1"><a class="header-anchor" href="#change-input" aria-hidden="true">#</a> Change Input</h5><img src="https://pic.hanjiaming.com.cn/2021/03/30/3f1160950f9c3.png" alt="image.png" title="image.png"><h5 id="characteristic-table" tabindex="-1"><a class="header-anchor" href="#characteristic-table" aria-hidden="true">#</a> Characteristic Table</h5><p>Use characteristic table to describe a sequential circuit：describe the relations between next state (output) and input &amp; current state「使用特性表来描述时序电路：描述下一个状态（输出）与输入和当前状态之间的关系」</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/6c73c80248826.png" alt="image.png" title="image.png"><p>注：00不变，S 改 1 下一个Q为1，R 改 1下一个Q为0；S和R只有一个可以变成一，另一个必须为0；</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/6ff37fadfde5b.png" alt="image.png" title="image.png"><p>S改1，Q有两个△t；R改1，Q有一个△t；</p><p>我们发现在Q和-Q的改变时间不一致，我们现在不关心这个问题。</p><p>我们要求R和S的改变时间必须一致，我们必须要解决这个问题。</p><h5 id="synchronization-issue" tabindex="-1"><a class="header-anchor" href="#synchronization-issue" aria-hidden="true">#</a> Synchronization Issue</h5><p>The change of inputs causes the change of states「输入的变化导致状态的变化」</p><ul><li>in digital computers, we want to unify「统一」 the timings of changes「在数字计算机中，我们希望统一变更的时间」</li><li>solution: use a clock signal such that the changes of inputs occur only when a clock pulse「时钟脉冲」 occurs「解决方案：使用时钟信号，以使输入的更改仅在出现时钟脉冲时才发生」 <ul><li>all changes are synchronized to this clock (time is digitalized「数字化」)「所有更改都同步到此时钟（时间已数字化）」</li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/30/229e871cb2fec.png" alt="image.png" title="image.png"><p>How to use clock for synchronization?「如何使用时钟进行同步？」</p><p>use AND gate: consider Y = X AND Clock, when Clock = 0, Y=0; when Clock = 1, Y = X</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/35bbd05034c1b.png" alt="image.png" title="image.png"><h4 id="clocked-s-r-flip-flop" tabindex="-1"><a class="header-anchor" href="#clocked-s-r-flip-flop" aria-hidden="true">#</a> Clocked S-R Flip-Flop</h4><p>1-bit memory</p><ul><li>use S and R to control the writing of bit 0/1「使用S和R控制位0/1的写入」</li><li>use clock to control when to write —when the flip-flop is “triggered「触发」”「使用时钟来控制何时写入，即“触发”触发器时」</li><li>we use Timing Diagram「时序图」 to illustrate 「说明」the changing of input/output with respect to the clock signal「我们使用时序图来说明输入/输出相对于时钟信号的变化」「高中生物的有性生殖使用过」</li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/30/5c360c8cff032.png" alt="image.png" title="image.png" width="200px"><p>注：我们的目的就是让R和S输入的时间保持一致。</p><h5 id="idealized-timing-diagram" tabindex="-1"><a class="header-anchor" href="#idealized-timing-diagram" aria-hidden="true">#</a> Idealized Timing Diagram</h5><p>Edge-triggered Flip-Flops 「边缘触发的触发器」</p><p>the output changes at the “edge” of the clock signal (when the clock signal changes)「输出在时钟信号的“边缘”改变（当时钟信号改变时）」</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/f8c1f2831440b.png" alt="image.png" title="image.png"><p>flip-flops could be positive-edge-trigged or negative edge trigged「触发器可以是正边沿触发或负边沿触发」</p><p><strong>idealized: no gate delay would be shown in the timing diagram「理想化：时序图中不会显示门延迟」</strong></p><p>注：理想化模型没有门延迟，即不考虑Gate Delay</p><p>use the bubble for indication「用气泡指示」</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/02da801eebe7a.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/03/30/5adbada2dc219.png" alt="image.png" title="image.png"><h4 id="other-common-flip-flops" tabindex="-1"><a class="header-anchor" href="#other-common-flip-flops" aria-hidden="true">#</a> Other Common Flip-Flops</h4><h5 id="d-flip-flop" tabindex="-1"><a class="header-anchor" href="#d-flip-flop" aria-hidden="true">#</a> D Flip-Flop</h5><ul><li>one problem with S-R flip-flop is that R = S = 1 should be avoid</li><li>D flop-flop uses a single input source: it is a S-R flip-flop with ￼S = -R</li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/30/5752c5d3f3b1c.png" alt="image.png" title="image.png"><ul><li>the output is always equal to the most recent input value D「the output is always equal to the most recent input value D」</li><li>storage for one bit of data</li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/30/490ea72a39fcc.png" alt="image.png" title="image.png"><h5 id="j-k-flip-flop" tabindex="-1"><a class="header-anchor" href="#j-k-flip-flop" aria-hidden="true">#</a> J-K Flip-Flop</h5><p>all combinations of two input values are valid (including 1 1)「两个输入值的所有组合均有效（包括1 1）」</p><img src="https://pic.hanjiaming.com.cn/2021/03/30/faed0bb251af9.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/03/30/d65a2ed19d8d5.png" alt="image.png" title="image.png"><h3 id="registers" tabindex="-1"><a class="header-anchor" href="#registers" aria-hidden="true">#</a> Registers</h3><ul><li>used in CPU to store one or more bits (multiple flip-flops)「在CPU中用于存储一个或多个位（多个触发器）」</li><li>two types: shift registers and parallel registers「两种类型：移位寄存器和并行寄存器」</li><li>parallel registers: a set of 1-bit memories that change state simultaneously「同时的」「并行寄存器：一组同时改变状态的1位存储器」</li><li>shift registers: states are changed sequentially「移位寄存器：状态顺序更改」</li></ul><h4 id="example-8-bit-parallel-registers" tabindex="-1"><a class="header-anchor" href="#example-8-bit-parallel-registers" aria-hidden="true">#</a> Example: 8-bit Parallel Registers</h4><p>注意：source of data (can use MUX to connect to multiple sources)「根据资料：可以使用MUX连接到多个源」</p><img src="https://pic.hanjiaming.com.cn/2021/03/31/ba11cde6dca4a.png" alt="image.png" title="image.png"><h4 id="example-5-bit-shift-registers" tabindex="-1"><a class="header-anchor" href="#example-5-bit-shift-registers" aria-hidden="true">#</a> Example: 5-bit Shift Registers</h4><img src="https://pic.hanjiaming.com.cn/2021/03/31/7cdd601ebcc30.png" alt="image.png" title="image.png"><p>with each clock pulse, data are shifted to the right on position, and the rightmost bit is transferred out「每个时钟脉冲都会将数据移到右边的正确位置，最右边的位会被移出」</p><p>shift registers can be used to interface to serial I/O devices, or perform logical shift in ALU「移位寄存器可用于与串行I / O设备接口，或在ALU中执行逻辑移位」</p><h3 id="counters" tabindex="-1"><a class="header-anchor" href="#counters" aria-hidden="true">#</a> Counters</h3><p><strong>A register whose value will increment by 1</strong></p><ul><li>for a counter composed of N flip-flops, the value ranges from 0 to ￼; that is, the output of each flip-flop serves as one bit of the N-bit number「对于由N个触发器组成的计数器，该值的范围是0到；也就是说，每个触发器的输出都作为N位数字的一位」</li><li>asynchronous counter「异步计数器」: states of flip-flops will NOT change at the same time</li><li>synchronous counter「同步计数器」: states of flip-flops WILL change at the same time</li></ul><h4 id="ripple-counter" tabindex="-1"><a class="header-anchor" href="#ripple-counter" aria-hidden="true">#</a> Ripple Counter</h4><p>Ripple Counter「纹波计数器」</p><p>An asynchronous counter is also referred to as a ripple counter「波纹计数器」<br> the change that occurs to increment the counter starts at one end and “ripples” through to the other end「递增计数器所发生的变化始于一端，“波纹”直至另一端」</p><img src="https://pic.hanjiaming.com.cn/2021/03/31/7b224d57f61b7.png" alt="image.png" title="image.png"><p>note: the states (outputs) of the flip-flops does not change at the same time; instead, the change ripples through to the other end「注意：触发器的状态（输出）不会同时改变。相反，变化会波及到另一端」</p><img src="https://pic.hanjiaming.com.cn/2021/03/31/bdaad33ba47d3.png" alt="image.png" title="image.png"><p>all the inputs to the JK flip-flops are 1 「JK触发器的所有输入均为1」<br> the clock controls the toggling of output: if there is a clock pulse, the output is toggled「时钟控制输出的切换：如果有时钟脉冲，则切换输出」<br> the JK flip-flops are sequentially connected: the output of the previous flip-flop serves as the clock (control signal) of the next flip-flop「JK触发器顺序连接：前一个触发器的输出用作下一个触发器的时钟（控制信号）」</p><img src="https://pic.hanjiaming.com.cn/2021/03/31/b2ca0cf84ed94.png" alt="image.png" title="image.png"><h4 id="synchronous-counter" tabindex="-1"><a class="header-anchor" href="#synchronous-counter" aria-hidden="true">#</a> Synchronous Counter</h4><ul><li>use the outputs of N flip-flops to denote the number「使用N个触发器的输出表示数字」</li><li>states change at the same time「状态同时改变」</li><li>use synchronous counter as the example to show the design process of sequential circuits — from truth table to SOP to circuits「以同步计数器为例，演示时序电路的设计过程-从真值表到SOP再到电路」</li></ul><h5 id="example-3-bit-synchronous-counter" tabindex="-1"><a class="header-anchor" href="#example-3-bit-synchronous-counter" aria-hidden="true">#</a> Example: 3-bit Synchronous Counter</h5><ul><li>Use 3 J-K flip-flops to implement 3-bit counter「使用3个J-K触发器实现3位计数器」</li><li>output of 3 J-K flip-flops: CBA「3 J-K触发器的输出：CBA」</li><li>states: 000 -&gt; 001 -&gt; 010 -&gt; 011 -&gt; 100 -&gt; 101 -&gt; 110 -&gt;111 -&gt; 000</li><li><strong>key: identify the required inputs to change one state to the next state「关键：确定所需的输入以将一种状态更改为另一种状态」</strong></li></ul><p>注：我们的目标是让states按照000 -&gt; 001 -&gt; 010 -&gt; 011 -&gt; 100 -&gt; 101 -&gt; 110 -&gt;111 -&gt; 000改变。（尽管前面可以用加法器进行加法）</p><img src="https://pic.hanjiaming.com.cn/2021/03/31/de298fe87628c.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/03/31/85ee98afbc1d3.png" alt="image.png" title="image.png"><p>注：我们现在得到了C的表，只需按照相同的步骤得到A与B的即可，最后拼到一起。</p><p>Now, we can use the same way in the designing of combinatorial circuits:</p><ul><li>treat A, B, C as inputs (feedback path)「将A，B，C视为输入（反馈路径）」</li><li>treat each J, K as a function of A, B,C「将每个J，K视为A，B，C的函数」</li><li>then construct a Karnaugh map for each J, K「然后为每个J，K构造一个卡诺图」</li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/31/f6225eada68e7.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/03/31/c9b1f171b107b.png" alt="image.png" title="image.png"><p>Exercise after class: draw the timing diagram for this sequential circuit (how A, B, C would change with Clock?)「课后练习：画出该时序电路的时序图（A，B，C随时钟如何变化？）」</p><img src="https://pic.hanjiaming.com.cn/2021/03/31/fea3c77366af1.png" alt="image.png" title="image.png">',164),r=[l];function o(s,c){return i(),a("div",null,r)}const g=e(n,[["render",o],["__file","Combinational-Logic3.html.vue"]]);export{g as default};
