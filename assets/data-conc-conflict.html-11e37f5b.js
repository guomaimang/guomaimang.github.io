import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-743150fd.js";const t={},p=e(`<h1 id="数据库并发冲突及解决方案" tabindex="-1"><a class="header-anchor" href="#数据库并发冲突及解决方案" aria-hidden="true">#</a> 数据库并发冲突及解决方案</h1><p>在高并发场景下，多个线程对同一个账户进行并发更新时，可能会产生数据不一致的问题。具体场景如下：</p><img src="https://pic.hanjiaming.com.cn/2024/12/27/2a9b51802941c.png" alt="1735287906978.png" style="zoom:25%;"><ol><li>两个线程获取同一个账户的余额。</li><li>线程一和线程二分别在账户上增加金额。</li><li>线程一和线程二分别将增加后的金额更新回数据库。</li></ol><p>如果两个线程并发执行上述操作，会导致数据不一致。例如：</p><ul><li>线程一获取账户余额为400。</li><li>线程二在线程一更新前，获取账户余额并增加金额至500。</li><li>线程一更新账户余额为900（错误结果），而预期结果应为1000。</li></ul><h2 id="传统解决方案-悲观锁" tabindex="-1"><a class="header-anchor" href="#传统解决方案-悲观锁" aria-hidden="true">#</a> 传统解决方案：悲观锁</h2><h3 id="悲观锁的实现" tabindex="-1"><a class="header-anchor" href="#悲观锁的实现" aria-hidden="true">#</a> 悲观锁的实现</h3><p>在原有的 <code>SELECT</code> 语句上增加 <code>FOR UPDATE</code> 子句，以锁定查询到的数据行。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> ACC <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1001</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="悲观锁的执行流程" tabindex="-1"><a class="header-anchor" href="#悲观锁的执行流程" aria-hidden="true">#</a> 悲观锁的执行流程</h3><ol><li>线程一执行 <code>SELECT ... FOR UPDATE</code>，获取并锁定账户数据。</li><li>线程二尝试获取同一账户数据，但因被锁定处于阻塞等待状态。</li><li>线程一更新账户数据并提交事务，释放锁。</li><li>线程二获取账户数据并进行更新。</li></ol><h3 id="悲观锁的缺点" tabindex="-1"><a class="header-anchor" href="#悲观锁的缺点" aria-hidden="true">#</a> 悲观锁的缺点</h3><ul><li><strong>并发性差</strong>：高并发场景下，任何对同一账户的操作都会阻塞等待，降低系统并发性能。</li><li><strong>用户体验差</strong>：用户操作时可能长时间等待，影响用户体验。</li><li><strong>线程阻塞问题</strong>：大量线程阻塞可能导致系统线程池爆满，轻则系统失去响应，重则系统崩溃。</li></ul><h2 id="现代解决方案-乐观锁" tabindex="-1"><a class="header-anchor" href="#现代解决方案-乐观锁" aria-hidden="true">#</a> 现代解决方案：乐观锁</h2><h3 id="乐观锁的实现" tabindex="-1"><a class="header-anchor" href="#乐观锁的实现" aria-hidden="true">#</a> 乐观锁的实现</h3><p>通过在数据表中增加版本号字段（如 <code>version</code>），并在更新时进行版本号检查，以控制并发。例如：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> ACC <span class="token keyword">ADD</span> <span class="token keyword">COLUMN</span> version <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://pic.hanjiaming.com.cn/2024/12/27/13648f234137d.png" alt="1735288334036.png" style="zoom:25%;"><h3 id="乐观锁的执行流程" tabindex="-1"><a class="header-anchor" href="#乐观锁的执行流程" aria-hidden="true">#</a> 乐观锁的执行流程</h3><ol><li><p>获取账户数据及版本号：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> ACC <span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>增加账户余额，并在更新时检查版本号：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">UPDATE</span> ACC <span class="token keyword">SET</span> balance <span class="token operator">=</span> new_balance<span class="token punctuation">,</span> version <span class="token operator">=</span> version <span class="token operator">+</span> <span class="token number">1</span>
<span class="token keyword">WHERE</span> id <span class="token operator">=</span> <span class="token number">1001</span> <span class="token operator">AND</span> version <span class="token operator">=</span> old_version<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div> <img src="https://pic.hanjiaming.com.cn/2024/12/27/9ab36cfd9d2f3.png" alt="1735288599228.png" style="zoom:30%;"></li><li><p><u>如果 <code>UPDATE</code> 语句影响的行数为0，说明版本号不匹配，更新失败。</u> 这个时候可以可以由系统或者用户发起重试。</p></li></ol><h3 id="乐观锁的优点" tabindex="-1"><a class="header-anchor" href="#乐观锁的优点" aria-hidden="true">#</a> 乐观锁的优点</h3><ul><li><strong>提高并发性</strong>：避免线程阻塞，提高系统并发性能。</li><li><strong>数据一致性</strong>：通过版本号检查，确保数据更新的正确性。</li></ul><h3 id="乐观锁的缺点" tabindex="-1"><a class="header-anchor" href="#乐观锁的缺点" aria-hidden="true">#</a> 乐观锁的缺点</h3><ul><li><strong>用户体验问题</strong>：如果并发冲突频繁，<u>用户可能需要多次重试操作</u>。</li></ul><h2 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h2><h3 id="数据表结构" tabindex="-1"><a class="header-anchor" href="#数据表结构" aria-hidden="true">#</a> 数据表结构</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> ACC <span class="token punctuation">(</span>
    id <span class="token keyword">INT</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
    balance <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    version <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">1</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="伪代码示例" tabindex="-1"><a class="header-anchor" href="#伪代码示例" aria-hidden="true">#</a> 伪代码示例</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获取账户数据及版本号</span>
<span class="token class-name">Account</span> acc <span class="token operator">=</span> select <span class="token operator">*</span> from <span class="token constant">ACC</span> where id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> oldVersion <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
acc<span class="token punctuation">.</span><span class="token function">setBalance</span><span class="token punctuation">(</span>acc<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 更新账户数据及版本号</span>
<span class="token keyword">int</span> count <span class="token operator">=</span> update <span class="token constant">ACC</span> set balance <span class="token operator">=</span> newBalance<span class="token punctuation">,</span> version <span class="token operator">=</span> version <span class="token operator">+</span> <span class="token number">1</span>
            where id <span class="token operator">=</span> <span class="token number">1001</span> and version <span class="token operator">=</span> oldVersion<span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">VersionException</span><span class="token punctuation">(</span><span class="token string">&quot;并发冲突，更新失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理并发冲突" tabindex="-1"><a class="header-anchor" href="#处理并发冲突" aria-hidden="true">#</a> 处理并发冲突</h3><ol><li><strong>前端提示用户重试</strong>：当发生并发冲突时，提示用户重新提交请求。</li><li><strong>后端自动重试</strong>：使用 <code>Spring Retry</code> 组件在后台自动重试操作。</li></ol><h3 id="spring-retry-组件使用" tabindex="-1"><a class="header-anchor" href="#spring-retry-组件使用" aria-hidden="true">#</a> Spring Retry 组件使用</h3><h4 id="maven依赖" tabindex="-1"><a class="header-anchor" href="#maven依赖" aria-hidden="true">#</a> Maven依赖</h4><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.retry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-retry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>x.x.x<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="方法重试示例" tabindex="-1"><a class="header-anchor" href="#方法重试示例" aria-hidden="true">#</a> 方法重试示例</h4><img src="https://pic.hanjiaming.com.cn/2024/12/27/33d568b3c06dd.png" alt="1735289022397.png" style="zoom:33%;"><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>在高并发场景下，使用乐观锁可以有效避免数据不一致问题，同时提高系统并发性能和用户体验。</p><p>通过版本号控制并发更新，并结合前端提示或后端自动重试机制，可以确保数据的正确性和系统的健壮性。</p>`,40),o=[p];function l(c,i){return a(),s("div",null,o)}const u=n(t,[["render",l],["__file","data-conc-conflict.html.vue"]]);export{u as default};
