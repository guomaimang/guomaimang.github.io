import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,e}from"./app-5cfac1d9.js";const t={},r=e(`<h1 id="jwt-与分布式" tabindex="-1"><a class="header-anchor" href="#jwt-与分布式" aria-hidden="true">#</a> JWT 与分布式</h1><h2 id="前后端分离简介" tabindex="-1"><a class="header-anchor" href="#前后端分离简介" aria-hidden="true">#</a> 前后端分离简介</h2><p>前后端分离是指按照应用的职责将应用分成前台应用和后端应用：</p><ul><li><strong>前端应用</strong>：主要负责页面的渲染以及数据的返回。</li><li><strong>后端应用</strong>：主要负责业务逻辑的处理。</li></ul><p>在这种架构下，后端应用对外暴露的接口并非所有人都能访问，很多接口需要经过授权或拥有相应角色才能访问。</p><h2 id="jwt-简介" tabindex="-1"><a class="header-anchor" href="#jwt-简介" aria-hidden="true">#</a> JWT 简介</h2><p>JWT（JSON Web Token）是一个经过加密且包含用户信息并具有时效性的固定格式字符串。它的主要特点包括：</p><ul><li><strong>加密</strong>：JWT 是经过加密的。</li><li><strong>包含用户信息</strong>：在加密前，JWT 包含一些用户的信息。</li><li><strong>格式稳定且具有时效性</strong>：JWT 的格式是稳定的，并且具有时效性。</li></ul><h3 id="组成部分" tabindex="-1"><a class="header-anchor" href="#组成部分" aria-hidden="true">#</a> 组成部分</h3><p>一个 JWT 由三部分组成：</p><ol><li><strong>标头（Header）</strong>：描述了使用的加密算法。</li><li><strong>载荷（Payload）</strong>：包含用户的自定义信息，如用户编号、昵称等非敏感数据。采用 MD5.</li><li><strong>签名（Signature）</strong>：结合标头和载荷，再结合服务器持有的私钥进行加密，生成签名用于数据校验。</li></ol><h3 id="示例-jwt" tabindex="-1"><a class="header-anchor" href="#示例-jwt" aria-hidden="true">#</a> 示例 JWT</h3><div class="language-plaintext line-numbers-mode" data-ext="plaintext"><pre class="language-plaintext"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><strong>标头（Header）</strong>：<code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</code></li><li><strong>载荷（Payload）</strong>：<code>eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</code></li><li><strong>签名（Signature）</strong>：<code>SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</code></li></ul><h2 id="jwt-在分布式架构中的应用" tabindex="-1"><a class="header-anchor" href="#jwt-在分布式架构中的应用" aria-hidden="true">#</a> JWT 在分布式架构中的应用</h2><h3 id="方案一-网关统一校验" tabindex="-1"><a class="header-anchor" href="#方案一-网关统一校验" aria-hidden="true">#</a> 方案一：网关统一校验</h3><figure><img src="https://pic.hanjiaming.com.cn/2024/12/27/16fd03676ff1e.png" alt="1735293283992.png" tabindex="0" loading="lazy"><figcaption>1735293283992.png</figcaption></figure><ol><li><strong>客户端</strong>（浏览器或 APP）向认证中心提交用户名和密码进行登录。</li><li><strong>认证中心</strong>校验用户名和密码，生成 JWT 字符串并返回给客户端。</li><li><strong>客户端</strong>保存 JWT 字符串（如存储在 Cookie 或 Local Storage）。</li><li><strong>客户端</strong>在后续请求中附带 JWT 字符串，发送给应用网关。</li><li><strong>应用网关</strong>向认证中心发起验签请求。</li><li><strong>认证中心</strong>校验 JWT 的有效性并返回用户信息和权限数据。</li><li><strong>应用网关</strong>将用户信息和权限数据转发给具体业务模块。</li><li><strong>业务模块</strong>根据权限数据判断接口是否允许被访问。</li></ol><h3 id="方案二-应用认证" tabindex="-1"><a class="header-anchor" href="#方案二-应用认证" aria-hidden="true">#</a> 方案二：应用认证</h3><figure><img src="https://pic.hanjiaming.com.cn/2024/12/27/16fd03676ff1e.png" alt="1735293283992.png" tabindex="0" loading="lazy"><figcaption>1735293283992.png</figcaption></figure><ol><li><strong>客户端</strong>在请求中附带 JWT 字符串，发送给应用网关。</li><li><strong>应用网关</strong>将 JWT 字符串原封不动转发给业务模块。</li><li><strong>业务模块</strong>对 JWT 进行验签和校验。</li><li><strong>认证中心</strong>校验 JWT 的有效性并返回用户信息和权限数据。</li><li><strong>业务模块</strong>根据权限数据判断接口是否允许被访问。</li></ol><p>可以通过注解</p><img src="https://pic.hanjiaming.com.cn/2024/12/27/0871389c8461f.png" alt="1735304398245.png" style="zoom:33%;"><h3 id="两种方案对比" tabindex="-1"><a class="header-anchor" href="#两种方案对比" aria-hidden="true">#</a> 两种方案对比</h3><ul><li>方案一：JWT校验无感知，验签过程无侵入，执行效率低，适用于低并发企业级应用</li><li>方案二：控制更加灵活，有一定代码侵入，代码可以灵活控制，适用于追求性能互联网应</li></ul>`,25),l=[r];function o(s,d){return a(),n("div",null,l)}const h=i(t,[["render",o],["__file","jwt.html.vue"]]);export{h as default};
