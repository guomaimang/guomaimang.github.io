import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as e,e as i}from"./app-6763ed11.js";const n={},t=i('<h1 id="公共表设计与分布式数据库管理" tabindex="-1"><a class="header-anchor" href="#公共表设计与分布式数据库管理" aria-hidden="true">#</a> 公共表设计与分布式数据库管理</h1><p>在复杂的系统中，公共表是指被其他业务模块共享的基础数据表。这些表在系统中起到底层支撑的作用，常见的公共表包括用户表、行政区划、数据字典、组织结构和系统配置等。</p><p>尽管这些表不直接承担具体的业务职责，但它们对上层应用至关重要。然而，在分布式环境下，设计和管理这些公共表会遇到新的挑战。</p><h2 id="早期设计与管理方式" tabindex="-1"><a class="header-anchor" href="#早期设计与管理方式" aria-hidden="true">#</a> 早期设计与管理方式</h2><h3 id="单一大库管理" tabindex="-1"><a class="header-anchor" href="#单一大库管理" aria-hidden="true">#</a> 单一大库管理</h3><img src="https://pic.hanjiaming.com.cn/2025/01/09/15bed7da8bd9c.png" alt="Google Chrome 2025-01-09 23.51.08.png" style="zoom:50%;"><p><strong>统一管理</strong>：在宜信项目初期，所有数据表都集中在一个大数据库中，无论哪个团队负责的数据表，都放置在统一的后端数据库中。</p><p><strong>表的分类</strong>：</p><ul><li><strong>业务表</strong>：如信审表、车代表、还款计划表等，与具体业务相关。</li><li><strong>公共表</strong>：如用户表、数据字典表、系统配置表等，用于支撑上层应用。</li></ul><p>数据查询的简便性 -&gt; <strong>关联查询</strong>：在单一大库中，数据查询非常简单。例如，信审表关联用户表，只需要一个简单的SQL查询即可完成。</p><h3 id="业务发展带来的挑战" tabindex="-1"><a class="header-anchor" href="#业务发展带来的挑战" aria-hidden="true">#</a> 业务发展带来的挑战</h3><p>数据量增长的影响</p><ul><li><strong>数据量激增</strong>：随着宜信用户量的增加（例如，用户表中有四千万数据），数据查询变得复杂。</li><li><strong>性能问题</strong>：如果某个新的模块对用户表进行全表检索，可能会导致磁盘 IO 拉满，影响其他表的访问，导致系统高延迟。</li></ul><p>风险放大</p><ul><li><strong>SQL查询风险</strong>：一个程序员写的SQL如果不当，可能会导致整个系统出现性能问题。特别是在团队扩大后，难以保证所有程序员都能正确使用索引。</li></ul><h2 id="分布式数据库的设计思路" tabindex="-1"><a class="header-anchor" href="#分布式数据库的设计思路" aria-hidden="true">#</a> 分布式数据库的设计思路</h2><h3 id="数据库切分" tabindex="-1"><a class="header-anchor" href="#数据库切分" aria-hidden="true">#</a> 数据库切分</h3><ul><li><strong>物理切分</strong>：根据组织职责或数据维度，进行数据库的物理层面切分，让每个团队拥有独立的资源。</li><li><strong>结构调整</strong>：将公共表下沉为基础服务，业务表上升为业务服务，通过RPC或Restful API进行远程访问。</li></ul><h3 id="设计实现" tabindex="-1"><a class="header-anchor" href="#设计实现" aria-hidden="true">#</a> 设计实现</h3><ul><li><strong>项目组独立</strong>：随着业务的发展，信审、车贷和贷后等都成立了独立的项目组，并有独立的团队维护。</li><li><strong>子库拆分</strong>：原有的大库设计被拆分成多个子库，每个子库都有自己的业务数据表，但底层依赖用户的原始数据。</li></ul><h3 id="用户服务的引入" tabindex="-1"><a class="header-anchor" href="#用户服务的引入" aria-hidden="true">#</a> 用户服务的引入</h3><ul><li><strong>用户服务</strong>：由专门的团队维护用户数据，通过Restful API对外提供接口，其他上层服务进行调用。</li><li><strong>权限控制</strong>：只有用户服务团队有权直接访问用户表，其他团队通过API进行数据交互。</li></ul><h2 id="优化与解耦" tabindex="-1"><a class="header-anchor" href="#优化与解耦" aria-hidden="true">#</a> 优化与解耦</h2><img src="https://pic.hanjiaming.com.cn/2025/01/10/0e002493d6649.png" alt="1736438481176.png" style="zoom:50%;"><h3 id="数据层面解耦" tabindex="-1"><a class="header-anchor" href="#数据层面解耦" aria-hidden="true">#</a> 数据层面解耦</h3><ul><li><strong>独立服务器资源</strong>：每个团队拥有独立的服务器资源，用户表的高延迟不会影响其他数据库。</li><li><strong>API接口封装</strong>：用户服务对外暴露标准化的API接口，例如按ID号查询用户数据，底层可以针对这些特定查询场景进行优化。</li></ul><h3 id="团队之间解耦" tabindex="-1"><a class="header-anchor" href="#团队之间解耦" aria-hidden="true">#</a> 团队之间解耦</h3><ul><li><strong>责任明确</strong>：每个团队负责自己的模块，数据查询慢的问题可以追溯到具体的服务层面，并有具体人员负责解决。</li><li><strong>减少扯皮</strong>：通过明确的职责分工，减少团队之间的扯皮情况。</li></ul><h2 id="架构设计的复杂性" tabindex="-1"><a class="header-anchor" href="#架构设计的复杂性" aria-hidden="true">#</a> 架构设计的复杂性</h2><h3 id="开发的繁琐性" tabindex="-1"><a class="header-anchor" href="#开发的繁琐性" aria-hidden="true">#</a> 开发的繁琐性</h3><ul><li><strong>远程通信复杂度</strong>：原本简单的关联查询变成了通过 Restful API 进行远程通信，增加了开发复杂度。</li><li><strong>新手工程师的挑战</strong>：对于刚毕业的应届生，复杂的远程调用可能超出其能力范围。</li></ul><p>数据层面解耦，有独立的服务器资源支撑团队之间解耦，谁的模块谁负责</p><ul><li>开发起来真的麻烦</li><li>如何屏蔽底层复杂度是架构设计的难点</li></ul><h3 id="架构设计的解决方案" tabindex="-1"><a class="header-anchor" href="#架构设计的解决方案" aria-hidden="true">#</a> 架构设计的解决方案</h3><img src="https://pic.hanjiaming.com.cn/2025/01/10/f4bf91287e7f5.png" alt="1736438736720.png" style="zoom:50%;"><ul><li><strong>微服务注册中心</strong>：设计类似微服务的注册中心，对每个启动的服务实例进行登记。</li><li><strong>服务实例管理</strong>：注册中心管理所有服务实例的IP地址和相关信息，统一管理服务实例。</li></ul><h2 id="实例与实现" tabindex="-1"><a class="header-anchor" href="#实例与实现" aria-hidden="true">#</a> 实例与实现</h2><h3 id="案例分析" tabindex="-1"><a class="header-anchor" href="#案例分析" aria-hidden="true">#</a> 案例分析</h3><ul><li><strong>Bucket表与用户服务</strong>：在底层数据库有一张 Bucket 表，其中有个字段long user ID。根据业务需要，需要从用户服务中获取用户的其他数据，这时会产生网络远程通信。</li><li><strong>自定义注解</strong>：通过自定义注解指明服务名称（如user service），查询注册中心获取服务实例的IP地址和端口号，然后拼接出完整的URL，发起远程请求。</li><li><strong>数据注入</strong>：远程服务返回数据后，自动注入到当前对象的user参数中，简化程序员的开发工作。</li></ul><h3 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例" aria-hidden="true">#</a> 代码示例</h3><img src="https://pic.hanjiaming.com.cn/2025/01/10/63abde5a3ab39.png" alt="1736438688712.png" style="zoom:33%;"><ul><li><strong>注解配置</strong>：在方法上增加自定义注解，指明服务名称和URI，自动实现远程通信。</li><li><strong>数据交互</strong>：程序员无需关心底层的传输细节，只需专注于业务开发。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>通过以上设计，宜信在项目开发中解决了数据量增长带来的挑战，实现了数据层面和团队之间的有效解耦，提升了系统的稳定性和可维护性。</p><p>同时，通过架构设计屏蔽了底层远程调用的复杂度，简化了程序员的开发工作。这些经验和方法对其他类似项目具有很好的借鉴意义。</p>',45),s=[t];function h(l,o){return r(),e("div",null,s)}const g=a(n,[["render",h],["__file","public-table-design.html.vue"]]);export{g as default};
