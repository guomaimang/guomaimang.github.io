import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as t}from"./app-8df2fe0f.js";const p={},e=t(`<h1 id="preprocess-and-pipelines" tabindex="-1"><a class="header-anchor" href="#preprocess-and-pipelines" aria-hidden="true">#</a> Preprocess and Pipelines</h1><h2 id="scikit-learn-requirements" tabindex="-1"><a class="header-anchor" href="#scikit-learn-requirements" aria-hidden="true">#</a> scikit-learn requirements</h2><ul><li>Numeric data</li><li>No missing values</li></ul><p>With real-world data:</p><ul><li>This is rarely the case</li><li>We will often need to preprocess our data first</li></ul><h2 id="deal-with-categorical-features" tabindex="-1"><a class="header-anchor" href="#deal-with-categorical-features" aria-hidden="true">#</a> Deal with categorical features</h2><p>假设我们有一个包含分类特征的数据集，比如说颜色。由于这些不是数字，scikit-learn不会接受它们，我们需要将它们转换成数字特征。我们通过将该特征分割成多个二进制特征，称为虚拟变量，每个类别一个，来实现这一目标。0 意味着观察结果不是那个类别，而 1 意味着它是。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>适用于 X 中包含分类特征，y 是数值。</p></div><ul><li>scikit-learn will not accept categorical features by default</li><li>Need to convert categorical features into numeric values</li><li>Convert to binary features called dummy variables <ul><li>0: Observation was NOT that category</li><li>1: Observation was that category</li></ul></li></ul><figure><img src="https://pic.hanjiaming.com.cn/2022/07/23/4733433ec9106.png" alt="1658570255656.png" tabindex="0" loading="lazy"><figcaption>1658570255656.png</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">提示</p><p>删除 &quot;Rock &quot;一栏。如果我们不这样做，我们就会重复信息，这对某些模型来说可能是个问题。</p></div><p>为了创建虚拟变量，我们可以使用</p><ul><li>scikit-learn: OneHotEncoder()</li><li>pandas: get_dummies()</li></ul><h3 id="example-music-dataset" tabindex="-1"><a class="header-anchor" href="#example-music-dataset" aria-hidden="true">#</a> Example: Music dataset</h3><h4 id="eda-w-categorical-feature" tabindex="-1"><a class="header-anchor" href="#eda-w-categorical-feature" aria-hidden="true">#</a> EDA w/ categorical feature</h4><ul><li>popularity : Target variable</li><li>genre : Categorical feature</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>music<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/07/23/c419dc7f1ef2e.png" alt="1658570467619.png" tabindex="0" loading="lazy"><figcaption>1658570467619.png</figcaption></figure><img src="https://pic.hanjiaming.com.cn/2022/07/23/b5cc6af6e4d5a.png" alt="1658570510815.png" style="zoom:5%;"><h4 id="encoding-dummy-variables" tabindex="-1"><a class="header-anchor" href="#encoding-dummy-variables" aria-hidden="true">#</a> Encoding dummy variables</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
music_df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">&#39;music.csv&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># 由于我们只需要保留10个二进制特征中的9个，我们可以将drop_first参数设置为True。</span>
music_dummies <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>music_df<span class="token punctuation">[</span><span class="token string">&quot;genre&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> drop_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>music_dummies<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/07/23/5e557b54c9aec.png" alt="1658570637504.png" tabindex="0" loading="lazy"><figcaption>1658570637504.png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>music_dummies <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>music_df<span class="token punctuation">,</span> music_dummies<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
music_dummies <span class="token operator">=</span> music_dummies<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">&quot;genre&quot;</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果DataFrame只有一个分类特征，我们可以传递整个DataFrame，从而跳过组合变量的步骤。如果我们不指定列，新的DataFrame的二进制列将有原始特征名称的前缀，所以它们将以 genre_ 开始。注意原来的流派列会被自动删除。一旦我们有了虚拟变量，我们就可以像以前一样拟合模型。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>music_dummies <span class="token operator">=</span> pd<span class="token punctuation">.</span>get_dummies<span class="token punctuation">(</span>music_df<span class="token punctuation">,</span> drop_first<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>music_dummies<span class="token punctuation">.</span>columns<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/07/23/844a1a26df0b4.png" alt="1658570917210.png" tabindex="0" loading="lazy"><figcaption>1658570917210.png</figcaption></figure><h4 id="linear-regression" tabindex="-1"><a class="header-anchor" href="#linear-regression" aria-hidden="true">#</a> Linear regression</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_score<span class="token punctuation">,</span> KFold
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression

X <span class="token operator">=</span> music_dummies<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">&quot;popularity&quot;</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values
y <span class="token operator">=</span> music_dummies<span class="token punctuation">[</span><span class="token string">&quot;popularity&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>
kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>
linreg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>

linreg_cv <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>linreg<span class="token punctuation">,</span> X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> cv<span class="token operator">=</span>kf<span class="token punctuation">,</span> scoring<span class="token operator">=</span><span class="token string">&quot;neg_mean_squared_error&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token operator">-</span>linreg_cv<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[8.15792932, 8.63117538, 7.52275279, 8.6205778, 7.91329988]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="handling-missing-data" tabindex="-1"><a class="header-anchor" href="#handling-missing-data" aria-hidden="true">#</a> Handling missing data</h2><p>No value for a feature in a particular row, This can occur because:</p><ul><li>There may have been no observation</li><li>The data might be corrupt</li></ul><p>We need to deal with missing data</p><h3 id="dropping-missing-data" tabindex="-1"><a class="header-anchor" href="#dropping-missing-data" aria-hidden="true">#</a> Dropping missing data</h3><p>一个常见的方法是移除占所有数据5%以下的缺失观测值。为了做到这一点，我们使用pandas的dot-dropna方法，将一个缺失值小于5%的列的列表传递给subset参数。如果在我们的子集列中存在缺失值，那么整行都会被删除。重新检查DataFrame，我们看到更少的缺失值。</p><img src="https://pic.hanjiaming.com.cn/2022/07/23/b13466ea5d6ed.png" alt="1658586056292.png" style="zoom:33%;"><h3 id="imputing-values" tabindex="-1"><a class="header-anchor" href="#imputing-values" aria-hidden="true">#</a> Imputing values</h3><p>代入法「Imputing」 —— 利用受试者的专业知识，用有根据的猜测取代缺失的数据</p><ul><li>Common to use the mean, Can also use the median, or another value</li><li>For categorical values, we typically use the most frequent value - the mode</li><li>首先必须拆分我们的数据，以避免数据泄漏</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Imputation with scikit-learn</span>
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>impute <span class="token keyword">import</span> SimpleImputer

X_cat <span class="token operator">=</span> music_df<span class="token punctuation">[</span><span class="token string">&quot;genre&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
X_num <span class="token operator">=</span> music_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;genre&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;popularity&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values
y <span class="token operator">=</span> music_df<span class="token punctuation">[</span><span class="token string">&quot;popularity&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values

X_train_cat<span class="token punctuation">,</span> X_test_cat<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X_cat<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>
X_train_num<span class="token punctuation">,</span> X_test_num<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X_num<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">12</span><span class="token punctuation">)</span>

imp_cat <span class="token operator">=</span> SimpleImputer<span class="token punctuation">(</span>strategy<span class="token operator">=</span><span class="token string">&quot;most_frequent&quot;</span><span class="token punctuation">)</span>
X_train_cat <span class="token operator">=</span> imp_cat<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X_train_cat<span class="token punctuation">)</span>
X_test_cat <span class="token operator">=</span> imp_cat<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X_test_cat<span class="token punctuation">)</span>

imp_num <span class="token operator">=</span> SimpleImputer<span class="token punctuation">(</span><span class="token punctuation">)</span>
X_train_num <span class="token operator">=</span> imp_num<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X_train_num<span class="token punctuation">)</span>
X_test_num <span class="token operator">=</span> imp_num<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X_test_num<span class="token punctuation">)</span>

X_train <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>X_train_num<span class="token punctuation">,</span> X_train_cat<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
X_test <span class="token operator">=</span> np<span class="token punctuation">.</span>append<span class="token punctuation">(</span>X_test_num<span class="token punctuation">,</span> X_test_cat<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Imputers are known as transformers</p><h3 id="imputing-within-a-pipeline" tabindex="-1"><a class="header-anchor" href="#imputing-within-a-pipeline" aria-hidden="true">#</a> Imputing within a pipeline</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>pipeline <span class="token keyword">import</span> Pipeline

music_df <span class="token operator">=</span> music_df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;genre&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;popularity&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;loudness&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;liveness&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;tempo&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
music_df<span class="token punctuation">[</span><span class="token string">&quot;genre&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>music_df<span class="token punctuation">[</span><span class="token string">&quot;genre&quot;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot;Rock&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

X <span class="token operator">=</span> music_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">&quot;genre&quot;</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values
y <span class="token operator">=</span> music_df<span class="token punctuation">[</span><span class="token string">&quot;genre&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values

steps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&quot;imputation&quot;</span><span class="token punctuation">,</span> SimpleImputer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&quot;logistic_regression&quot;</span><span class="token punctuation">,</span> LogisticRegression<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
pipeline <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span>steps<span class="token punctuation">)</span>
X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>

pipeline<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
pipeline<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0.7593582887700535
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">注意</p><p>请注意，在一个管道中，除了最后一步外，每一步都必须是一个转化器。</p></div><h2 id="centering-and-scaling" tabindex="-1"><a class="header-anchor" href="#centering-and-scaling" aria-hidden="true">#</a> Centering and scaling</h2><p>许多机器学习模型使用某种形式的距离来告知它们，所以如果我们有远大于尺度的特征，它们会不成比例地影响我们的模型。例如，KNN在进行预测时明确地使用距离。出于这个原因，我们实际上希望特征在一个类似的尺度上。为了实现这一点，我们可以将我们的数据规范化或标准化，通常被称为缩放和居中「Normalizing or standardizing (scaling and centering)」。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>music_df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&quot;duration_ms&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;loudness&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;speechiness&quot;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/07/24/ce194c6e5d762.png" alt="1658594827627.png" tabindex="0" loading="lazy"><figcaption>1658594827627.png</figcaption></figure><h3 id="how-to-scale-our-data" tabindex="-1"><a class="header-anchor" href="#how-to-scale-our-data" aria-hidden="true">#</a> How to scale our data</h3><ul><li>减去平均值并除以方差 <ul><li>所有 features 都以 0 为中心，方差为 1</li><li>This is called standardization</li></ul></li><li>也可以减去最小值并除以 range <ul><li>最小为0，最大为1</li></ul></li><li>也可以归一化，使数据范围从-1到+1。</li></ul><p>请参阅 scikit - 学习文档以获取更多详细信息</p><h3 id="scaling-in-scikit-learn" tabindex="-1"><a class="header-anchor" href="#scaling-in-scikit-learn" aria-hidden="true">#</a> Scaling in scikit-learn</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler

X <span class="token operator">=</span> music_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">&quot;genre&quot;</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values
y <span class="token operator">=</span> music_df<span class="token punctuation">[</span><span class="token string">&quot;genre&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values

X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>
scaler <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>

X_train_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>
X_test_scaled <span class="token operator">=</span> scaler<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>

<span class="token comment"># 对比缩放前后</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>X<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>X_train_scaled<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>X_train_scaled<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>19801.42536120538, 			71343.52910125865
2.260817795600319e-17, 	1.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="scaling-in-a-pipeline" tabindex="-1"><a class="header-anchor" href="#scaling-in-a-pipeline" aria-hidden="true">#</a> Scaling in a pipeline</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>steps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;scaler&#39;</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;knn&#39;</span><span class="token punctuation">,</span> KNeighborsClassifier<span class="token punctuation">(</span>n_neighbors<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
pipeline <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span>steps<span class="token punctuation">)</span>

X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">)</span>

knn_scaled <span class="token operator">=</span> pipeline<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
y_pred <span class="token operator">=</span> knn_scaled<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>knn_scaled<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0.81
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="cv-and-scaling-in-a-pipeline" tabindex="-1"><a class="header-anchor" href="#cv-and-scaling-in-a-pipeline" aria-hidden="true">#</a> CV and scaling in a pipeline</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> GridSearchCV

steps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">&#39;scaler&#39;</span><span class="token punctuation">,</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">&#39;knn&#39;</span><span class="token punctuation">,</span> KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
pipeline <span class="token operator">=</span> Pipeline<span class="token punctuation">(</span>steps<span class="token punctuation">)</span>

parameters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;knn__n_neighbors&quot;</span><span class="token punctuation">:</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">21</span><span class="token punctuation">)</span>
cv <span class="token operator">=</span> GridSearchCV<span class="token punctuation">(</span>pipeline<span class="token punctuation">,</span> param_grid<span class="token operator">=</span>parameters<span class="token punctuation">)</span>

cv<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
y_pred <span class="token operator">=</span> cv<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>cv<span class="token punctuation">.</span>best_score_<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>cv<span class="token punctuation">.</span>best_params_<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>0.8199999999999999
{&#39;knn__n_neighbors&#39;: 12}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,61),i=[e];function o(c,u){return s(),a("div",null,i)}const d=n(p,[["render",o],["__file","preprocessing-and-pipelines.html.vue"]]);export{d as default};
