import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as n,e as a}from"./app-2f817867.js";const t={},o=a('<h1 id="docker" tabindex="-1"><a class="header-anchor" href="#docker" aria-hidden="true">#</a> Docker</h1><h2 id="container" tabindex="-1"><a class="header-anchor" href="#container" aria-hidden="true">#</a> Container</h2><ul><li>&quot;Container&quot;:OS-Level Virtualization</li><li>操作系统级虚拟化：在操作系统之上对服务器进行虚拟化。</li><li>Examples: Docker, LXC (LinuX Containers), LXD,Solaris &quot;Zones&#39;&quot;, Google Containers,…</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/05/05/eaed61fe2dad8.png" alt="1714840561175.png" tabindex="0" loading="lazy"><figcaption>1714840561175.png</figcaption></figure><ul><li>容器：实例化「Each Container Operates like a Real Server}速度极快，每个实例的内存占用较小，并且单个主机上的密度较高。</li><li>缺点：容器提供的隔离性比虚拟机弱。</li></ul><p>每个容器都像真正的服务器一样运行</p><figure><img src="https://pic.hanjiaming.com.cn/2024/05/05/45ee64d79c0ee.png" alt="1714840777531.png" tabindex="0" loading="lazy"><figcaption>1714840777531.png</figcaption></figure><p>Simplistic view:a container can be seen as an isolated set of processes,interacting within an isolated set of file folders and device networks.</p><figure><img src="https://pic.hanjiaming.com.cn/2024/05/05/54815d8d0fbad.png" alt="1714840942125.png" tabindex="0" loading="lazy"><figcaption>1714840942125.png</figcaption></figure><h2 id="what-is-docker" tabindex="-1"><a class="header-anchor" href="#what-is-docker" aria-hidden="true">#</a> What is Docker?</h2><p>Docker is a <u>containerization platform</u> that</p><ul><li>packages your application and all its dependencies together in the form of a docker container</li><li>to ensure that your application works seamlessly in any environment.</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/05/05/3f6bb98566b40.png" alt="1714841035014.png" tabindex="0" loading="lazy"><figcaption>1714841035014.png</figcaption></figure><h2 id="core-techniques-used" tabindex="-1"><a class="header-anchor" href="#core-techniques-used" aria-hidden="true">#</a> Core Techniques used</h2><figure><img src="https://pic.hanjiaming.com.cn/2024/05/05/4289438fa07f3.png" alt="1714841206629.png" tabindex="0" loading="lazy"><figcaption>1714841206629.png</figcaption></figure><p>Docker relies on two major Linux kernel features:</p><ul><li><strong>Namespaces</strong> to isolate an application&#39;s view of the operating environment, including process frees, network, user IDs and mounted file systems → <u>&#39;limits what you can see&quot;</u></li><li><strong>Control Groups (cgroups)</strong>:<u>&quot;limits what you can use&quot;</u>(e.g.,CPU time,system memory,network / disk bandwidth)</li></ul><p>Each container runs in a separate namespace and its access is limited to that namespace.</p><figure><img src="https://pic.hanjiaming.com.cn/2024/05/05/653a5ef035fd3.png" alt="1714841407961.png" tabindex="0" loading="lazy"><figcaption>1714841407961.png</figcaption></figure><p>Docker uses Linux Namespaces</p><ul><li>pid 命名空间：进程隔离限制你在容器中看到的进程 ID</li><li>net 命名空间：管理网络接口（.NET：网络）--（&quot;你能看到的网络）</li><li>ipc 命名空间：管理对 IPC 资源的访问（IPC：进程间「InterProcess」通信）</li><li>mnt 命名空间：管理文件系统挂载点（MNT：Mount）--限制 &quot;你能看到的文件系统&quot;</li><li>uts 命名空间：隔离内核和版本标识符。(UTS：Unix 分时系统「Unix Timesharing System」）。</li></ul><div class="hint-container info"><p class="hint-container-title">Timesharing</p><p><strong>分时</strong>是在许多任务或用户之间共享计算资源。它支持单个用户执行多任务或支持多用户会话。</p></div>',22),r=[o];function s(c,l){return e(),n("div",null,r)}const d=i(t,[["render",s],["__file","container.html.vue"]]);export{d as default};
