const t=JSON.parse('{"key":"v-15f6ba09","path":"/note/cs/cn/Java-Socket-Programming/IO-Transport.html","title":"IO & Transport","lang":"zh-CN","frontmatter":{"article":false,"date":"2022-04-19T00:00:00.000Z","description":"IO &amp; Transport 等待传入 Class: Worker使 用BufferedInputStream而不是InputStream。 当无新的input stream时，会产生IO阻塞。防止while循环消耗系统资源。 读取stream后将自动清空buffer，防止重复读取。 DataInputStream dis = new DataInputStream(new BufferedInputStream(socket.getInputStream())); DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));","head":[["meta",{"property":"og:url","content":"https://guomaimang.github.io/note/cs/cn/Java-Socket-Programming/IO-Transport.html"}],["meta",{"property":"og:site_name","content":"HAN Jiaming | Hirsun | 韩佳明"}],["meta",{"property":"og:title","content":"IO & Transport"}],["meta",{"property":"og:description","content":"IO &amp; Transport 等待传入 Class: Worker使 用BufferedInputStream而不是InputStream。 当无新的input stream时，会产生IO阻塞。防止while循环消耗系统资源。 读取stream后将自动清空buffer，防止重复读取。 DataInputStream dis = new DataInputStream(new BufferedInputStream(socket.getInputStream())); DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-15T05:33:29.000Z"}],["meta",{"property":"article:author","content":"Hirsun (HAN Jiaming)"}],["meta",{"property":"article:published_time","content":"2022-04-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-15T05:33:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"IO & Transport\\",\\"description\\":\\"IO &amp; Transport 等待传入 Class: Worker使 用BufferedInputStream而不是InputStream。 当无新的input stream时，会产生IO阻塞。防止while循环消耗系统资源。 读取stream后将自动清空buffer，防止重复读取。 DataInputStream dis = new DataInputStream(new BufferedInputStream(socket.getInputStream())); DataOutputStream dos = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));\\"}"]]},"headers":[{"level":2,"title":"等待传入","slug":"等待传入","link":"#等待传入","children":[]},{"level":2,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"createdTime":1726378409000,"updatedTime":1726378409000,"contributors":[{"name":"hanjiaming","email":"47519540+guomaimang@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":0.98,"words":98},"filePathRelative":"note/cs/cn/Java-Socket-Programming/IO-Transport.md","localizedDate":"2022年4月19日","excerpt":"<h1> IO &amp; Transport</h1>\\n<h2> 等待传入</h2>\\n<p>Class: Worker使 用BufferedInputStream而不是InputStream。</p>\\n<ul>\\n<li>当无新的input stream时，会产生IO阻塞。防止while循环消耗系统资源。</li>\\n<li>读取stream后将自动清空buffer，防止重复读取。</li>\\n</ul>\\n<div class=\\"language-Java line-numbers-mode\\" data-ext=\\"Java\\"><pre class=\\"language-Java\\"><code>DataInputStream dis = new DataInputStream(new BufferedInputStream(socket.getInputStream()));\\nDataOutputStream dos = new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
