import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e}from"./app-cae5b675.js";const t={},i=e(`<h1 id="writing-functions" tabindex="-1"><a class="header-anchor" href="#writing-functions" aria-hidden="true">#</a> Writing Functions</h1><h2 id="docstrings" tabindex="-1"><a class="header-anchor" href="#docstrings" aria-hidden="true">#</a> Docstrings</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">count_letter</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> letter<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token triple-quoted-string string">&quot;&quot;&quot;Count the number of times \`letter\` appears in \`content\`.

  Args:
    content (str): The string to search.
    letter (str): The letter to search for.

  Returns:
    int

  # Add a section detailing what errors might be raised
  Raises:
    ValueError: If \`letter\` is not a one-character string.
  &quot;&quot;&quot;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>letter<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token builtin">len</span><span class="token punctuation">(</span>letter<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&#39;\`letter\` must be a single character string.&#39;</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">[</span>char <span class="token keyword">for</span> char <span class="token keyword">in</span> content <span class="token keyword">if</span> char <span class="token operator">==</span> letter<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="如何直接获取" tabindex="-1"><a class="header-anchor" href="#如何直接获取" aria-hidden="true">#</a> 如何直接获取</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Get the &quot;count_letter&quot; docstring by using an attribute of the function</span>
docstring <span class="token operator">=</span> count_letter<span class="token punctuation">.</span>__doc__

border <span class="token operator">=</span> <span class="token string">&#39;#&#39;</span> <span class="token operator">*</span> <span class="token number">28</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{}\\n{}\\n{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>border<span class="token punctuation">,</span> docstring<span class="token punctuation">,</span> border<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;script.py&gt; output:
    ############################
    Count the number of times \`letter\` appears in \`content\`.
    
      Args:
        content (str): The string to search.
        letter (str): The letter to search for.
    
      Returns:
        int
    
      Raises:
        ValueError: If \`letter\` is not a one-character string.
      
    ############################
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="inspect-getdoc-获取" tabindex="-1"><a class="header-anchor" href="#inspect-getdoc-获取" aria-hidden="true">#</a> inspect.getdoc()获取</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/72b5deeced1af.png" alt="1654597449727.png" tabindex="0" loading="lazy"><figcaption>1654597449727.png</figcaption></figure><h2 id="pass-by-assignment" tabindex="-1"><a class="header-anchor" href="#pass-by-assignment" aria-hidden="true">#</a> Pass by assignment</h2><p>和Java 的 Pass by reference相似。只不过需要注意不能更改的变量有什么。</p><img src="https://pic.hanjiaming.com.cn/2022/06/06/f72a61c904c48.png" alt="1654449339910.png" style="zoom:50%;"><img src="https://pic.hanjiaming.com.cn/2022/06/06/3cc15a60b6738.png" alt="1654449307135.png" style="zoom:50%;"><h2 id="context-managers" tabindex="-1"><a class="header-anchor" href="#context-managers" aria-hidden="true">#</a> context managers</h2><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h3><ul><li>设置一个上下文</li><li>运行你的代码</li><li>删除上下文</li></ul><h3 id="open" tabindex="-1"><a class="header-anchor" href="#open" aria-hidden="true">#</a> open()</h3><p>open() does three things:</p><ul><li>Sets up a context by opening a file</li><li>Lets you run any code you want on that file</li><li>Removes the context by closing the file</li></ul><h3 id="using-a-context-manager" tabindex="-1"><a class="header-anchor" href="#using-a-context-manager" aria-hidden="true">#</a> Using a context manager</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>with &lt;context-manager&gt;(&lt;args&gt;) as &lt;variable-name&gt;:
# Run your code here
# This code is running &quot;inside the context&quot;
# This code runs after the context is removed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举例</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;my_file.txt&#39;</span><span class="token punctuation">)</span><span class="token keyword">as</span> my_file<span class="token punctuation">:</span> text <span class="token operator">=</span> my_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span> 
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;The file is {} characters long&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="define-a-context-manager" tabindex="-1"><a class="header-anchor" href="#define-a-context-manager" aria-hidden="true">#</a> define a context manager</h3><p>Two ways:</p><ul><li>Class-based</li><li>Function-based</li></ul><p>此处关注基于函数的</p><img src="https://pic.hanjiaming.com.cn/2022/06/07/20e36aac6384a.png" alt="1654597949891.png" style="zoom:50%;"><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/2e1bb25508a08.png" alt="1654597982200.png" tabindex="0" loading="lazy"><figcaption>1654597982200.png</figcaption></figure><p>应当添加try-catch 保证最终一定关闭资源</p><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/58aa3eb406e5d.png" alt="1654598055599.png" tabindex="0" loading="lazy"><figcaption>1654598055599.png</figcaption></figure><h2 id="functions-as-objects" tabindex="-1"><a class="header-anchor" href="#functions-as-objects" aria-hidden="true">#</a> Functions as objects</h2><p>Python 思想：一切都是 object</p><h3 id="调用和赋值" tabindex="-1"><a class="header-anchor" href="#调用和赋值" aria-hidden="true">#</a> 调用和赋值</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/5e70dacee4630.png" alt="1654598199471.png" tabindex="0" loading="lazy"><figcaption>1654598199471.png</figcaption></figure><h3 id="functions-as-variables" tabindex="-1"><a class="header-anchor" href="#functions-as-variables" aria-hidden="true">#</a> Functions as variables</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/c1caa1974839f.png" alt="1654598284189.png" tabindex="0" loading="lazy"><figcaption>1654598284189.png</figcaption></figure><h3 id="子函数" tabindex="-1"><a class="header-anchor" href="#子函数" aria-hidden="true">#</a> 子函数</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>
	
	<span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>
		<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
		
  <span class="token keyword">for</span> value <span class="token keyword">in</span> x<span class="token punctuation">:</span>
  	bar<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>同样的，子函数对象也可以作返回值</p><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/ebad1de143398.png" alt="1654598434996.png" tabindex="0" loading="lazy"><figcaption>1654598434996.png</figcaption></figure><h2 id="scope" tabindex="-1"><a class="header-anchor" href="#scope" aria-hidden="true">#</a> Scope</h2><p>不妨先做个对比</p><table><thead><tr><th>Language</th><th>全局变量</th><th>局部变量</th><th>全局变量在函数内</th></tr></thead><tbody><tr><td>C/C++</td><td>有(函数外声明)</td><td>有(函数/{}内声明)</td><td>可读 可写</td></tr><tr><td>Python3</td><td>有(函数外声明)<br>(global函数内声明)</td><td>有(函数内声明)</td><td>可读, <br>不可写<br>加global后可写</td></tr><tr><td>Java</td><td>无(只有类变量,被成员共享访问)</td><td>有(函数/{}内声明)</td><td>类变量可读可写<br>除非用关键字控制</td></tr></tbody></table><h3 id="python-变量作用域" tabindex="-1"><a class="header-anchor" href="#python-变量作用域" aria-hidden="true">#</a> Python 变量作用域</h3><img src="https://pic.hanjiaming.com.cn/2022/06/07/7b933bfd02b22.png" alt="1654601701804.png" style="zoom:50%;"><h3 id="全局变量在函数内可读不可写" tabindex="-1"><a class="header-anchor" href="#全局变量在函数内可读不可写" aria-hidden="true">#</a> 全局变量在函数内可读不可写</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>x <span class="token operator">=</span> <span class="token number">7</span>
y <span class="token operator">=</span> <span class="token number">200</span>

<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  x <span class="token operator">=</span> <span class="token number">42</span>  <span class="token comment">#创建x为局部变量，忽略全局变量x</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>
  
foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>42
200
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="global-关键字" tabindex="-1"><a class="header-anchor" href="#global-关键字" aria-hidden="true">#</a> global 关键字</h3><p>global 关键字在函数内修饰变量，有两个作用</p><ol><li>在函数内声明一个新的全局变量，并且使该变量在函数内可读可写</li><li>若修饰的变量已经在全局定义，则使该变量在函数内可读可写</li></ol><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/f35c574ced3d3.png" alt="1654599590138.png" tabindex="0" loading="lazy"><figcaption>1654599590138.png</figcaption></figure><h3 id="nonlocal-关键字" tabindex="-1"><a class="header-anchor" href="#nonlocal-关键字" aria-hidden="true">#</a> nonlocal 关键字</h3><p>前面介绍了函数中可以创建子函数，然而子函数只能读取父函数的变量，并不能写。</p><p>nonlocal 关键字作用类似于global，是</p><p>在函数内声明一个新的变量，并且使该变量在其<strong>子函数</strong>内可读可写</p><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/a3966ba9dd673.png" alt="1654600903405.png" tabindex="0" loading="lazy"><figcaption>1654600903405.png</figcaption></figure><h2 id="closures" tabindex="-1"><a class="header-anchor" href="#closures" aria-hidden="true">#</a> Closures</h2><p>作用是 Attaching nonlocal variables to nested functions</p><p>思考子函数 离开了父函数 被传递给一个新的引用后，子函数 需要的读的父函数变量怎么获取？</p><p>答案就是 传递时，会将函数需要的 父函数变量 复制一份，放到 返回的子函数的<code>__closure__</code>里面。</p><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/d1773f3d8a182.png" alt="1654601087293.png" tabindex="0" loading="lazy"><figcaption>1654601087293.png</figcaption></figure><p>这里有一点需要注意的是每一次将返回一个新的子函数object，而不是共享一个子函数object</p><p>因此<code>__closure__</code>元组中的元素复制后就不会改变了。</p><p>删除变量不影响：</p><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/2a79f7173b985.png" alt="1654601507059.png" tabindex="0" loading="lazy"><figcaption>1654601507059.png</figcaption></figure><p>修改变量不影响：</p><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/c808c5bd76b79.png" alt="1654601522306.png" tabindex="0" loading="lazy"><figcaption>1654601522306.png</figcaption></figure><h2 id="decorators" tabindex="-1"><a class="header-anchor" href="#decorators" aria-hidden="true">#</a> Decorators</h2><p>首先明确一点，Java注解（Annotation） 和 Python的装饰器（Decorators）不是一个东西。Java也有Decorators。</p><img src="https://pic.hanjiaming.com.cn/2022/06/07/f3f3120ad5d84.png" alt="1654603831428.png" style="zoom:33%;"><p>Decorators 的功能总的来说就是劫持函数并修改其功能，实质是用一个新的函数把旧的函数进行一些修改后<strong>包装</strong>起来。</p><ul><li>修改输入</li><li>修改输出</li><li>改变函数本身的行为</li></ul><h3 id="使用修饰器" tabindex="-1"><a class="header-anchor" href="#使用修饰器" aria-hidden="true">#</a> 使用修饰器</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token decorator annotation punctuation">@double_args</span>
<span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">return</span> a <span class="token operator">*</span> b
multiply<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>20
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建修饰器" tabindex="-1"><a class="header-anchor" href="#创建修饰器" aria-hidden="true">#</a> 创建修饰器</h3><p>修饰器本身就是一个函数，以目标函数为参数，修改目标函数，之后把修改好的目标函数传传递给原引用。</p><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/c70f9749dfafd.png" alt="1654604502166.png" tabindex="0" loading="lazy"><figcaption>1654604502166.png</figcaption></figure><p>在创建修饰器的时候，需要注意的是应把修饰器函数的</p><ul><li>接受唯一参数，即函数object</li><li>返回唯一参数，即函数object</li><li>返回的函数object的 参数个数以及类型顺序 应当和旧函数的 参数个数以及类型顺序 相同。</li></ul><h3 id="示例1" tabindex="-1"><a class="header-anchor" href="#示例1" aria-hidden="true">#</a> 示例1</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">print_before_and_after</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Before {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment"># Call the function being decorated with *args</span>
    func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;After {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment"># Return the nested function</span>
  <span class="token keyword">return</span> wrapper

<span class="token decorator annotation punctuation">@print_before_and_after</span>
<span class="token keyword">def</span> <span class="token function">multiply</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span>

multiply<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Before multiply
50
After multiply
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="示例2" tabindex="-1"><a class="header-anchor" href="#示例2" aria-hidden="true">#</a> 示例2</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">counter</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    wrapper<span class="token punctuation">.</span>count <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token comment"># Call the function being decorated and return the result</span>
    <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
  wrapper<span class="token punctuation">.</span>count <span class="token operator">=</span> <span class="token number">0</span>
  <span class="token comment"># Return the new decorated function</span>
  <span class="token keyword">return</span> wrapper

<span class="token comment"># Decorate foo() with the counter() decorator</span>
<span class="token decorator annotation punctuation">@counter</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;calling foo()&#39;</span><span class="token punctuation">)</span>
  
foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
foo<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;foo() was called {} times.&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>calling foo()
calling foo()
foo() was called 2 times.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="functools-wraps" tabindex="-1"><a class="header-anchor" href="#functools-wraps" aria-hidden="true">#</a> functools.wraps</h3><p>由于被修饰后，原有的metadata将被包装而无法访问。</p><ul><li><code>__name__</code> ：函数的名称</li><li><code>__defaults__</code> ：函数的默认参数</li><li><code>__doc__</code> ：函数的注释</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/1e00256b85656.png" alt="1654608052881.png" tabindex="0" loading="lazy"><figcaption>1654608052881.png</figcaption></figure><p>给子函数wrapper添加修饰器即可解决这个问题。这样新函数的所有metadata将会赋值包装前函数的元数据。</p><p>此外，加上这个修饰器后支持访问包装前的函数。使用 <code>__wrapped__</code></p><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/cae2d8e214dc0.png" alt="1654608201850.png" tabindex="0" loading="lazy"><figcaption>1654608201850.png</figcaption></figure><h2 id="decorators-application" tabindex="-1"><a class="header-anchor" href="#decorators-application" aria-hidden="true">#</a> Decorators Application</h2><h3 id="timer" tabindex="-1"><a class="header-anchor" href="#timer" aria-hidden="true">#</a> @timer</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> time

<span class="token keyword">def</span> <span class="token function">timer</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token triple-quoted-string string">&quot;&quot;&quot;A decorator that prints how long a function took to run.&quot;&quot;&quot;</span>
  
  <span class="token comment"># Define the wrapper function to return.</span>
  <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># When wrapper() is called, get the current time.</span>
    t_start <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># Call the decorated function and store the result.</span>
    result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token comment"># Get the total time it took to run, and print it.</span>
    t_total <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t_start
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;{} took {}s&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> t_total<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> result
  
	<span class="token keyword">return</span> wrapper
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/bdb0c358b34e9.png" alt="1654607418130.png" tabindex="0" loading="lazy"><figcaption>1654607418130.png</figcaption></figure><h3 id="memoize" tabindex="-1"><a class="header-anchor" href="#memoize" aria-hidden="true">#</a> @memoize</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">memoize</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;Store the results of the decorated function for fast lookup
&quot;&quot;&quot;</span>
  <span class="token comment"># Store results in a dict that maps arguments to results</span>
  cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  
  <span class="token comment"># Define the wrapper function to return.</span>
  <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># If these arguments haven&#39;t been seen before,</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span> <span class="token keyword">not</span> <span class="token keyword">in</span> cache<span class="token punctuation">:</span>
    <span class="token comment"># Call func() and store the result.</span>
      cache<span class="token punctuation">[</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    <span class="token comment"># 注意如果cache中存在，则直接跳过了中间步骤而直接return</span>
    <span class="token keyword">return</span> cache<span class="token punctuation">[</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">]</span>
  
	<span class="token keyword">return</span> wrapper
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/06/07/c9b703e54740a.png" alt="1654607615207.png" tabindex="0" loading="lazy"><figcaption>1654607615207.png</figcaption></figure><h2 id="decorators-with-args" tabindex="-1"><a class="header-anchor" href="#decorators-with-args" aria-hidden="true">#</a> Decorators with args</h2><h3 id="run-n-times" tabindex="-1"><a class="header-anchor" href="#run-n-times" aria-hidden="true">#</a> run_n_times()</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/08/bc6450289ecae.png" alt="1654626616735.png" tabindex="0" loading="lazy"><figcaption>1654626616735.png</figcaption></figure><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h3><p>不妨当做对旧的函数进行两次包装...</p><img src="https://pic.hanjiaming.com.cn/2022/06/08/84fd361d7039f.png" alt="1654627117384.png" style="zoom:50%;"><h3 id="timeout" tabindex="-1"><a class="header-anchor" href="#timeout" aria-hidden="true">#</a> @timeout()</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">timeout</span><span class="token punctuation">(</span>n_seconds<span class="token punctuation">)</span><span class="token punctuation">:</span>
  
  <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    
    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token comment"># Set an alarm for n seconds</span>
      signal<span class="token punctuation">.</span>alarm<span class="token punctuation">(</span>n_seconds<span class="token punctuation">)</span>
      <span class="token keyword">try</span><span class="token punctuation">:</span>
      	<span class="token comment"># Call the decorated func</span>
      	<span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
      <span class="token keyword">finally</span><span class="token punctuation">:</span>
      	<span class="token comment"># Cancel alarm</span>
      	signal<span class="token punctuation">.</span>alarm<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        
    <span class="token keyword">return</span> wrapper
  
  <span class="token keyword">return</span> decorator
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://pic.hanjiaming.com.cn/2022/06/08/66b92d4ea5d60.png" alt="1654627288479.png" style="zoom:50%;"><h3 id="tag-tags" tabindex="-1"><a class="header-anchor" href="#tag-tags" aria-hidden="true">#</a> @tag(*tags)</h3><p>给某物打标签意味着你给该物打了一个或多个字符串，作为标签。例如，我们经常给电子邮件或照片打上标签，这样我们以后就可以搜索它们了。你决定写一个装饰器，让你用一个任意的标签列表来标记你的函数。你可以将这些标签用于许多事情。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token operator">*</span>tags<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token comment"># Define a new decorator, named &quot;decorator&quot;, to return</span>
  <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># Ensure the decorated function keeps its metadata</span>
    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
      <span class="token comment"># Call the function being decorated and return the result</span>
      <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
    wrapper<span class="token punctuation">.</span>tags <span class="token operator">=</span> tags
    <span class="token keyword">return</span> wrapper
  <span class="token comment"># Return the new decorator</span>
  <span class="token keyword">return</span> decorator

<span class="token decorator annotation punctuation">@tag</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;this is a tag&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">pass</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>tags<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>(&#39;test&#39;, &#39;this is a tag&#39;)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="returns" tabindex="-1"><a class="header-anchor" href="#returns" aria-hidden="true">#</a> @returns()</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">returns</span><span class="token punctuation">(</span>return_type<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token comment"># Complete the returns() decorator</span>
  <span class="token keyword">def</span> <span class="token function">decorator</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
      result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
      <span class="token keyword">assert</span> <span class="token builtin">type</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">==</span> return_type
      <span class="token keyword">return</span> result
    <span class="token keyword">return</span> wrapper
  <span class="token keyword">return</span> decorator
  
<span class="token decorator annotation punctuation">@returns</span><span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">return</span> value

<span class="token keyword">try</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span>foo<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span> AssertionError<span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;foo() did not return a dict!&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>foo() did not return a dict!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,117),p=[i];function o(c,l){return a(),s("div",null,p)}const d=n(t,[["render",o],["__file","Writing-Functions.html.vue"]]);export{d as default};
