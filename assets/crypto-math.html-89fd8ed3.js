import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,e as o}from"./app-b51b4849.js";const a={},t=o('<h1 id="crypto-math" tabindex="-1"><a class="header-anchor" href="#crypto-math" aria-hidden="true">#</a> Crypto Math</h1><h2 id="diffie-hellman-protocol" tabindex="-1"><a class="header-anchor" href="#diffie-hellman-protocol" aria-hidden="true">#</a> Diffie-Hellman Protocol</h2><img src="https://pic.hanjiaming.com.cn/2024/10/30/0d754202c1fa8.png" alt="Diffie-Hellman_Key_Exchange.svg.png" style="zoom:33%;"><div class="hint-container tip"><p class="hint-container-title">提示</p><p>离散对数问题是指在给定一个大质数p和一个基数g的情况下，找到一个整数x，使得g^x ≡ y (mod p)。这个问题被认为在计算上是困难的，Diffie-Hellman协议的安全性正是基于离散对数问题的难度。</p></div><p>Diffie-Hellman协议是公钥加密的“种子”，另一个重要的分支是RSA加密算法。</p><p>Example:</p><p>Alice和Bob希望在公开的互联网信道上安全地交换一个共享的秘密密钥，以便后续使用对称加密进行安全通信。</p><p>在公开信道上交换密钥时，存在被攻击者监听的风险。Diffie-Hellman协议通过数学方法确保即使通信被监听，攻击者也无法得知密钥的具体内容。</p><ol><li>Alice和Bob选择一个大质数p和基数g，并公开这些值。</li><li>Alice生成一个随机数a，并计算A = g^a mod p，然后将A发送给Bob。</li><li>Bob生成一个随机数b，并计算B = g^b mod p，然后将B发送给Alice。</li><li>Alice计算共享密钥S = B^a mod p。</li><li>Bob计算共享密钥S = A^b mod p。</li><li>因为S = g^(ab) mod p，Alice和Bob得到了相同的共享密钥。</li></ol><p>假设p = 23, g = 5。</p><ul><li>Alice选择a = 6，计算A = 5^6 mod 23 = 8。</li><li>Bob选择b = 15，计算B = 5^15 mod 23 = 19。</li><li>Alice计算共享密钥S = 19^6 mod 23 = 2。</li><li>Bob计算共享密钥S = 8^15 mod 23 = 2。<br> 最终，Alice和Bob得到了相同的共享密钥2。</li></ul><h2 id="discrete-logarithm-problem" tabindex="-1"><a class="header-anchor" href="#discrete-logarithm-problem" aria-hidden="true">#</a> Discrete Logarithm Problem</h2>',12),c=[t];function r(p,n){return e(),l("div",null,c)}const h=i(a,[["render",r],["__file","crypto-math.html.vue"]]);export{h as default};
