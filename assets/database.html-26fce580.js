import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as a,e as l}from"./app-1a186aa2.js";const t={},s=l(`<h1 id="database" tabindex="-1"><a class="header-anchor" href="#database" aria-hidden="true">#</a> Database</h1><p>Three-Tier Architecture</p><img src="https://pic.hanjiaming.com.cn/2024/12/10/f61c69903bac4.png" alt="1733775819120.png" style="zoom:40%;"><h2 id="dbms" tabindex="-1"><a class="header-anchor" href="#dbms" aria-hidden="true">#</a> DBMS</h2><p>Database Management System (DBMS)</p><ul><li>一个存储和管理（可能大量）数据集合的系统</li><li>它允许用户执行操作并管理数据收集（例如创建新记录、查询现有记录）</li></ul><p>Data Model</p><ul><li>数据模型描述了数据应该如何组织</li><li>它描述了数据元素如何相互关联</li><li>在大多数情况下，数据模型反映了现实世界中事物之间的关系</li><li>广泛使用的数据模型是数据的关系模型</li><li>表描述了不同对象之间的关系</li></ul><h2 id="relational-databases" tabindex="-1"><a class="header-anchor" href="#relational-databases" aria-hidden="true">#</a> Relational Databases</h2><p>A database is a collection of relations (<strong>tables</strong>)</p><ul><li>Each relation has a list of attributes (<strong>columns</strong>) <ul><li>Each <strong>attribute</strong> has a domain (<strong>data type</strong>)</li></ul></li><li>Each <strong>relation</strong> contains a set of tuples (<strong>rows</strong>) <ul><li>Each tuple has a value for each attribute of the relation (or <strong>NULL</strong> if no value is given)</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">ACID Properties of Relational Database</p><p>关系型数据库侧重于拥有可靠的交易，通常具有ACID属性</p><ul><li><strong>Atomicity</strong>「原子性」 – 每次交易要么是“全部完成”，要么是“失败”。</li><li><strong>Consistency</strong>「一致性」 - 数据只能根据预定义的规则进行更改</li><li><strong>Isolation</strong>「隔离」 - 并发查询不会相互干扰</li><li><strong>Durability</strong>「耐用性」- 结果在数据库中是持久的</li></ul></div><h2 id="nosql-databases" tabindex="-1"><a class="header-anchor" href="#nosql-databases" aria-hidden="true">#</a> NoSQL Databases</h2><p>数据的关系模型和关系数据库是管理数据的强大工具，但它们不能解决所有问题。</p><ul><li>Data Model – data may be better modelled as <strong>objects in a hierarchy</strong> or a <strong>graph</strong></li><li>Scheme – in many applications, it can be too restrictive to have <strong>fixed schema</strong></li><li>Scalability – it takes a lot of effort to <strong>horizontally scale relational databases</strong></li></ul><p>因此，需要替代解决方案来解决新问题</p><p>NoSQL（非SQL、非关系型、不仅限于SQL）系统是提供用户以关系表以外的数据建模方式的存储系统。</p><ol><li>It is not a single technology</li><li>No SQL 数据库没有单一定义</li><li>许多不同的系统或解决方案可用于解决不同的问题</li></ol><h3 id="why-do-we-need-nosql-databases" tabindex="-1"><a class="header-anchor" href="#why-do-we-need-nosql-databases" aria-hidden="true">#</a> Why do we need NoSQL Databases?</h3><ol><li>网络应用程序和服务的普及 <ol><li>由于用户参与（用户内容），存在大量读写操作</li><li>复杂函数需要数据模型具有灵活性（例如，在社交网络中找到朋友的朋友，找到与同年龄段用户购买的相关商品等）。</li><li>Horizontal scaling is desirable</li></ol></li><li>Flexibility in data schema is required <ol><li>关系型数据库需要数据模式被良好定义</li><li>然而，在许多应用中可能会有很多属性，并且这些属性可能会随时间变化</li></ol></li><li>处理不同类型的数据需要不同的解决方案 <ol><li>结构化数据与半结构化/非结构化数据</li><li>需要实时服务的数据与日志数据</li></ol></li></ol><p>NoSQL数据库系统的常见特性</p><ul><li>不需要定义固定的模式</li><li>水平扩展（分布式操作、复制和分区）跨越多台服务器</li><li>简单或无查询语言，提供数据操作API</li><li>一个较弱的并发模型（非ACID）</li><li>Distributed storage</li></ul><h3 id="types-of-nosql-databases" tabindex="-1"><a class="header-anchor" href="#types-of-nosql-databases" aria-hidden="true">#</a> Types of NoSQL Databases</h3><ul><li>Document oriented (general purposes): e.g. MongoDB</li><li>Key-value pair (pub-sub system) e.g. Redis</li><li>Graph oriented (social network) e.g. Neo4j</li><li>Column based (for blogging) e.g. Apache HBase</li><li>Object based (for versioning) e.g. Gemstone</li></ul><h4 id="document-stores" tabindex="-1"><a class="header-anchor" href="#document-stores" aria-hidden="true">#</a> Document Stores</h4><ul><li>示例包括 CouchDB 和 MongoDB</li><li>类似于键值存储，但值是一个文档</li><li>文档采用半结构化格式（例如JSON或XML）</li><li>允许通过搜索内容检索文档</li></ul><h4 id="key-value-stores" tabindex="-1"><a class="header-anchor" href="#key-value-stores" aria-hidden="true">#</a> Key-value Stores</h4><ul><li>示例包括 Redis、Riak、Oracle NoSQL 数据库</li><li>实现字典或哈希表</li><li>数据检索非常快</li><li>为了快速检索已知键的值，但不适合搜索</li></ul><img src="https://pic.hanjiaming.com.cn/2024/12/10/44ffa8b1fe705.png" alt="1733833744489.png" style="zoom:33%;"><h4 id="graph-databases" tabindex="-1"><a class="header-anchor" href="#graph-databases" aria-hidden="true">#</a> Graph Databases</h4><p>示例包括 Neo4j、Data Stax 和 Orient DB</p><p>Store data in the form of</p><ul><li>Nodes (entities)</li><li>Edges (relations between entities)</li><li>Properties (attributes of nodes or edges)</li></ul><p>对图执行查询，无需执行昂贵的 JOIN 操作</p><h3 id="collections-and-documents" tabindex="-1"><a class="header-anchor" href="#collections-and-documents" aria-hidden="true">#</a> Collections and Documents</h3><p>Hierarchical storage structure</p><ul><li>Database</li><li>Collections</li><li>Documents</li></ul><img src="https://pic.hanjiaming.com.cn/2024/12/10/73143b0468d3b.png" alt="1733834485657.png" style="zoom:40%;"><h3 id="features-of-nosql" tabindex="-1"><a class="header-anchor" href="#features-of-nosql" aria-hidden="true">#</a> Features of NoSQL</h3><ul><li>There are no relations among the collections.</li><li>There are duplicated data across different collections.</li><li>When you update some items, you need to update all relevant entries.</li></ul><p>NoSQL为了高效的查询和处理，牺牲了内存和磁盘空间。</p><h3 id="more-about-nosql" tabindex="-1"><a class="header-anchor" href="#more-about-nosql" aria-hidden="true">#</a> More about NoSQL</h3><ul><li>Unrelated data is stored in <strong>JSON</strong> like documents.</li><li>Unlike SQL, NoSQL does <strong>not require</strong> any prior <strong>schema</strong>.</li><li>NoSQL支持JSON查询语言来处理数据。</li><li>NoSQL不支持外键的使用。</li><li>为备份或重新加载数据备份副本，NoSQL支持分片和复制。</li><li>NoSQL数据库可以垂直和水平扩展。</li><li>NoSQL optimized for <strong>read and write</strong> performance.</li><li>一些GitHub支持包括mongodb/mongo和doctrine/mongodb。</li><li>NoSQL适用于实时分析、内容管理、物联网等... 等等</li></ul><h2 id="crud-operations" tabindex="-1"><a class="header-anchor" href="#crud-operations" aria-hidden="true">#</a> CRUD Operations</h2><p>数据项的常见操作</p><ul><li><strong>C</strong>reate</li><li><strong>R</strong>ead / <strong>R</strong>etrieve</li><li><strong>U</strong>pdate</li><li><strong>D</strong>elete</li></ul><p>您在网页数据库中经常会遇到这些操作</p><p>CRUD操作由PyMongo查询函数支持, 查询是异步执行的</p><h2 id="caching" tabindex="-1"><a class="header-anchor" href="#caching" aria-hidden="true">#</a> Caching</h2><ul><li>缓存是一种临时数据存储，用于存储数据以便将来快速检索</li><li>主要实现为键值存储，其中唯一的键可以用于在O(1)时间内检索值</li><li>缓存通常很小（RAM很贵！）</li><li>击中（找到） vs. 未击中（未找到）</li><li>缓存可以是持久的，如果它也将当前状态存储到某些持久存储（例如硬盘）中</li></ul><h3 id="memcached" tabindex="-1"><a class="header-anchor" href="#memcached" aria-hidden="true">#</a> Memcached</h3><p>通用分布式内存缓存系统</p><ul><li>通用型 - 可用于Web服务器、应用服务器或数据库服务器之前</li><li>分布式 - 可在多个服务器上运行以实现可扩展性</li><li>内存 - 在RAM中存储值，如果RAM不足，则丢弃旧值</li></ul><p>Memcached + Nginx</p><p>键值对应由应用程序（Nginx外部）插入到Memcached中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>inserted into Memcached by the application (external to Nginx)
server {
     location / {
         set $memcached_key &quot;$uri?$args&quot;;
         memcached_pass host:11211;
         error_page 404 502 504 = @fallback;
}
     location @fallback {
         proxy_pass http://backend;
} }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="using-database-in-android" tabindex="-1"><a class="header-anchor" href="#using-database-in-android" aria-hidden="true">#</a> Using Database in Android</h2><ul><li>在开发您的Android应用时，您希望在设备上本地存储结构化数据并不罕见。</li><li>在Android中，有一个关系型数据库库（SQLite）</li><li>在SQLite之上有一个名为Room的抽象层可用</li></ul>`,58),o=[s];function n(r,d){return i(),a("div",null,o)}const u=e(t,[["render",n],["__file","database.html.vue"]]);export{u as default};
