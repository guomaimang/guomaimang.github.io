import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as a,e}from"./app-12f9fcf6.js";const n={},r=e('<h1 id="privacy-enhancing-crypto" tabindex="-1"><a class="header-anchor" href="#privacy-enhancing-crypto" aria-hidden="true">#</a> Privacy Enhancing Crypto</h1><p>How signature is used in blockchain</p><ul><li>核心思想：公钥 = 身份</li><li>如果你看到签名sig，使得Verify(pk, msg, sig) = true，可以理解为公钥pk在说，“[消息]”</li><li>UTXO model in Bitcoin, Account model in Ethereum 都使用了 signature</li></ul><p>How to make a new identity</p><ul><li>Create a new, random key-pair (sk, pk)</li><li>pk (or the address Hash(pk)) is the public &quot;name&quot; you can use</li><li>You control the identity, because only you know sk</li><li>无需许可「Permissionless」：任何人可以在任何时间创建一个新的身份。这个过程不需要中央机构的批准或参与。</li><li>Make as many as you want! No central coordination!</li><li>pk &quot;looks random&quot; and not directly connect to real-world identity?!</li><li>发送者可以为接收者“创建”一个公钥，以实现接收者的匿名性，例如在Monero中（Monero使用UTXO模型). 这种方法可以隐藏接收者的真实身份。</li></ul><h2 id="pseudonymous" tabindex="-1"><a class="header-anchor" href="#pseudonymous" aria-hidden="true">#</a> Pseudonymous</h2><p>「假名」</p><figure><img src="https://pic.hanjiaming.com.cn/2024/10/30/5efdf7fee9ea3.png" alt="1730296253162.png" tabindex="0" loading="lazy"><figcaption>1730296253162.png</figcaption></figure><ul><li>在区块链系统中，交易是公开的，因此需要额外的技术手段来保护用户的隐私。</li><li>比特币交易是公开的，但参与者的身份是隐藏的，只有他们的比特币地址是可见的。</li><li>这种假名性意味着虽然地址不直接显示用户的真实身份，但通过分析交易记录，仍然可以推断出用户的行为和身份。</li><li>公钥地址是由公钥生成的字符串，用于接收比特币。它类似于银行账号，可以公开分享。</li><li>一旦比特币地址与某个人的真实身份关联起来，所有通过该地址进行的交易记录都可以追溯到这个人，从而揭示其财务活动和行为。</li></ul><h2 id="anonymity" tabindex="-1"><a class="header-anchor" href="#anonymity" aria-hidden="true">#</a> Anonymity</h2><p>or precisely, unlinkability「或者准确地说，不可链接性」</p><p>对手银行无法将一笔取款交易与一笔存款交易关联起来。这意味着在电子现金系统中，用户可以从银行取款，然后在不透露身份的情况下将其花费在商家处，而银行无法追踪这些交易。</p><ol><li>Alice从银行账户中取出100单位的电子现金。</li><li>电子现金系统通过加密技术生成一个匿名的电子现金凭证，Alice可以用这个凭证进行支付。</li><li>Alice在Bob处消费100单位的电子现金，Bob接收到电子现金凭证。</li><li>Bob将电子现金凭证存入他的银行账户，银行验证凭证的合法性，但无法追踪到Alice。</li></ol><img src="https://pic.hanjiaming.com.cn/2024/10/30/7c81a8a211a5c.png" alt="1730296684084.png" style="zoom:50%;"><h3 id="fungibility" tabindex="-1"><a class="header-anchor" href="#fungibility" aria-hidden="true">#</a> Fungibility</h3><p>「可替代性」</p><ul><li>个体单位可以互相替代：这意味着一个单位的资产可以用另一个相同单位的资产替代，而不会影响其价值</li><li>比特币可能与你相关，或者被污染「tainted」。 <ul><li>比特币的交易记录是公开的，因此每个比特币的历史可以被追踪到。</li><li>如果某个比特币曾经用于非法活动，它可能会被认为是“污染的”。</li></ul></li><li>由于比特币的交易记录是公开的，但不一定每个人都会去查看，因此你可能在持有比特币时并不知道它的历史，直到你尝试交换或出售它时才发现。</li></ul><h3 id="transparency-of-blockchain" tabindex="-1"><a class="header-anchor" href="#transparency-of-blockchain" aria-hidden="true">#</a> Transparency of Blockchain</h3><p>「透明性」</p><ul><li>区块链的透明性可以提高系统的可信度和安全性。</li><li>透明性对于敏感信息来说是不理想的「desirable」。 <ul><li>金融交易中的敏感信息如果被公开，可能会导致隐私泄露和安全风险。</li><li>例如，两家银行之间的交易细节不应被其他银行知道。</li></ul></li></ul><h2 id="_3-types-of-privacy" tabindex="-1"><a class="header-anchor" href="#_3-types-of-privacy" aria-hidden="true">#</a> 3 Types of Privacy</h2><p>3 Types of Privacy, 3 Cryptocurrencies with Privacy</p><h3 id="zcash-20-s-p-14" tabindex="-1"><a class="header-anchor" href="#zcash-20-s-p-14" aria-hidden="true">#</a> Zcash (#20, S&amp;P &#39;14)</h3><ul><li><strong>Use ZK-SNARK</strong>：Zcash 使用 ZK-SNARK 技术来实现交易的零知识证明，从而确保交易的隐私性。</li><li>Zcash 的零知识证明技术可以扩展到零知识智能合约，使得智能合约的执行过程也能保持隐私。</li><li>K-SNARK 的证明时间大约为 30 秒。</li><li>ZK-SNARK 目前需要一个可信的初始化设置，但未来可以通过技术升级来消除这一需求。</li></ul><h3 id="monero-13" tabindex="-1"><a class="header-anchor" href="#monero-13" aria-hidden="true">#</a> Monero (#13)</h3><ul><li>门罗币通过可链接环签名技术实现发送方的匿名性。</li><li>通过 Diffie-Hellman 密钥交换实现接收方的匿名性。</li><li>使用离散对数承诺方案来保证交易内容的隐私。隐私保护技术在实际应用中非常实用。</li><li>匿名性在扩展性方面存在问题，隐藏发送方的计算复杂度为 O(n)。</li></ul><h3 id="dash-15" tabindex="-1"><a class="header-anchor" href="#dash-15" aria-hidden="true">#</a> Dash (#15)</h3><ul><li>达世币基于 CoinJoin 技术，通过将多个交易的输入和输出混合在一起实现匿名性。</li><li>达世币使用同态加密「homomorphic」技术将多个交易的输入和输出混合在一起。</li><li>达世币的匿名性有限，可能无法完全隐藏交易各方的身份。</li></ul><h2 id="privacy-concerns-in-signatures" tabindex="-1"><a class="header-anchor" href="#privacy-concerns-in-signatures" aria-hidden="true">#</a> Privacy Concerns in Signatures</h2><p>What can we do “with” signatures?</p><ul><li>一个人可以在一条消息上签名。</li><li>任何人都可以验证一个签名（基于消息和身份）。</li><li>(Accountable「可追责的」) Signer (Identity) Privacy</li></ul><h2 id="blind-signature" tabindex="-1"><a class="header-anchor" href="#blind-signature" aria-hidden="true">#</a> Blind Signature</h2><h3 id="a-simple-e-cash-system" tabindex="-1"><a class="header-anchor" href="#a-simple-e-cash-system" aria-hidden="true">#</a> A Simple E-Cash System</h3><p>你希望在使用电子现金时保持匿名，不让别人知道你具体的消费记录。银行的要求是：他们不希望你进行双重花费。</p><ul><li>你存入100美元，银行会给你100个1美元的电子硬币。</li><li>这个过程类似于在银行存款，但你得到的是电子形式的货币。</li><li>你以签名的形式提取一个单位（1美元）的硬币。这里的签名指的是数字签名，它代表了你对这1美元的所有权。</li><li>以每个硬币都有一个序列号。这个序列号用于追踪每个电子硬币的使用情况。</li><li>当你“花费”一个签名时，商家和后来银行会知道这个序列号。<br> 这个过程确保了每次交易的合法性和可追溯性。但也泄露了你发消费记录。</li><li>当商家或银行看到相同的序列号时，说明有人进行了双重花费。</li><li>但由于盲签名技术，提取和消费之间没有关联。 <ul><li><strong>提取阶段</strong>：用户从银行提取电子现金时，用户生成一个随机数并将其与电子现金的标识信息结合，形成一个遮蔽后的消息。银行对这个遮蔽后的消息进行签名，而不知原始消息内容。</li><li>用户在商家处使用电子现金时，用户解除遮蔽，向商家展示电子现金的原始标识信息和银行的签名。商家可以验证银行的签名但无法知道用户的身份或提取过程。</li></ul></li></ul><p>这是传统加密电子现金的起点（ZeroCash使用了一些类似的概念）。ZeroCash是一种基于零知识证明的电子现金系统，进一步增强了隐私保护。</p><h3 id="functionalities" tabindex="-1"><a class="header-anchor" href="#functionalities" aria-hidden="true">#</a> Functionalities</h3><ul><li>你，作为签名请求者，希望获得一个签名。</li><li>但是你不希望签名者知道被签名的内容。</li><li>KeyGen()是密钥生成函数，它生成一对公钥和私钥，用于加密和签名。</li><li>签名变成一个协议或一组算法。签名过程包括多个步骤，确保在保持隐私的情况下完成签名。</li><li>Blind(pk, m) -&gt; (m&#39;, r)。<br> 盲化过程使用公钥(pk)和消息(m)生成盲化消息(m&#39;)和盲化因子(r)。</li><li>Blind-Sign(sk, m&#39;) -&gt; S&#39;<br> 盲签名过程使用私钥(sk)对盲化消息(m&#39;)进行签名，生成盲签名(S&#39;)。</li><li>Unblind(pk, S&#39;, r) -&gt; S<br> 去盲化过程使用公钥(pk)、盲签名(S&#39;)和盲化因子(r)恢复原始签名(S)。</li><li>验证函数Verify()使用公钥(pk)和消息(m)验证签名(S)的真实性。</li></ul><h3 id="generic-scheme" tabindex="-1"><a class="header-anchor" href="#generic-scheme" aria-hidden="true">#</a> Generic Scheme</h3><ul><li>RSA Signatures and RSA Blind Signatures</li><li>A BLS-based Blind Signatures</li></ul><p>A “Generic” Blind Signature Scheme</p><p>Blind(pk, m) -&gt; (m&#39;, r)</p><ul><li>在盲签名过程中，首先需要对消息 m 进行盲化处理，这个过程称为 Blind。</li><li>这里的 pk 是公钥，m 是需要签名的消息。</li><li>盲化过程生成了一个新的消息 m&#39;，它是 m 的承诺，同时生成一个随机值 r 作为打开值。</li><li>这个过程确保了签名者看不到原始消息 m。</li></ul><p>Blind-Sign(sk, m&#39;) -&gt; S&#39;</p><ul><li>在这个步骤中，签名者使用其私钥 sk 对盲化后的消息 m&#39; 进行签名，生成签名 S&#39;。</li><li>由于 m&#39; 是盲化后的消息，签名者无法得知原始消息 m 的内容。</li><li>这个步骤确保了消息的隐私性，同时生成了一个有效的签名。</li></ul><p>Unblind(pk, S&#39;, r) -&gt; S</p><ul><li>在这个步骤中，请求者使用打开值 r 和公钥 pk 对签名 S&#39; 进行去盲化，恢复出对原始消息 m 的签名 S。</li><li>这个过程验证了签名的有效性。</li></ul><p>然而，这种方法存在问题，因为签名者可以看到 S&#39; 中的 m&#39;，从而可能将其与原始消息 m 联系起来。</p><p>这种联系的原因可能包括以下几点：</p><ol><li><strong>消息的唯一性</strong>：如果消息 m 是唯一的或具有明显特征，即使经过盲化，签名者也可能通过分析盲化后的消息 m′ 推测出原始消息 m。</li><li><strong>盲化因子的可逆性</strong>：盲化因子 r 用于将原始消息 m 盲化为 m′。如果盲化因子 r 的选择不够随机或不够强大，签名者可能通过数学分析或反向工程推导出盲化因子，从而推测出原始消息。</li></ol><h3 id="some-discussions" tabindex="-1"><a class="header-anchor" href="#some-discussions" aria-hidden="true">#</a> Some Discussions</h3><ul><li>盲签名技术作为一种基本的隐私保护技术，在更复杂的加密协议中通常作为入门或基础技术进行介绍和应用。</li><li>通过对BLS签名算法进行改进，可以实现盲签名协议，从而在签名过程中保护消息的隐私。</li><li>由此产生的简单电子现金系统仍然是传统的，不基于区块链，也不是去中心化的。</li><li>尽管盲签名技术在传统电子现金系统中使用，但它也在去中心化的加密货币系统中得到了应用，增强了隐私和安全性。</li><li>盲签名技术确保了电子货币的不可追踪性，使得无法将多次交易与同一次提现操作关联起来。</li><li>尽管盲签名技术保护了交易隐私，但发行银行的信息仍然是公开的，如何进一步隐藏这一信息是一个挑战。</li><li>在加密货币系统中，签名者的角色相当于传统系统中的付款者，负责验证和确认交易。</li></ul><h2 id="ring-confidential-transactions" tabindex="-1"><a class="header-anchor" href="#ring-confidential-transactions" aria-hidden="true">#</a> Ring Confidential Transactions</h2><p>从签名中隐藏签名者的身份</p><ul><li>签名的主要目的是验证消息的真实性和完整性。 <ul><li>如果我们不知道签名者是谁，那么签名就失去了验证的意义</li><li>因为我们无法确认消息的来源。</li></ul></li><li>这进一步强调了签名者身份的重要性。</li><li>在某些情况下，知道签名来自一组人中的某一个就足够了。例如，在举报或泄密的场景中，保护举报者的身份非常重要。</li></ul><p>环签名是一种允许签名者在一组用户中生成签名，同时保持匿名的技术。它有两个主要特性：自发性和匿名性。</p><ul><li><strong>自发性：签名者可以征召任何一组n个用户。</strong><ul><li>签名者可以选择任何一组用户来生成环签名，这些用户甚至可能不知道自己被选中。</li></ul></li><li><strong>匿名性：验证者无法确定谁是真正的签名者。</strong><ul><li>验证者只能确认签名来自这组用户中的某一个，但无法确定具体是谁。</li><li>这种匿名性通常是无条件的，即使在强大的计算能力下也无法破解。</li></ul></li></ul><p>环签名允许一个用户代表一组可能的签名者签署交易，而不透露实际发起交易的成员是谁。这种机制确保了签名者在群体中的匿名性。</p><p>为什么群体中的其他人会愿意帮助真正的签名者？这个问题通过&quot;自发性&quot;（spontaneity）来解决，即群体中的成员不需要事先同意或合作就可以生成环签名。</p><p>匿名性意味着没有人知道哪个公钥被&quot;使用&quot;了。环签名技术通过混淆不同成员的公钥来实现这一点，从而隐藏了具体的签名者。</p>',60),s=[r];function t(o,c){return l(),a("div",null,s)}const u=i(n,[["render",t],["__file","privacy.html.vue"]]);export{u as default};
