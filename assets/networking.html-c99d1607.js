import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as s,e as t,a,b as e}from"./app-7b037ba0.js";const l={},r=t('<h1 id="networking" tabindex="-1"><a class="header-anchor" href="#networking" aria-hidden="true">#</a> Networking</h1><figure><img src="https://pic.hanjiaming.com.cn/2024/05/09/97efe5ed22dd6.png" alt="1715244408072.png" tabindex="0" loading="lazy"><figcaption>1715244408072.png</figcaption></figure><h2 id="basic-knowledge" tabindex="-1"><a class="header-anchor" href="#basic-knowledge" aria-hidden="true">#</a> Basic Knowledge</h2><h3 id="osi-7-layers" tabindex="-1"><a class="header-anchor" href="#osi-7-layers" aria-hidden="true">#</a> OSI 7 Layers</h3><figure><img src="https://pic.hanjiaming.com.cn/2024/04/07/cd0cf0ff479fe.png" alt="1712422474583.png" tabindex="0" loading="lazy"><figcaption>1712422474583.png</figcaption></figure><h3 id="linux-networking" tabindex="-1"><a class="header-anchor" href="#linux-networking" aria-hidden="true">#</a> Linux Networking</h3><figure><img src="https://pic.hanjiaming.com.cn/2024/04/07/aff2131733b8b.png" alt="1712422757768.png" tabindex="0" loading="lazy"><figcaption>1712422757768.png</figcaption></figure><p>A protocol defines the</p><ul><li>format of packets 「数据包格式」</li><li>and the rules for communicating them across the network「以及在网络上传输这些信息的规则。」.</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/04/07/5066042e34b69.png" alt="1712423060553.png" tabindex="0" loading="lazy"><figcaption>1712423060553.png</figcaption></figure><h3 id="tcp-ip-packet-layout" tabindex="-1"><a class="header-anchor" href="#tcp-ip-packet-layout" aria-hidden="true">#</a> TCP/IP Packet Layout</h3><img src="https://pic.hanjiaming.com.cn/2024/04/07/6fa9238e7ba8a.png" alt="1712423502914.png" style="zoom:50%;">',12),c=a("div",{class:"hint-container tip"},[a("p",{class:"hint-container-title"},"TCP&UDP"),a("ul",null,[a("li",null,[e("UDP (User Datagram Protocol) 数据包的长度由一个16位的字段来定义，所以理论上，UDP数据包的最大长度是 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"16")])]),a("annotation",{encoding:"application/x-tex"},"2^{16}")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8141em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"16")])])])])])])])])])])]),e(" 字节，即 65536 字节。然而，这个长度包含了UDP头部的长度，而UDP头部的长度是8字节，所以UDP的有效载荷（Payload）的最大长度是 65536 - 8 = 65528字节。")]),a("li",null,[e("TCP (Transmission Control Protocol) 本身并没有明确规定 payload（有效负载）的最大长度。TCP 的数据长度是由 TCP 报文段的数据字段决定的，理论上这个长度可以达到 65535 字节，因为 TCP 报文段的长度字段是 16 位的，所以最大值为 "),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"16")]),a("mo",null,"−"),a("mn",null,"1"),a("mo",null,"="),a("mn",null,"65535")]),a("annotation",{encoding:"application/x-tex"},"2^{16}-1=65535")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"16")])])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1"),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"65535")])])]),e("。")])])],-1),o=a("div",{class:"hint-container warning"},[a("p",{class:"hint-container-title"},"注意"),a("p",null,"实际上 TCP/UDP 的 payload 长度还受到 IP 层的限制。"),a("ul",null,[a("li",null,[e('IPv4 的数据包（也被称为 "payload"）的最大长度是由总长度字段定义的，该字段是一个 16 位的值，所以其最大值是 '),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("msup",null,[a("mn",null,"2"),a("mn",null,"16")]),a("mo",null,"−"),a("mn",null,"1")]),a("annotation",{encoding:"application/x-tex"},"2^{16} - 1")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},"2"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.8141em"}},[a("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mtight"},"16")])])])])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),a("span",{class:"mbin"},"−"),a("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.6444em"}}),a("span",{class:"mord"},"1")])])]),e("，等于 65535 字节（64KB）。"),a("strong",null,"然而，这个长度包括了 IP 头部的长度"),a("ul",null,[a("li",null,"IP 头部的长度通常是 20 字节（当没有选项字段的时候）"),a("li",null,"但可以增加到 60 字节（当选项字段完全被使用的时候）"),a("li",null,'IPv6 有一个叫做 "jumbogram" 的选项，它允许数据包的长度超过这个限制。')])]),a("li",null,"以太网（Ethernet）的最大传输单元（MTU）是1500字节")]),a("p",null,[e("现代的网络协议，如TCP/IP，已经采用了一些技术来解决这个问题，例如分段和重组。因为如果需要传输的数据量非常大，那么就需要将数据分割成多个数据报进行传输，这可能会增加网络传输的复杂性和出错的可能性。"),a("strong",null,"在实际的以太网环境中，大多数数据报的大小都会被限制在1500字节以下，以避免过度的分片和重组。")])],-1),h=t('<h2 id="how-to-send-a-message" tabindex="-1"><a class="header-anchor" href="#how-to-send-a-message" aria-hidden="true">#</a> How to send a message</h2><h3 id="data-fragmentation" tabindex="-1"><a class="header-anchor" href="#data-fragmentation" aria-hidden="true">#</a> Data fragmentation</h3><ul><li>Application sends message</li><li>Data fragmentation TCP breaks it into **64 KBytes (65535 bytes)**segments</li></ul><h4 id="at-tcp-layer" tabindex="-1"><a class="header-anchor" href="#at-tcp-layer" aria-hidden="true">#</a> At TCP Layer</h4><img src="https://pic.hanjiaming.com.cn/2024/04/07/9941bef73050a.png" alt="1712423718657.png" style="zoom:33%;"><h4 id="at-ip-layer" tabindex="-1"><a class="header-anchor" href="#at-ip-layer" aria-hidden="true">#</a> At IP Layer</h4><img src="https://pic.hanjiaming.com.cn/2024/04/07/bb76ef48a38f3.png" alt="1712423790674.png" style="zoom:33%;"><p>IP添加20字节报头，发送到网络（IP允许处理的最大数据报是64KB。）</p><div class="hint-container info"><p class="hint-container-title">How much overhead with TCP</p><p>20 bytes of TCP + 20 bytes of IP = 40 bytes app layer overhead</p></div><h3 id="tcp-header-port-number" tabindex="-1"><a class="header-anchor" href="#tcp-header-port-number" aria-hidden="true">#</a> TCP header Port Number</h3><figure><img src="https://pic.hanjiaming.com.cn/2024/04/07/db206c1c91394.png" alt="1712431473090.png" tabindex="0" loading="lazy"><figcaption>1712431473090.png</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">在OSI七层模型中，哪一层的协议包含IP地址？</p><p>在OSI七层模型中，IP地址是在第三层，也就是网络层(Network Layer)处理的。其他层不包含IP地址。</p></div><h3 id="tcp-reliable-byte-stream-delivery" tabindex="-1"><a class="header-anchor" href="#tcp-reliable-byte-stream-delivery" aria-hidden="true">#</a> TCP: Reliable Byte Stream Delivery</h3><figure><img src="https://pic.hanjiaming.com.cn/2024/04/07/5b0047c6c200d.png" alt="1712431824196.png" tabindex="0" loading="lazy"><figcaption>1712431824196.png</figcaption></figure><h3 id="network-driver-layer" tabindex="-1"><a class="header-anchor" href="#network-driver-layer" aria-hidden="true">#</a> Network Driver Layer</h3><img src="https://pic.hanjiaming.com.cn/2024/04/07/97b2e59119d47.png" alt="1712465355981.png" style="zoom:50%;"><h4 id="data-fragmentation-by-network-driver" tabindex="-1"><a class="header-anchor" href="#data-fragmentation-by-network-driver" aria-hidden="true">#</a> Data Fragmentation by Network Driver</h4><ul><li>Within the payload of the Ethernet frame is the IP datagram.</li><li>The <strong>IP datagram</strong> contains a source IP address and destination IP address.</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/04/25/52761c4cddce8.png" alt="1714058377948.png" tabindex="0" loading="lazy"><figcaption>1714058377948.png</figcaption></figure><h4 id="ethernet-frame-packet" tabindex="-1"><a class="header-anchor" href="#ethernet-frame-packet" aria-hidden="true">#</a> Ethernet Frame/Packet</h4><figure><img src="https://pic.hanjiaming.com.cn/2024/04/25/549a4933eac6d.png" alt="1714059408395.png" tabindex="0" loading="lazy"><figcaption>1714059408395.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2024/04/25/0b59475e8674b.png" alt="1714059506649.png" tabindex="0" loading="lazy"><figcaption>1714059506649.png</figcaption></figure><h4 id="ethernet-mac-address" tabindex="-1"><a class="header-anchor" href="#ethernet-mac-address" aria-hidden="true">#</a> Ethernet MAC Address</h4><p>Each network card is uniquely identified by a 48 bit (6 bytes) address called <strong>Ethernet address</strong>, also known as <strong>Media Access Control (MAC)</strong> address.</p><figure><img src="https://pic.hanjiaming.com.cn/2024/04/26/c271392c60aee.png" alt="1714061597077.png" tabindex="0" loading="lazy"><figcaption>1714061597077.png</figcaption></figure><h4 id="connecting-devices" tabindex="-1"><a class="header-anchor" href="#connecting-devices" aria-hidden="true">#</a> Connecting Devices</h4><ul><li>Repeater/Hub (Layer 1) <ul><li>在 OSl 物理层工作，重新生成网络信号，并将其重新发送到其他网段。</li></ul></li><li>Layer 2 Switch <ul><li>Acts on the data link layer (MAC address level)</li><li>Most switches operate at Layer 2 (low-cost,dumb,but fast)</li></ul></li><li>Layer 3 Switch/Router <ul><li>Work at the OSI layer 3(Network layer)</li><li>Use the &quot;<strong>logical address</strong>&quot;(IP address)of packets and routing tables to determine the best path for data delivery.</li></ul></li><li>Layer 4 Switch (Load balancer) <ul><li>Based on both Layer 3 (IP addressing) and Layer 4 (<strong>TCP/UDP port numbers</strong>)information.</li><li>Layer 4 headers are examined to determine port numbers.</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>记住简单的一句话就好：报文源目的IP始终不变，MAC过一跳变一次。在此不考虑nat。</li><li>路由器用报文的目的IP查转发表，就能得到下一跳的IP，用下一跳的IP查MAC表就能知道下一跳的mac。<br> 那么转发表是怎么生成的呢？来自路由表，而路由表是通过IGP BGP之类的路由协议得来的端到端的路由。如果MAC表中没有对应的IP的表项怎么办呢，可以通过ARP协议学习到。</li><li>有路由表告诉你去往目的ip下一跳ip是什么，有arp表告诉你下一跳ip的mac是多少</li></ul></div><h3 id="layer-2-switch" tabindex="-1"><a class="header-anchor" href="#layer-2-switch" aria-hidden="true">#</a> Layer 2 Switch</h3><p>When device A sends out a frame to another device,its MAC address is updated in the switch&#39;s lookup table.</p><figure><img src="https://pic.hanjiaming.com.cn/2024/04/26/f1f3ee4f54804.png" alt="1714064982910.png" tabindex="0" loading="lazy"><figcaption>1714064982910.png</figcaption></figure><h3 id="layer-3-switch-router" tabindex="-1"><a class="header-anchor" href="#layer-3-switch-router" aria-hidden="true">#</a> Layer 3 Switch/Router</h3><ul><li>A router is a device used to connect different networks,</li><li>while a switch is the backbone of a network.</li></ul><p>A &quot;Layer 3&quot; switch is simply a switch that has the added ability to do Layer 3 routing.</p><figure><img src="https://pic.hanjiaming.com.cn/2024/04/26/cb03b1e137956.png" alt="1714065162564.png" tabindex="0" loading="lazy"><figcaption>1714065162564.png</figcaption></figure>',35),p=[r,c,o,h];function d(g,m){return n(),s("div",null,p)}const y=i(l,[["render",d],["__file","networking.html.vue"]]);export{y as default};
