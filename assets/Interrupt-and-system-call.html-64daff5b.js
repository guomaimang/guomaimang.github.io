import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as t,e as a}from"./app-248d1dbd.js";const n={},r=a('<h1 id="interrupts-and-system-calls" tabindex="-1"><a class="header-anchor" href="#interrupts-and-system-calls" aria-hidden="true">#</a> Interrupts and System Calls</h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Operating system is the manager of a computer system.</p><p>Remember that OS is itself a program and that a process is a program in execution.</p><p>When there are multiple processes executing, how can the OS control and manage them?</p><ul><li>The OS relies on a special alarm system, called the interrupt processing mechanism.</li><li>When an interrupt occurs, there is a chance for OS to grasp the CPU and make decision and arrangement to control the system.</li></ul><h2 id="i-o-processing" tabindex="-1"><a class="header-anchor" href="#i-o-processing" aria-hidden="true">#</a> I/O Processing</h2><p>One can perform I/O when CPU is doing useful work.</p><p>When I/O is completed, OS needs to put aside its current work and looks at I/O device for next I/O. 「当I/O完成后，<strong>操作系统需要将其当前的工作放在一边</strong>，并查看I/O设备的下一个I/O。」</p><ul><li>The event that I/O is completed causes an interrupt.</li><li>The suspension (interruption) of current work to handle the event is called <strong>interrupt processing</strong>.</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2022/03/23/163eca8be1fea.png" alt="1648020296753.png" tabindex="0" loading="lazy"><figcaption>1648020296753.png</figcaption></figure><p>Two methods for I/O processing</p><ul><li><p>Synchronous</p></li><li><p>Asynchronous</p></li></ul><figure><img src="https://pic.hanjiaming.com.cn/2022/03/23/74e174119ed0d.png" alt="1648020415900.png" tabindex="0" loading="lazy"><figcaption>1648020415900.png</figcaption></figure><h3 id="synchronous-i-o" tabindex="-1"><a class="header-anchor" href="#synchronous-i-o" aria-hidden="true">#</a> Synchronous I/O</h3><ul><li>I/O开始后，用户程序将等待，直到I/O完成。</li><li>程序等待并不做任何事情，直到收到I/O完成中断。</li><li>每次最多只有一个I/O请求未完成，没有同时的I/O处理。</li></ul><h3 id="asynchronous-i-o" tabindex="-1"><a class="header-anchor" href="#asynchronous-i-o" aria-hidden="true">#</a> Asynchronous I/O</h3><ul><li>在I/O开始后，用户程序继续执行，不需要等待I/O完成。</li><li>当I/O完成后，程序将收到一个中断。</li><li>可能有<strong>几个I/O</strong>请求一起工作</li><li>使用一个设备状态表(device-status table )来存储每个I/O设备的状态，包括其类型和状态。</li></ul><p>Device-Status Table</p><figure><img src="https://pic.hanjiaming.com.cn/2022/03/23/98223b3d0b7c9.png" alt="1648020607361.png" tabindex="0" loading="lazy"><figcaption>1648020607361.png</figcaption></figure><h2 id="interrupt" tabindex="-1"><a class="header-anchor" href="#interrupt" aria-hidden="true">#</a> Interrupt</h2><h3 id="interrupt-processing" tabindex="-1"><a class="header-anchor" href="#interrupt-processing" aria-hidden="true">#</a> Interrupt Processing</h3><p>An interrupt is a signal to the CPU to tell it about the occurrence of a major event. 「中断是给CPU的一个信号，告诉它一个重大事件的发生。」</p><ul><li>An error in calculation (illegal instruction, division by zero).</li><li>Completion of an I/O.</li><li>Hardware alarm.</li><li>User-generated event (often called a trap or signal).</li></ul><p>「Interrupt is the mechanism the OS uses so that it could turn attention to other activities and to manage resources, because interrupt will seize the CPU. 」中断是操作系统使用的<strong>机制</strong>，以便它可以将注意力转向其他活动并管理资源，因为中断会抢占CPU。</p><p>Two types of interrupts:</p><ul><li>Maskable interrupt: interrupt that may be ignored or handled later. A lower priority interrupt is maskable.</li><li>Non-maskable interrupt: interrupt that cannot be ignored. The CPU must handle this interrupt immediately. <ul><li>A non-maskable interrupt may be “over”-interrupted by another non-maskable higher priority one.</li></ul></li></ul><p>Depending on the cause of interrupts, we could classify them into 3 categories:</p><ul><li>Program interrupt <ul><li>Caused by conditions within CPU that requires attention, e.g. illegal instruction, overflow, division by zero, memory access violation, special instruction.</li><li>Sometimes also called traps (or signals in Unix/Linux).</li></ul></li><li>I/O interrupt <ul><li>Caused by I/O related events, e.g. I/O completion or device errors.</li></ul></li><li>Timer interrupt <ul><li>Caused by the hardware timer of the system to handle time-related activities.</li></ul></li></ul><p>中断意味着紧急情况。在一个（不可屏蔽的）中断发生后，CPU将搁置它正在执行的程序，保存程序计数器和寄存器的值（在堆栈上）。它以中断号为索引，查找中断表，寻找执行的程序。这个程序被称为中断处理程序，或中断服务程序（ISR）。这个程序被称为中断处理程序或中断服务例程（ISR），它在响应中断时被执行，以服务于中断。</p><img src="https://pic.hanjiaming.com.cn/2022/03/23/7be66f333771d.png" alt="1648021371841.png" style="zoom:33%;"><h3 id="interrupt-handling" tabindex="-1"><a class="header-anchor" href="#interrupt-handling" aria-hidden="true">#</a> Interrupt Handling</h3><ul><li>有可能当一个中断被服务时，另一个中断可能会到来。 <ul><li>如果进入的新中断Y的优先级较低，它将等待直到第一个中断X完成。</li><li>如果新中断Y的优先级较高，它将从当前的中断处理程序X中夺取CPU。</li></ul></li></ul><figure><img src="https://pic.hanjiaming.com.cn/2022/03/23/324b6d8b89668.png" alt="1648021486939.png" tabindex="0" loading="lazy"><figcaption>1648021486939.png</figcaption></figure><h3 id="operating-system-operation" tabindex="-1"><a class="header-anchor" href="#operating-system-operation" aria-hidden="true">#</a> Operating System Operation</h3><p>Almost all OS are interrupt-driven.</p><p>Without interrupt, there is no way the OS can get back the CPU from a program falling into infinite loop.</p><p>在PC上，你可以用<code>&lt;Ctrl&gt;&lt;Alt&gt;&lt;Del&gt;</code>中断一个程序，并在任务管理器下杀死该任务，但为什么呢？在<code>&lt;Ctrl&gt;&lt;Alt&gt;&lt;Del&gt;</code>时，会有一个硬件中断产生。无限循环中的程序将被中断。CPU被交给中断处理程序（任务管理器）。因此，你可以杀死这个任务。</p><p>在Unix中，你可以用<code>&lt;Ctrl&gt;&lt;C&gt;</code>来中断一个程序，会有一个信号（user trap）被发送到程序中。如果程序中没有针对该信号的中断处理程序（称为信号处理程序），程序将被终止。这就是所谓的signal processing （ in system programming ）。</p><p>中断允许操作系统在必要时获得系统的控制（有一个特殊事件）。</p><p>Basic interrupts are driven by hardware (often I/O devices or special interrupt pin) to the microprocessor.</p><h4 id="trap" tabindex="-1"><a class="header-anchor" href="#trap" aria-hidden="true">#</a> Trap</h4><p>A <strong>trap</strong> is a software-generated interrupt caused either by an <strong>error</strong> or a <strong>user request</strong>.</p><ul><li>软件错误或软件请求产生异常或陷阱，例如除以0，请求操作系统服务。</li><li>一个系统可能想通过做一些事情来回应除以0的错误（例如Java异常）。</li></ul><h4 id="the-timer-mechanism" tabindex="-1"><a class="header-anchor" href="#the-timer-mechanism" aria-hidden="true">#</a> The timer mechanism</h4><ul><li>防止无限循环和进程占用资源的一个简单方法。</li><li>设置中断，在特定的时间段（报警）后发生。</li><li>Operating system decrements counter upon timer interrupt.</li><li>当计数器达到零时，就会发生一些错误。</li><li>杀死进程或夺回资源（如解锁文件）。</li><li>有时，这被称为看门狗定时器（watchdog timer ）。</li><li>由timer interrupt mechanism 提供。</li></ul><p>In Unix, a special timer interrupt handler, called the clock routine, plays a central role in process scheduling and resource management. It is triggered by the hardware clock every 1/60 second in the original Unix design.「它由原始UNIX设计中的每1/60秒触发硬件时钟。」</p><h2 id="user-and-kernel-mode" tabindex="-1"><a class="header-anchor" href="#user-and-kernel-mode" aria-hidden="true">#</a> User and Kernel Mode</h2><p>由于中断处理很重要，在编写中断处理程序时必须特别小心。允许或禁用中断是非常重要的。回顾一下，中断是操作系统在必要时收回CPU的机制。如果用户程序可以禁用中断，操作系统就没有办法收回CPU并做一些补救措施。其结果是系统挂起（例如，Windows蓝屏）。</p><p>因此，硬件应该提供帮助，防止普通用户执行与中断有关的特殊命令。就计算机结构而言，这些命令被称为特权命令，包括I/O命令。常见的解决方案是在CPU硬件中提供双操作模式（dual operation mode )。</p><p>如果一个用户进程在用户模式下执行，它如何做需要执行特权指令的I/O呢？通过系统调用实现。系统调用是操作系统的一个入口端口。系统调用实际上是一个trap，它从用户模式变为内核模式，执行特权I/O指令，从系统调用返回，并恢复到用户模式，继续执行。</p><img src="https://pic.hanjiaming.com.cn/2022/03/23/f13e030a66fac.png" alt="1648022850591.png" style="zoom:67%;"><h2 id="system-calls" tabindex="-1"><a class="header-anchor" href="#system-calls" aria-hidden="true">#</a> System Calls</h2><p>A system call is a programming interface to the services provided by the OS.</p><p>The nature of a system call is similar to a procedure call (a very special procedure call).</p><ul><li>Often written in a high-level language like C/C++.</li><li><strong>User programs could not execute privileged instructions, except through the OS.</strong></li><li>System call provides the interface to execute these system functions by user programs.</li><li>To facilitate programmers, a high-level Application Program Interface (API) is often provided (e.g. Java API).</li><li>An API hides the details about system calls from programmers</li></ul><p>Example system call sequence to copy the contents of a file to another file.</p><figure><img src="https://pic.hanjiaming.com.cn/2022/03/23/8411788d3db2b.png" alt="1648023094304.png" tabindex="0" loading="lazy"><figcaption>1648023094304.png</figcaption></figure><p>Inside the OS, a number would beassociated with each system call.</p><ul><li>System-call interface maintains a table indexed according to these numbers.</li><li>Such a table looks like a table ofinterrupt handlers.</li></ul><img src="https://pic.hanjiaming.com.cn/2022/03/23/7764a95e9e6c5.png" alt="1648023259068.png" style="zoom:50%;"><p>When the user process executesthe system call, the system call interface generates a software trap.</p><p>The CPU switches to kernel mode and the system callroutine is executed (like interrupt).</p><p>Status of the system call is returned to the caller,together with any return values.</p><p>The caller needs to know nothing about how thesystem call is implemented.</p><img src="https://pic.hanjiaming.com.cn/2022/03/23/52d3671d62dd2.png" alt="1648023302480.png" style="zoom:50%;"><img src="https://pic.hanjiaming.com.cn/2022/03/23/6e259014def21.png" alt="1648023316192.png" style="zoom:50%;"><h2 id="operating-system-structure" tabindex="-1"><a class="header-anchor" href="#operating-system-structure" aria-hidden="true">#</a> Operating System Structure</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/03/23/6e259014def21.png" alt="1648023316192.png" tabindex="0" loading="lazy"><figcaption>1648023316192.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/03/23/c9e4a3e226be8.png" alt="1648023613322.png" tabindex="0" loading="lazy"><figcaption>1648023613322.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/03/23/2fbd62c408a93.png" alt="1648023634110.png" tabindex="0" loading="lazy"><figcaption>1648023634110.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/03/23/7f1b36dfc8361.png" alt="1648023660743.png" tabindex="0" loading="lazy"><figcaption>1648023660743.png</figcaption></figure>',72),l=[r];function s(o,c){return i(),t("div",null,l)}const d=e(n,[["render",s],["__file","Interrupt-and-system-call.html.vue"]]);export{d as default};
