import{_ as r}from"./plugin-vue_export-helper-c27b6911.js";import{r as n,o as s,c as l,a as e,b as i,d as a,e as d}from"./app-0cf55f2d.js";const o={},c=d(`<h1 id="核心、进程与线程" tabindex="-1"><a class="header-anchor" href="#核心、进程与线程" aria-hidden="true">#</a> 核心、进程与线程</h1><p>以下内容适用于C/C++，不适用于Python和Java.</p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><h3 id="program" tabindex="-1"><a class="header-anchor" href="#program" aria-hidden="true">#</a> Program</h3><p>Program「程序」，一个程序可以创建多个 Process「进程」。</p><h3 id="process" tabindex="-1"><a class="header-anchor" href="#process" aria-hidden="true">#</a> Process</h3><p>process「进程」</p><ul><li>A process is an instance of a running program「进程是正在运行的程序的实例」</li><li>A program is static, like a cookbook「程序是静态的，就像菜谱一样」</li><li>A process is dynamic, has lifetime, like cooking「一个过程是动态的，有生命，就像烹饪一样」</li><li>Many processes can be started running the same program「可以启动多个进程来运行同一程序」</li><li>Important resources needed by each process「每个进程需重要资源」</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/12/0f61ea2c09673.png" alt="image.png" title="image.png"><h3 id="thread" tabindex="-1"><a class="header-anchor" href="#thread" aria-hidden="true">#</a> Thread</h3><p>Thread「线程」，一个Process 可以由调用多个 Thread。</p><h3 id="the-concept-of-concurrency" tabindex="-1"><a class="header-anchor" href="#the-concept-of-concurrency" aria-hidden="true">#</a> The concept of concurrency</h3><p>concurrency「并发」</p><ul><li>There are more than one thread, before one running thread finishes, another thread has stared execution「有多个程序，在一个正在运行的程序完成之前，另一个程序已开始执行」</li><li>Multiple programs use the CPU alternatively「多个程序交替使用CPU」</li><li>The operating system offers the capability to shift between threads「<strong>操作系统</strong>提供了在线程之间切换的功能」</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/27/61a504e94e9d8.png" alt="1c3d9e2d8b80d.png" title="1c3d9e2d8b80d.png"><h4 id="流程图" tabindex="-1"><a class="header-anchor" href="#流程图" aria-hidden="true">#</a> 流程图</h4><p>这里的Processing翻译为流程，但不是进程！它演示的是线程的切换，而不是进程。</p><ul><li>Typical work flow of switching among processings「<strong>流程间切换的典型工作流程」</strong><ul><li>Start processing A</li><li>Save the context of A (registers) to A’s memory region「将A（寄存器）的上下文保存到A的内存区域」</li><li>Load the context of processing B「加载流程B的上下文」</li><li>Start to execute processing B「开始执行流程B」</li></ul></li></ul><p>……</p><img src="https://pic.hanjiaming.com.cn/2021/04/12/c882a12a2cc16.gif" alt="CleanShot 2021-04-12 at 18.38.26.gif" title="CleanShot 2021-04-12 at 18.38.26.gif"><h3 id="核心「core」和线程「thread」的关系" tabindex="-1"><a class="header-anchor" href="#核心「core」和线程「thread」的关系" aria-hidden="true">#</a> 核心「core」和线程「thread」的关系</h3><p>计算机的CPU<strong>核数</strong>是同时可以<strong>并行</strong>的线程数量</p><ul><li>线程是CPU调度分配的最小单位</li><li>由于超线程技术，实际上可以并行的线程数量通常是<strong>物理核数</strong>的两倍</li><li>我们只关心可以并行的线程数量，<strong>所以 以后所说的核数是操作系统看到的核数</strong>，所指的核也是超线程技术之后的那个核（不是物理核）</li><li><strong>操作系统看到的核心数 = 可以并行的线程数量（非物理核心数）</strong>，所以我们认为 <strong>核心数 = 可以并行的线程数量</strong></li></ul><p>故，我们可以认为，一个核心只能同时执行一个线程</p><h3 id="进程「process」-和-线程-的关系" tabindex="-1"><a class="header-anchor" href="#进程「process」-和-线程-的关系" aria-hidden="true">#</a> 进程「process」 和 线程 的关系</h3><ul><li><p>进程是操作系统资源分配（内存，显卡，磁盘）的最小单位</p></li><li><p>线程是执行调度（即CPU调度）的最小单位（CPU看到的都是线程而不是进程）</p></li><li><p>一个进程可以有一个或多个线程</p></li><li><p>线程之间共享进程的资源，通过这样的范式，就可以减少进程的创建和销毁带来的代价，可以让进程少一点，保持相对稳定，不断去调度线程就好。</p></li></ul><h3 id="并行-和-并发" tabindex="-1"><a class="header-anchor" href="#并行-和-并发" aria-hidden="true">#</a> 并行 和 并发</h3><p>Concurrent 翻译成 并发</p><p>这两个词是对<strong>线程</strong>而言的。</p><ul><li><p>并行：多个线程同时运行在不同的核心中</p></li><li><p>并发：多个线程交叉运行在一个核心中</p></li><li><p>如果计算机有多个CPU核心，线程就可以<strong>并行</strong>运行在不同的核。</p></li><li><p>对于每一个核心，多个线程交叉运行，这多个线程可以称之为并发，即为了均衡负载，CPU调度器会不断的在单核上切换不同的线程执行。一个核只能运行一个线程，这是一个暂停一个线程进而启动另一个线程的活动，目的就是不让CPU空闲。</p></li></ul><h3 id="启发" tabindex="-1"><a class="header-anchor" href="#启发" aria-hidden="true">#</a> 启发</h3><ol><li>并发虽然让我们看起来不同线程之间的任务是并行执行的，但是实际上却由于增加了线程切换的开销使得代价更大了。如果是多核多线程，且线程数量大于核数，其中有些线程就会不断切换，并发执行，但实际上最大的并行数量还是当前这个进程中的核的数量，所以盲目增加线程数不仅不会让你的程序更快，反而会给你的程序增加额外的开销。</li><li>任务可以分为计算密集型和IO密集型，假设我们现在使用一个进程来完成这个任务，对计算密集型任务，可以使用【核心数】个线程，就可以占满cpu资源，进而可以充分利用cpu，如果再多，就会造成额外的开销；对于IO密集型任务（涉及到网络、磁盘IO的任务都是IO密集型任务），线程由于被IO阻塞，如果仍然用【核心数】个线程，cpu是跑不满的，于是可以使用更多个线程来提高cpu使用率。</li><li><strong>实现并行计算有三种方式，多线程，多进程，多进程+多线程</strong></li><li>如果是多进程，因为每个进程资源是独立的（地址空间和数据空间），就要在操作系统层面进行通信，如管道，队列，信号等；多线程的话会共享进程中的地址空间和数据空间，一个线程的数据可以直接提供给其他线程使用，但方便的同时会造成变量值的混乱，所以要通过<strong>线程锁</strong>来限制线程的执行</li><li>其他语言，CPU 是多核时是支持多个线程同时执行。但在 Python 中，无论是单核还是多核，一个进程同时只能由一个线程在执行。其根源是 GIL 的存在。GIL 的全称是 Global Interpreter Lock(全局解释器锁)，来源是 Python 设计之初的考虑，为了数据安全所做的决定。某个线程想要执行，必须先拿到 GIL，我们可以把 GIL 看作是“通行证”，并且在一个 Python 进程中，GIL 只有一个。拿不到通行证的线程，就不允许进入 CPU 执行。所以多线程在python中很鸡肋。</li></ol><h2 id="miti-process" tabindex="-1"><a class="header-anchor" href="#miti-process" aria-hidden="true">#</a> Miti-Process</h2><p>Miti-Process 「多进程」</p><h3 id="programs-so-far" tabindex="-1"><a class="header-anchor" href="#programs-so-far" aria-hidden="true">#</a> Programs so far</h3><p>When a program runs</p><ul><li>It totally occupies the CPU</li><li>It consumes memory</li><li>It will not stop until the last instruction is finished</li><li>The program now runs in an isolated world「该程序现在在一个孤立的世界中运行」</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/12/ada31da66f1b4.png" alt="image.png" title="image.png"><p>USERS: I want to run multiple programs at the same time「用户：我想同时运行多个程序」</p><p>COMPUTER DESIGNERS: I want the hardware to be used more efficiently「计算机设计师：我希望硬件得到更有效的利用」</p><img src="https://pic.hanjiaming.com.cn/2021/04/12/c37baeb6f7818.png" alt="image.png" title="image.png"><h2 id="fork" tabindex="-1"><a class="header-anchor" href="#fork" aria-hidden="true">#</a> Fork()</h2><h3 id="introduction-1" tabindex="-1"><a class="header-anchor" href="#introduction-1" aria-hidden="true">#</a> Introduction</h3><p>fork 应用于 Unix，可以在 MacOS或Linux 进行实验。</p><p>一个进程，包括代码、数据和分配给进程的资源。</p><p>fork（）函数通过系统调用创建一个与原来进程几乎完全相同的进程，也就是两个进程可以做完全相同的事，但如果初始参数或者传入的变量不同，两个进程也可以做不同的事。</p><p>一个进程调用fork（）函数后，系统先给新的进程分配资源，例如存储数据和代码的空间。然后把原来的进程的所有值都复制到新的新进程中，只有少数值与原来的进程的值不同。相当于克隆了一个自己。</p><p><strong>遇到fork()后，它把进程当前的情况拷贝一份!</strong></p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;unistd.h&gt;
#include &lt;stdio.h&gt; 
int main () 
{ 
	pid_t fpid; //fpid表示fork函数返回的值
	int count=0;
	fpid=fork();
  
	if (fpid &lt; 0) 
		printf(&quot;error in fork!&quot;); 
	else if (fpid == 0) {
		printf(&quot;i am the child process, my process id is %d/n&quot;,getpid()); 	
		count++;
	}
	else {
		printf(&quot;i am the parent process, my process id is %d/n&quot;,getpid()); 
		count++;
	}
  
	printf(&quot;统计结果是: %d/n&quot;,count);
	return 0;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果</p><blockquote><p>i am the child process, my process id is 5574<br> 统计结果是: 1<br> i am the parent process, my process id is 5573<br> 统计结果是: 1</p></blockquote><p>在语句fpid=fork()之前，只有一个进程在执行这段代码，<strong>但在这条语句的同时（包含这条语句）</strong>，就变成两个进程在执行了，这两个进程的几乎完全相同，将要执行的下一条语句都是if(fpid&lt;0)……</p><p>为什么两个进程的fpid不同呢，这与fork函数的特性有关。</p><p>fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：</p><ol><li>在父进程中，fork() 返回新创建子进程的进程ID；</li><li>在子进程中，fork() 返回0；</li><li>如果出现错误，fork() 返回一个负值；</li></ol><h3 id="父进程与子进程" tabindex="-1"><a class="header-anchor" href="#父进程与子进程" aria-hidden="true">#</a> 父进程与子进程</h3><p>在fork函数执行完毕后，如果创建新进程成功，**则出现两个进程，一个是子进程，一个是父进程。**在子进程中，fork函数返回0，在父进程中，fork返回新创建子进程的进程ID。我们可以通过fork返回的值来判断当前进程是子进程还是父进程。</p><h4 id="相对父进程和相对子进程" tabindex="-1"><a class="header-anchor" href="#相对父进程和相对子进程" aria-hidden="true">#</a> 相对父进程和相对子进程</h4><p>当一个子进程创建了新的子进程，那么这个新的子进程相对于创建它的子进程就是相对子进程，创建这个子进程的进程叫相对父进程，相对父进程和相对子进程具有父子进程应该具有的属性。</p><p>比如子进程里创建的相对子进程返回的pid就是0，但是子进程里相对父进程就返回真实的pid。</p><p>同样的，相对父进程的waitpid()将会等待相对子进程的结束。</p><h3 id="流程" tabindex="-1"><a class="header-anchor" href="#流程" aria-hidden="true">#</a> 流程</h3><ol><li>使用 fork()</li><li>在此处创建一个新的进程</li><li>复制当前已经有的变量到洗呢进程里面</li><li>父子进程同时运行</li></ol><p>有时候，fork会copy整个语句，比如在if语句里。</p><p>怎样理解？</p><p><strong>只需记住不是从#include处开始复制代码的，而是遇到fork()后，把进程当前的情况拷贝一份!</strong></p><h3 id="fork-出错原因" tabindex="-1"><a class="header-anchor" href="#fork-出错原因" aria-hidden="true">#</a> fork() 出错原因</h3><p>使用fork() 创建的进程都是子进程。</p><ol><li>当前的进程数已经达到了系统规定的上限，这时errno的值被设置为EAGAIN。</li><li>系统内存不足，这时errno的值被设置为ENOMEM。</li></ol><h3 id="父子进程的顺序" tabindex="-1"><a class="header-anchor" href="#父子进程的顺序" aria-hidden="true">#</a> 父子进程的顺序</h3><p>创建新进程成功后，系统中出现两个基本完全相同的进程，这两个进程执行没有固定的先后顺序，哪个进程先执行要看系统的进程调度策略。</p><p>每个进程都有一个独特（互不相同）的进程标识符（process ID）。</p><p>在子进程里，可以通过 getpid（）函数获得，通过getppid（）函数获得父进程 pid。</p><h2 id="write-a-muti-process-program" tabindex="-1"><a class="header-anchor" href="#write-a-muti-process-program" aria-hidden="true">#</a> Write a Muti-Process program</h2><h3 id="write-a-program" tabindex="-1"><a class="header-anchor" href="#write-a-program" aria-hidden="true">#</a> Write a program</h3><ul><li>a process A is created and started with the program;</li><li>when A runs, A creates a new process B, running the same program as A, and concurrently with A</li></ul><p>「编写程序：创建进程A，并从该程序启动；当A运行时，A创建一个新进程B，与A运行相同的程序，并与A同时运行」</p><p>A: parent process「父进程」; B: child process「子进程」</p><img src="https://pic.hanjiaming.com.cn/2021/04/12/54dad6e8053f7.png" alt="image.png" title="image.png"><p>注意：在子进程中使用pid = fork(),得到的pid是0，但是子进程真正的pid中并不是0。</p><img src="https://pic.hanjiaming.com.cn/2021/04/12/7463d9a1537dc.png" alt="image.png" title="image.png"><h3 id="modeling-with-process-graph" tabindex="-1"><a class="header-anchor" href="#modeling-with-process-graph" aria-hidden="true">#</a> Modeling with process graph</h3><p>Modeling with process graph「使用过程图建模」</p><ul><li>A process graph is a tool for capturing the partial ordering of statements in a concurrent program「流程图是用于捕获并发程序中语句的部分排序的工具」</li><li>Each vertex is the execution of a statement「每个顶点都是一条语句的执行」</li><li>a -&gt; b means a happens before b「A-&gt; b表示a在b之前发生」</li><li>Edges can be labeled with current value of variables「边缘可以用变量的当前值标记」</li><li>printf vertices can be labeled with its output「printf顶点可以用其输出标记」</li><li>Each graph begins with a vertex with no in-edges「printf顶点可以用其输出标记」</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/12/6d8d2c1091240.png" alt="image.png" title="image.png"><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>How many “Example” output lines does this program print?</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>void try()
{
	fork();
	printf(&quot;Example\\n&quot;);
	fork();
	return;
}

int main()
{
	try(); 
	fork();
	printf(&quot;Example\\n&quot;);
	exit(0);
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://pic.hanjiaming.com.cn/2021/04/27/88d93530116f2.png" alt="image.png" title="image.png"><h3 id="synchronizing-parent-with-child" tabindex="-1"><a class="header-anchor" href="#synchronizing-parent-with-child" aria-hidden="true">#</a> Synchronizing parent with child</h3><img src="https://pic.hanjiaming.com.cn/2021/04/12/f74e31cf3e862.png" alt="image.png" title="image.png"><p>Is the following outputs valid? Why?</p><ul><li>ACBCBCC</li><li>ABCCBCC</li><li>ABCBCCC</li></ul><h4 id="the-wait-function" tabindex="-1"><a class="header-anchor" href="#the-wait-function" aria-hidden="true">#</a> The wait() function</h4><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>wait() 会暂时停止<strong>目前进程</strong>的执行, <strong>直到有信号来到 或 任一子进程结束</strong></p><h5 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h5><ol><li>Suspend current process until one of its children terminates「暂停当前过程，直到其子进程之一终止」</li><li>Return value is the pid of the child process that terminates「返回值是终止的子进程的pid」</li></ol><h5 id="返回值" tabindex="-1"><a class="header-anchor" href="#返回值" aria-hidden="true">#</a> 返回值</h5><ul><li>如果在调用wait() 时子进程已经结束, 则wait()会立即返回子进程结束状态值.</li><li>如果在调用wait() 时子进程还没有结束, 则wait()会等待任何一个子进程结束，之后立刻返回子进程结束状态值.</li></ul><h5 id="参数设置" tabindex="-1"><a class="header-anchor" href="#参数设置" aria-hidden="true">#</a> 参数设置</h5><p><code>int* status</code></p><p>这个参数将保存子进程的状态信息，有了这个信息父进程就可以了解子进程为什么会推出，是正常推出还是出了什么错误。如果status不是空指针，则状态信息将被写入指针指向的内存。当然，如果不关心子进程为什么推出的话，也可以传入将status设置为空指针，即nullptr .</p><ul><li>status: If status != nullptr, the integer it points to will be set to a value that indicates the reason why the child terminates「child _ status：如果 status！= nullptr，则它指向的整数将设置为一个值，该值指示子级终止的原因」</li><li>Use <strong>macros</strong>「宏」 to extract the information given by status</li></ul><h4 id="waitpid" tabindex="-1"><a class="header-anchor" href="#waitpid" aria-hidden="true">#</a> waitpid()</h4><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#include &lt;sys/types.h&gt; 
#include &lt;sys/wait.h&gt;
pid_t waitpid(pid_t pid,int *status,int options);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于父进程而言</p><ul><li>如果在调用waitpid()函数时，当指定等待的子进程已经停止运行或结束了，则waitpid()会立即返回；</li><li>如果子进程还没有停止运行或结束，则调用waitpid()函数的进程则被阻暂停运行，直到指定的进程停止运行并返回退出码后。</li><li>如果waitpid()函数执行成功，则返回子进程的进程号；</li><li>如果有错误发生，则返回-1，并且将失败的原因存放在errno变量中。</li><li>失败的原因主要有 <ul><li>没有子进程（errno设置为ECHILD）</li><li>调用被某个信号中断（errno设置为EINTR）</li><li>选项参数无效（errno设置为EINVAL）</li></ul></li></ul><p>子进程碰到waitpid()直接跳过。但相对父进程会等待相对子进程。</p><h5 id="参数设置-1" tabindex="-1"><a class="header-anchor" href="#参数设置-1" aria-hidden="true">#</a> 参数设置</h5><p><code>pid_t pid</code></p><p>参数pid为欲等待的子进程识别码，其具体含义如下：</p><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>pid&lt;-1</td><td>等待进程组号为pid绝对值的任何子进程。</td></tr><tr><td>pid=-1</td><td>等待任何子进程，此时的waitpid()函数就退化成了普通的wait()函数。</td></tr><tr><td>pid=0</td><td>等待进程组号与目前进程相同的任何子进程，也就是说任何和调用waitpid()函数的进程在同一个进程组的进程。</td></tr><tr><td>pid&gt;0</td><td>等待进程号为pid的子进程。</td></tr></tbody></table><p>所以可以说，waitpid() 和 wait() 函数一个不同的地方就在 waitpid() 支持指定的进程号。</p><p>这些参数可以用“|”运算符连接起来使用。</p><p><code>int options</code></p><p>参数options提供了一些另外的选项来控制waitpid()函数的行为。如果不想使用这些选项，则可以把这个参数设为0。</p><p>主要使用的有以下两个选项：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>WNOHANG</td><td>如果pid指定的子进程没有结束，则waitpid()函数立即返回0，而不是阻塞在这个函数上等待；如果结束了，则返回该子进程的进程号。</td></tr><tr><td>WUNTRACED</td><td>如果子进程进入暂停状态，则马上返回值。</td></tr></tbody></table><p>如果像这样调用waitpid函数：waitpid(-1, status, 0)，这此时waitpid()函数就完全退化成了wait()函数。</p><h4 id="macros" tabindex="-1"><a class="header-anchor" href="#macros" aria-hidden="true">#</a> MACROS</h4><p>MACROS「宏」</p><table><thead><tr><th><strong>MACROS</strong></th><th><strong>Indication</strong></th></tr></thead><tbody><tr><td>WIFEXITED(status)</td><td>Returns true if the child terminated normally, via a call to exit or a return.「如果子进程正常结束，它就返回真；否则返回假。」</td></tr><tr><td>WEXITSTATUS(status)</td><td>Returns the exit status of a normally terminated child. This status is only defined if WIFEXITED() returned true.「如果WIFEXITED(status)为真，则可以用该宏取得子进程exit()返回的结束代码。」</td></tr><tr><td>WIFSIGNALED(status)</td><td>Returns true if the child process terminated because of a signal that was not caught.「如果子进程因为一个未捕获的信号而终止，它就返回真；否则返回假。」</td></tr><tr><td>WTERMSIG(status)</td><td>Returns the number of the signal that caused the child process to terminate. This status is only defined if WIFSIGNALED() returned true.「如果WIFSIGNALED(status)为真，则可以用该宏获得导致子进程终止的信号代码。」</td></tr><tr><td>WIFSTOPPED(status)</td><td>Returns true if the child that caused the return is currently stopped.「如果当前子进程被暂停了，则返回真；否则返回假。」</td></tr><tr><td>WSTOPSIG(status)</td><td>Returns the number of the signal that caused the child to stop. This status is only defined if WIFSTOPPED() returned true.「如果WIFSTOPPED(status)为真，则可以使用该宏获得导致子进程暂停的信号代码。」</td></tr><tr><td>WIFCONTINUED(status)</td><td>Returns true if the child process was restarted by receipt of a SIGCONT signal.「如果子进程通过接收到SIGCONT信号而重新启动，则返回true。」</td></tr></tbody></table><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h4><img src="https://pic.hanjiaming.com.cn/2021/04/12/6e4c29d42fdc5.png" alt="image.png" title="image.png"><ul><li>HC -&gt; HP -&gt; CT -&gt; bye</li><li>HP -&gt; HC -&gt; CT -&gt; bye</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/12/47a3c48d0ddf3.png" alt="image.png" title="image.png"><h2 id="signals" tabindex="-1"><a class="header-anchor" href="#signals" aria-hidden="true">#</a> Signals</h2><ul><li>An OS mechanism to allow one process interrupt another process. 「一种允许一个进程中断另一进程的OS机制。」</li><li>A signal is a small message that notifies a process that an event of some type has occurred in the system「信号是一条小消息，用于通知进程系统中发生了某种类型的事件」</li><li>A signal receiver can respond according to the signal occured「信号接收器可以根据发生的信号做出响应」</li></ul><h3 id="kill" tabindex="-1"><a class="header-anchor" href="#kill" aria-hidden="true">#</a> kill</h3><ul><li>With command, e.g., kill <ul><li>Let the child process enter an infinite loop</li><li>Use the command “kill” to terminate the child process</li></ul></li><li>With command, e.g., kill <ul><li>Let the child process enter an infinite loop「让子进程进入无限循环」</li><li>Use the command “kill” to terminate the child process「使用命令“ kill”终止子进程」</li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/12/0145b834c05d9.png" alt="image.png" title="image.png"><h3 id="receiving-a-signal" tabindex="-1"><a class="header-anchor" href="#receiving-a-signal" aria-hidden="true">#</a> Receiving a signal</h3><p>We let the process to listen to signal SIGINT「我们让进程监听信号SIGINT」</p><p>SIGINT = Ctrl-C</p><ul><li>The process will wait by calling pause()「该过程将通过调用pause（）<strong>等待</strong>」</li><li>When the user press Ctrl-C, a signal handler will be executed「当用户按下Ctrl-C时，将执行信号处理程序」</li></ul><h3 id="interrupts" tabindex="-1"><a class="header-anchor" href="#interrupts" aria-hidden="true">#</a> Interrupts</h3><ul><li>A CPU provides hardware signals, called interrupts, to represent that something happens「CPU提供称为中断的硬件信号，以表示发生了某些事情」 <ul><li>For example, pressing Ctrl+C will generate an interrupt「例如，按Ctrl + C将产生一个中断」</li></ul></li><li>Programs will be developed to handle different interrupts, called interrupt handlers「将开发用于处理不同中断的程序，称为中断处理程序」</li><li>At the end of each instruction cycle, the CPU will check if any interrupt has come「在每个指令周期结束时，CPU将检查是否有任何中断发生」 <ul><li><strong>Fetch -&gt; decode -&gt; execute -&gt; check interrupt</strong></li></ul></li><li>If an interrupt occurs, the corresponding interrupt handler will be called to perform specified functionality「如果发生中断，则将调用相应的中断处理程序以执行指定的功能」</li></ul><h3 id="steps-to-process-a-signal" tabindex="-1"><a class="header-anchor" href="#steps-to-process-a-signal" aria-hidden="true">#</a> Steps to process a signal</h3><ul><li>In modern computer systems, interrupts will be received and managed by the operating system「在现代计算机系统中，中断将由操作系统接收和管理」</li><li>Using signal() to register interrupt handler</li><li>OS will transfer the control to application process to execute interrupt handler「操作系统将控制权转移到应用程序进程以执行中断处理程序」</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/12/60842a8078403.png" alt="image.png" title="image.png"><h2 id="issues-not-covered-so-far" tabindex="-1"><a class="header-anchor" href="#issues-not-covered-so-far" aria-hidden="true">#</a> Issues not covered so far</h2><p>「到目前为止未涵盖的问题」</p><ul><li>How each switching is triggered? 「如何触发每个切换？」(interrupts, will explain soon)</li><li>Who is managing the switching? 「谁在管理交换？」(an operating system)</li><li>When thread A pauses, there are B, C, D, …, which one should I switch to? (thread scheduling, to learn in OS courses)「当线程A暂停时，有B，C，D，...，我应该切换到哪一个？</li></ul><p>引用</p>`,145),h={href:"https://zhuanlan.zhihu.com/p/82123111",target:"_blank",rel:"noopener noreferrer"},p={href:"https://blog.csdn.net/jason314/article/details/5640969",target:"_blank",rel:"noopener noreferrer"},u={href:"https://blog.csdn.net/cuit2016123070/article/details/83280125",target:"_blank",rel:"noopener noreferrer"},g={href:"https://blog.csdn.net/Roland_Sun/article/details/32084825",target:"_blank",rel:"noopener noreferrer"},m=e("h2",{id:"java",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#java","aria-hidden":"true"},"#"),i(" Java")],-1),f=e("p",null,"对于Java，只考虑并行和多线程。通常的，Java使用多线程（Muti-Thread) 编程，而不是多进程（Muti-Process)",-1);function b(v,w){const t=n("ExternalLinkIcon");return s(),l("div",null,[c,e("ul",null,[e("li",null,[e("a",h,[i("https://zhuanlan.zhihu.com/p/82123111"),a(t)])]),e("li",null,[e("a",p,[i("https://blog.csdn.net/jason314/article/details/5640969"),a(t)])]),e("li",null,[e("a",u,[i("https://blog.csdn.net/cuit2016123070/article/details/83280125"),a(t)])]),e("li",null,[e("a",g,[i("https://blog.csdn.net/Roland_Sun/article/details/32084825"),a(t)])])]),m,f])}const I=r(o,[["render",b],["__file","core-process-and-thread.html.vue"]]);export{I as default};
