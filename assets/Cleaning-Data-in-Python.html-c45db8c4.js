import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c,a as n,b as a,d as o,e as s}from"./app-0983f945.js";const l={},u=s(`<h1 id="cleaning-data-in-python" tabindex="-1"><a class="header-anchor" href="#cleaning-data-in-python" aria-hidden="true">#</a> Cleaning Data in Python</h1><h2 id="pd-dateframe-类型转换" tabindex="-1"><a class="header-anchor" href="#pd-dateframe-类型转换" aria-hidden="true">#</a> PD dateframe 类型转换</h2><p>Why do data types matter?</p><ul><li>Affects which operations you can perform</li><li>Avoid storing data as strings (when possible) <ul><li>int , float : enables mathematical operations</li><li>datetime : enables date-based a ributes and methods</li><li>category : uses less memory and runs faster</li><li>bool : enables logical and mathematical operations</li></ul></li></ul><h3 id="series-查看类型" tabindex="-1"><a class="header-anchor" href="#series-查看类型" aria-hidden="true">#</a> Series 查看类型</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
ride_sharing<span class="token punctuation">[</span><span class="token string">&quot;station_A_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dtype
Out<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
dtype<span class="token punctuation">(</span><span class="token string">&#39;int64&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>object : Python strings (or other Python objects)</li><li>bool : True and False values</li><li>Other types: int , float , datetime , category</li></ul><h3 id="dataframe-查看类型" tabindex="-1"><a class="header-anchor" href="#dataframe-查看类型" aria-hidden="true">#</a> dataFrame 查看类型</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>ri<span class="token punctuation">.</span>dtypes<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;script.py&gt; output:
    stop_date                     object
    stop_time                     object
    driver_gender                 object
    driver_race                   object
    violation_raw                 object
    violation                     object
    search_conducted                bool
    search_type                   object
    stop_outcome                  object
    is_arrested                     bool
    stop_duration                 object
    drugs_related_stop              bool
    district                      object
    stop_datetime         datetime64[ns]
    dtype: object
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="to-object" tabindex="-1"><a class="header-anchor" href="#to-object" aria-hidden="true">#</a> to object</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>new_column <span class="token operator">=</span> ride_sharing<span class="token punctuation">[</span><span class="token string">&quot;station_A_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&quot;object&quot;</span><span class="token punctuation">)</span>
airlines<span class="token punctuation">[</span><span class="token string">&#39;dest_region&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span> <span class="token operator">//</span> check string
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="to-int" tabindex="-1"><a class="header-anchor" href="#to-int" aria-hidden="true">#</a> to int</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>new_column <span class="token operator">=</span> ride_sharing<span class="token punctuation">[</span><span class="token string">&quot;station_A_id&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&quot;int&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="to-dt-datatime" tabindex="-1"><a class="header-anchor" href="#to-dt-datatime" aria-hidden="true">#</a> to dt.datatime</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>new_column <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>ride_sharing<span class="token punctuation">[</span><span class="token string">&#39;ride_date&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="to-category" tabindex="-1"><a class="header-anchor" href="#to-category" aria-hidden="true">#</a> to category</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>new_column <span class="token operator">=</span> ride_sharing<span class="token punctuation">[</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">&quot;category&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">category 元数据</p><p>dataframe 由 series 组成。因此，每一列series有独自的元数据。就category而言，</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>attrition_filtered<span class="token punctuation">[</span><span class="token string">&#39;JobRole&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Research_Scientist           292
Manager                      102
......
Sales_Executive                0
Sales_Representative           0
Name: JobRole, dtype: int64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Remove categories with no rows</span>
attrition_filtered<span class="token punctuation">[</span><span class="token string">&#39;JobRole&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> attrition_filtered<span class="token punctuation">[</span><span class="token string">&#39;JobRole&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cat<span class="token punctuation">.</span>remove_unused_categories<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Research_Scientist    292
Manager               102
Research_Director      80
Human_Resources        52
Name: JobRole, dtype: int64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="assert" tabindex="-1"><a class="header-anchor" href="#assert" aria-hidden="true">#</a> Assert</h2><p>断言，断言错误则直接报错</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">assert</span> ride_sharing<span class="token punctuation">[</span><span class="token string">&#39;user_type_cat&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dtype <span class="token operator">==</span> <span class="token string">&#39;category&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="treat-duplicate" tabindex="-1"><a class="header-anchor" href="#treat-duplicate" aria-hidden="true">#</a> treat duplicate</h2><h3 id="duplicated-method" tabindex="-1"><a class="header-anchor" href="#duplicated-method" aria-hidden="true">#</a> .duplicated() method</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/05/07/67cbdc8c783e9.png" alt="1651931370308.png" tabindex="0" loading="lazy"><figcaption>1651931370308.png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Get duplicates across all columns</span>
duplicates <span class="token operator">=</span> height_weight<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>duplicates<span class="token punctuation">)</span>

<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span>
<span class="token triple-quoted-string string">&quot;&quot;&quot;
1 	False
... ....
22 	True
23 	False
......
&quot;&quot;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>subset : List of column names to check for duplication.</li><li>keep : Whether to keep first ( &#39;first&#39; ), last ( &#39;last&#39; ) or all ( False ) duplicate values</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Column names to check for duplication</span>
column_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;first_name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;address&#39;</span><span class="token punctuation">]</span>
duplicates <span class="token operator">=</span> height_weight<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span>subset <span class="token operator">=</span> column_names<span class="token punctuation">,</span> keep <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>subset 用于圈定范围</p><h3 id="output-duplicate-values" tabindex="-1"><a class="header-anchor" href="#output-duplicate-values" aria-hidden="true">#</a> Output duplicate values</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>duplicates <span class="token operator">=</span> height_weight<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span>subset <span class="token operator">=</span> column_names<span class="token punctuation">,</span> keep <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
height_weight<span class="token punctuation">[</span>duplicates<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/03/07/26e915bc40641.png" alt="CleanShot 2022-03-07 at 17.45.41@2x.png" tabindex="0" loading="lazy"><figcaption>CleanShot 2022-03-07 at 17.45.41@2x.png</figcaption></figure><p>注意 duplicates 没有引号，因为 duplicates 被手动定义为 height_weight 的一部分。</p><h3 id="drop-duplicates" tabindex="-1"><a class="header-anchor" href="#drop-duplicates" aria-hidden="true">#</a> Drop duplicates</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/05/07/ea53f7ee84fc6.png" alt="1651931255232.png" tabindex="0" loading="lazy"><figcaption>1651931255232.png</figcaption></figure><h4 id="with-drop-duplicates" tabindex="-1"><a class="header-anchor" href="#with-drop-duplicates" aria-hidden="true">#</a> with .drop_duplicates()</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>height_weight<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="with-groupby" tabindex="-1"><a class="header-anchor" href="#with-groupby" aria-hidden="true">#</a> with groupby</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Group by column names and produce statistical summaries</span>
column_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;first_name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;last_name&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;address&#39;</span><span class="token punctuation">]</span>
summaries <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;height&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;max&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;weight&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;mean&#39;</span><span class="token punctuation">}</span>

height_weight <span class="token operator">=</span> height_weight<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>by <span class="token operator">=</span> column_names<span class="token punctuation">)</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span>summaries<span class="token punctuation">)</span><span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Make sure aggregation is done</span>
duplicates <span class="token operator">=</span> height_weight<span class="token punctuation">.</span>duplicated<span class="token punctuation">(</span>subset <span class="token operator">=</span> column_names<span class="token punctuation">,</span> keep <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
height_weight<span class="token punctuation">[</span>duplicates<span class="token punctuation">]</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span>by <span class="token operator">=</span> <span class="token string">&#39;first_name&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="unique" tabindex="-1"><a class="header-anchor" href="#unique" aria-hidden="true">#</a> Unique</h2><h3 id="print-unique-values" tabindex="-1"><a class="header-anchor" href="#print-unique-values" aria-hidden="true">#</a> Print unique values</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Print unique values of survey columns in airlines</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Cleanliness: &#39;</span><span class="token punctuation">,</span> airlines<span class="token punctuation">[</span><span class="token string">&#39;cleanliness&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Safety: &#39;</span><span class="token punctuation">,</span> airlines<span class="token punctuation">[</span><span class="token string">&#39;safety&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Satisfaction: &#39;</span><span class="token punctuation">,</span> airlines<span class="token punctuation">[</span><span class="token string">&#39;satisfaction&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>unique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="difference" tabindex="-1"><a class="header-anchor" href="#difference" aria-hidden="true">#</a> difference</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/05/08/0d571317cce3a.png" alt="1651942670505.png" tabindex="0" loading="lazy"><figcaption>1651942670505.png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Find the cleanliness category in airlines not in categories</span>
cat_clean <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>airlines<span class="token punctuation">[</span><span class="token string">&quot;cleanliness&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span>categories<span class="token punctuation">[</span><span class="token string">&quot;cleanliness&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># Find rows with that category</span>
cat_clean_rows <span class="token operator">=</span> airlines<span class="token punctuation">[</span><span class="token string">&#39;cleanliness&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isin<span class="token punctuation">(</span>cat_clean<span class="token punctuation">)</span>

<span class="token comment"># Print rows with inconsistent category</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>airlines<span class="token punctuation">[</span>cat_clean_rows<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># Print rows with consistent categories only</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>airlines<span class="token punctuation">[</span><span class="token operator">~</span>cat_clean_rows<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="categorical-variables" tabindex="-1"><a class="header-anchor" href="#categorical-variables" aria-hidden="true">#</a> Categorical variables</h2><h3 id="value-consistency" tabindex="-1"><a class="header-anchor" href="#value-consistency" aria-hidden="true">#</a> Value consistency</h3><p>What type of errors could we have?</p><figure><img src="https://pic.hanjiaming.com.cn/2022/05/08/e78f95efea9fa.png" alt="1652017854942.png" tabindex="0" loading="lazy"><figcaption>1652017854942.png</figcaption></figure><h3 id="value-counts" tabindex="-1"><a class="header-anchor" href="#value-counts" aria-hidden="true">#</a> value_counts()</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>marriage_status.value_counts()

&gt;&gt;&gt;
unmarried 352
married 268
MARRIED 204
UNMARRIED 176
dtype: int64
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="strip-all-spaces" tabindex="-1"><a class="header-anchor" href="#strip-all-spaces" aria-hidden="true">#</a> Strip all spaces</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>demographics <span class="token operator">=</span> demographics<span class="token punctuation">[</span><span class="token string">&#39;marriage_status&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="collapsing-data-into-categories" tabindex="-1"><a class="header-anchor" href="#collapsing-data-into-categories" aria-hidden="true">#</a> Collapsing data into categories</h3><p>将数据分为类别</p><h4 id="pd-qcut" tabindex="-1"><a class="header-anchor" href="#pd-qcut" aria-hidden="true">#</a> pd.qcut()</h4><p>Create categories out of data: <code>income_group</code> column from income <code>column</code>.</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Using qcut()</span>
<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd
group_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;0-200K&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;200K-500K&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;500K+&#39;</span><span class="token punctuation">]</span>
demographics<span class="token punctuation">[</span><span class="token string">&#39;income_group&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>qcut<span class="token punctuation">(</span>demographics<span class="token punctuation">[</span><span class="token string">&#39;household_income&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>  labels <span class="token operator">=</span> group_names<span class="token punctuation">)</span>

<span class="token comment"># Print income_group column</span>
demographics<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;income_group&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;household_income&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>	income_group 		household_income
0 200K-500K 			189243
1 500K+ 					778533
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="pd-cut" tabindex="-1"><a class="header-anchor" href="#pd-cut" aria-hidden="true">#</a> pd.cut()</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Using cut() - create category ranges and names</span>
ranges <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">200000</span><span class="token punctuation">,</span><span class="token number">500000</span><span class="token punctuation">,</span>np<span class="token punctuation">.</span>inf<span class="token punctuation">]</span>
group_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;0-200K&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;200K-500K&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;500K+&#39;</span><span class="token punctuation">]</span>

<span class="token comment"># Create income group column</span>
demographics<span class="token punctuation">[</span><span class="token string">&#39;income_group&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>cut<span class="token punctuation">(</span>demographics<span class="token punctuation">[</span><span class="token string">&#39;household_income&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bins<span class="token operator">=</span>ranges<span class="token punctuation">,</span>
labels<span class="token operator">=</span>group_names<span class="token punctuation">)</span>
demographics<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;income_group&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;household_income&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/05/08/db4ec677baa57.png" alt="CleanShot 2022-05-08 at 22.07.23@2x.png" tabindex="0" loading="lazy"><figcaption>CleanShot 2022-05-08 at 22.07.23@2x.png</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>  income_group    Income
0 0-200K 					189243
1 500K+ 					778533
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="replace" tabindex="-1"><a class="header-anchor" href="#replace" aria-hidden="true">#</a> Replace</h2><h3 id="create-mappings-and-replace" tabindex="-1"><a class="header-anchor" href="#create-mappings-and-replace" aria-hidden="true">#</a> Create mappings and replace</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Create mappings and replace</span>
mappings <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;Monday&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;weekday&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Tuesday&#39;</span><span class="token punctuation">:</span><span class="token string">&#39;weekday&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Wednesday&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;weekday&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;Thursday&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;weekday&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Friday&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;weekday&#39;</span><span class="token punctuation">,</span> 
            <span class="token string">&#39;Saturday&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;weekend&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Sunday&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;weekend&#39;</span><span class="token punctuation">}</span>

airlines<span class="token punctuation">[</span><span class="token string">&#39;day_week&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> airlines<span class="token punctuation">[</span><span class="token string">&#39;day&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span>mappings<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="replace-str" tabindex="-1"><a class="header-anchor" href="#replace-str" aria-hidden="true">#</a> Replace str</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>phones<span class="token punctuation">[</span><span class="token string">&quot;Phone number&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> phones<span class="token punctuation">[</span><span class="token string">&quot;Phone number&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="replace-with-regular-expressions" tabindex="-1"><a class="header-anchor" href="#replace-with-regular-expressions" aria-hidden="true">#</a> Replace with Regular expressions</h3>`,69),r={href:"https://www.runoob.com/regexp/regexp-tutorial.html",target:"_blank",rel:"noopener noreferrer"},d=s(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>phones<span class="token punctuation">[</span><span class="token string">&#39;Phone number&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> phones<span class="token punctuation">[</span><span class="token string">&#39;Phone number&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">r&#39;\\D+&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="any" tabindex="-1"><a class="header-anchor" href="#any" aria-hidden="true">#</a> .any()</h2><p>存在性</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Assert that full_name has no honorifics</span>
<span class="token keyword">assert</span> airlines<span class="token punctuation">[</span><span class="token string">&#39;full_name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">&#39;Ms.|Mr.|Miss|Dr.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">any</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="assert-关键字" tabindex="-1"><a class="header-anchor" href="#assert-关键字" aria-hidden="true">#</a> assert 关键字</h2><p>断言，后面跟一个布尔判断，如果后面返回 False 则会导致 Exception</p><p><strong>Remember, assert returns nothing if the condition passes</strong></p><h2 id="dt-date" tabindex="-1"><a class="header-anchor" href="#dt-date" aria-hidden="true">#</a> dt.date</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>user_signups<span class="token punctuation">[</span>user_signups<span class="token punctuation">[</span><span class="token string">&#39;subscription_date&#39;</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> dt<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="datetime-formatting" tabindex="-1"><a class="header-anchor" href="#datetime-formatting" aria-hidden="true">#</a> Datetime formatting</h3><img src="https://pic.hanjiaming.com.cn/2022/05/08/460e94c5759f7.png" alt="1652022834526.png" style="zoom:33%;"><p><code>pandas.to_datetime()</code></p><ul><li>可以自动识别大多数格式</li><li>有时会出错或无法识别的格式</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Will work!</span>
birthdays<span class="token punctuation">[</span><span class="token string">&#39;Birthday&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>birthdays<span class="token punctuation">[</span><span class="token string">&#39;Birthday&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                        <span class="token comment"># Attempt to infer format of each date</span>
                        infer_datetime_format<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                        <span class="token comment"># Return NA for rows where conversion failed</span>
                        errors <span class="token operator">=</span> <span class="token string">&#39;coerce&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="格式转换" tabindex="-1"><a class="header-anchor" href="#格式转换" aria-hidden="true">#</a> 格式转换</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token operator">//</span> eg1
birthdays<span class="token punctuation">[</span><span class="token string">&#39;Birthday&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> birthdays<span class="token punctuation">[</span><span class="token string">&#39;Birthday&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">&quot;%d-%m-%Y&quot;</span><span class="token punctuation">)</span>
<span class="token operator">//</span> eg2
ages_manual <span class="token operator">=</span> today<span class="token punctuation">.</span>year <span class="token operator">-</span> banking<span class="token punctuation">[</span><span class="token string">&quot;birth_date&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>year
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cross-field-validation" tabindex="-1"><a class="header-anchor" href="#cross-field-validation" aria-hidden="true">#</a> Cross field validation</h2><p>The use of multiple fields in a dataset to sanity check data integrity</p><p>即交叉数据验证</p><h3 id="sum" tabindex="-1"><a class="header-anchor" href="#sum" aria-hidden="true">#</a> .sum()</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/05/09/61b0fa295fc51.png" alt="1652106049679.png" tabindex="0" loading="lazy"><figcaption>1652106049679.png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>sum_classes <span class="token operator">=</span> flights<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">&#39;economy_class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;business_class&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;first_class&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token operator">//</span> axis <span class="token operator">=</span> <span class="token number">1</span> 表示横向求和，axis <span class="token operator">=</span> <span class="token number">0</span> 表示纵向求和
passenger_equ <span class="token operator">=</span> sum_classes <span class="token operator">==</span> flights<span class="token punctuation">[</span><span class="token string">&#39;total_passengers&#39;</span><span class="token punctuation">]</span>
<span class="token comment"># Find and filter out rows with inconsistent passenger totals</span>
inconsistent_pass <span class="token operator">=</span> flights<span class="token punctuation">[</span><span class="token operator">~</span>passenger_equ<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="completeness" tabindex="-1"><a class="header-anchor" href="#completeness" aria-hidden="true">#</a> Completeness</h2><p>数据完整性</p><figure><img src="https://pic.hanjiaming.com.cn/2022/05/09/13ff6944b6a53.png" alt="1652106959574.png" tabindex="0" loading="lazy"><figcaption>1652106959574.png</figcaption></figure><p>确实的数据会以<code>NaN</code>显示。</p><figure><img src="https://pic.hanjiaming.com.cn/2022/05/09/22319a9ef2a9e.png" alt="1652108977086.png" tabindex="0" loading="lazy"><figcaption>1652108977086.png</figcaption></figure><h3 id="isna" tabindex="-1"><a class="header-anchor" href="#isna" aria-hidden="true">#</a> .isna()</h3><img src="https://pic.hanjiaming.com.cn/2022/05/09/35646100144b3.png" alt="1652107112307.png" style="zoom:50%;"><h3 id="isna-sum" tabindex="-1"><a class="header-anchor" href="#isna-sum" aria-hidden="true">#</a> .isna().sum()</h3><p>统计<code>NaN</code>的个数。</p><img src="https://pic.hanjiaming.com.cn/2022/05/09/00a0a5de5f035.png" alt="1652107166764.png" style="zoom:50%;"><h3 id="缺失可视化" tabindex="-1"><a class="header-anchor" href="#缺失可视化" aria-hidden="true">#</a> 缺失可视化</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>msno<span class="token punctuation">.</span>matrix<span class="token punctuation">(</span>sorted_airquality<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://pic.hanjiaming.com.cn/2022/05/09/d4ce3501e8f2f.png" alt="1652108906307.png" style="zoom:50%;"><h3 id="dropping-missing-values" tabindex="-1"><a class="header-anchor" href="#dropping-missing-values" aria-hidden="true">#</a> Dropping missing values</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Drop missing values</span>
airquality_dropped <span class="token operator">=</span> airquality<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>subset <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;CO2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="treat-nan" tabindex="-1"><a class="header-anchor" href="#treat-nan" aria-hidden="true">#</a> Treat Nan</h3><h4 id="fillna" tabindex="-1"><a class="header-anchor" href="#fillna" aria-hidden="true">#</a> fillna()</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>co2_mean <span class="token operator">=</span> airquality<span class="token punctuation">[</span><span class="token string">&#39;CO2&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>
airquality_imputed <span class="token operator">=</span> airquality<span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&#39;CO2&#39;</span><span class="token punctuation">:</span> co2_mean<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用平均值" tabindex="-1"><a class="header-anchor" href="#使用平均值" aria-hidden="true">#</a> 使用平均值</h4><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="simple-string-comparison" tabindex="-1"><a class="header-anchor" href="#simple-string-comparison" aria-hidden="true">#</a> Simple string comparison</h2><h3 id="minimum-edit-distance" tabindex="-1"><a class="header-anchor" href="#minimum-edit-distance" aria-hidden="true">#</a> Minimum edit distance</h3><p>从一个字符串过渡到另一个字符串所需的最少步骤</p><img src="https://pic.hanjiaming.com.cn/2022/06/01/bbc39d12182c0.png" alt="1654061206503.png" style="zoom:25%;"><img src="https://pic.hanjiaming.com.cn/2022/06/01/171d2aaffb167.png" alt="1654061231341.png" style="zoom:20%;"><img src="https://pic.hanjiaming.com.cn/2022/06/01/9c39e502961d3.png" alt="1654061324780.png" style="zoom:50%;"><p>Possible packages: nltk , fuzzywuzzy , textdistance ..</p><h3 id="相似性" tabindex="-1"><a class="header-anchor" href="#相似性" aria-hidden="true">#</a> 相似性</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Lets us compare between two strings</span>
<span class="token keyword">from</span> fuzzywuzzy <span class="token keyword">import</span> fuzz
<span class="token comment"># Compare reeding vs reading</span>
fuzz<span class="token punctuation">.</span>WRatio<span class="token punctuation">(</span><span class="token string">&#39;Reeding&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Reading&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Partial string comparison</span>
fuzz<span class="token punctuation">.</span>WRatio<span class="token punctuation">(</span><span class="token string">&#39;Houston Rockets&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Rockets&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Partial string comparison with different order</span>
fuzz<span class="token punctuation">.</span>WRatio<span class="token punctuation">(</span><span class="token string">&#39;Houston Rockets vs Los Angeles Lakers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Lakers vs Rockets&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>86
90
86
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="列表" tabindex="-1"><a class="header-anchor" href="#列表" aria-hidden="true">#</a> 列表</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Import process</span>
<span class="token keyword">from</span> fuzzywuzzy <span class="token keyword">import</span> process

<span class="token comment"># Define string and array of possible matches</span>
string <span class="token operator">=</span> <span class="token string">&quot;Houston Rockets vs Los Angeles Lakers&quot;</span>

choices <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;Rockets vs Lakers&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Lakers vs Rockets&#39;</span><span class="token punctuation">,</span>
<span class="token string">&#39;Houson vs Los Angeles&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Heat vs Bulls&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># limit 按排名截取前几个</span>
process<span class="token punctuation">.</span>extract<span class="token punctuation">(</span>string<span class="token punctuation">,</span> choices<span class="token punctuation">,</span> limit <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[(&#39;Rockets vs Lakers&#39;, 86, 0), (&#39;Lakers vs Rockets&#39;, 86, 1)]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>与字符串匹配的折叠类别</p><figure><img src="https://pic.hanjiaming.com.cn/2022/06/01/d47043e78ff20.png" alt="1654062168479.png" tabindex="0" loading="lazy"><figcaption>1654062168479.png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># For each correct category</span>
<span class="token keyword">for</span> state <span class="token keyword">in</span> categories<span class="token punctuation">[</span><span class="token string">&#39;state&#39;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
  
  <span class="token comment"># Find potential matches in states with typoes</span>
  <span class="token comment"># 第一个参数是标准 值 ，第二个参数是需要校准的 序列</span>
  <span class="token comment"># matches 是待校准值的unique 以及对应分数</span>
  matches <span class="token operator">=</span> process<span class="token punctuation">.</span>extract<span class="token punctuation">(</span>state<span class="token punctuation">,</span> survey<span class="token punctuation">[</span><span class="token string">&#39;state&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> limit <span class="token operator">=</span> survey<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
  
  <span class="token comment"># For each potential match match</span>
  <span class="token keyword">for</span> potential_match <span class="token keyword">in</span> matches<span class="token punctuation">:</span>
   
  	<span class="token comment"># If high similarity score</span>
    <span class="token comment"># 如果待校准的值的分数大于80分，则替换为 state</span>
    <span class="token keyword">if</span> potential_match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token number">80</span><span class="token punctuation">:</span>
      
      <span class="token comment"># Replace typo with correct category</span>
      survey<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>survey<span class="token punctuation">[</span><span class="token string">&#39;state&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> potential_match<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;state&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> state
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该操作是整列操作，<code>survey[&#39;state&#39;]</code> 是一整列。</p><h2 id="append-相似追加" tabindex="-1"><a class="header-anchor" href="#append-相似追加" aria-hidden="true">#</a> Append 相似追加</h2><p>之前的append追加数据时，无法处理相似数据的重复问题。</p><img src="https://pic.hanjiaming.com.cn/2022/06/02/1d501eb5acb4d.png" alt="1654099850745.png" style="zoom:25%;"><p>如何防止相似的数据被追加？可以按照这样一个流程</p><img src="https://pic.hanjiaming.com.cn/2022/06/02/8b7ec66cd93b3.png" alt="1654099905428.png" style="zoom:67%;"><p>The recordlinkage package</p><figure><img src="https://pic.hanjiaming.com.cn/2022/06/02/06398a9737902.png" alt="1654099946342.png" tabindex="0" loading="lazy"><figcaption>1654099946342.png</figcaption></figure><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Import recordlinkage</span>
<span class="token keyword">import</span> recordlinkage

<span class="token comment"># Create indexing object</span>
indexer <span class="token operator">=</span> recordlinkage<span class="token punctuation">.</span>Index<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Generate pairs blocked on state</span>
indexer<span class="token punctuation">.</span>block<span class="token punctuation">(</span><span class="token string">&#39;state&#39;</span><span class="token punctuation">)</span>
pairs <span class="token operator">=</span> indexer<span class="token punctuation">.</span>index<span class="token punctuation">(</span>census_A<span class="token punctuation">,</span> census_B<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>pairs<span class="token punctuation">)</span>
<span class="token comment"># 这一步产生了 Index对</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MultiIndex(levels=[[&#39;rec-1007-org&#39;, &#39;rec-1016-org&#39;, &#39;rec-1054-org&#39;, &#39;rec-1066-org&#39;,
&#39;rec-1070-org&#39;, &#39;rec-1075-org&#39;, &#39;rec-1080-org&#39;, &#39;rec-110-org&#39;, &#39;rec-1146-org&#39;,
&#39;rec-1157-org&#39;, &#39;rec-1165-org&#39;, &#39;rec-1185-org&#39;, &#39;rec-1234-org&#39;, &#39;rec-1271-org&#39;,
&#39;rec-1280-org&#39;,...........
66, 14, 13, 18, 34, 39, 0, 16, 80, 50, 20, 69, 28, 25, 49, 77, 51, 85, 52, 63, 74, 61,
83, 91, 22, 26, 55, 84, 11, 81, 97, 56, 27, 48, 2, 64, 5, 17, 29, 60, 72, 47, 92, 12,
95, 15, 19, 57, 37, 70, 94]], names=[&#39;rec_id_1&#39;, &#39;rec_id_2&#39;])
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Create a Compare object</span>
compare_cl <span class="token operator">=</span> recordlinkage<span class="token punctuation">.</span>Compare<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># Find exact matches for pairs of date_of_birth and state</span>
compare_cl<span class="token punctuation">.</span>exact<span class="token punctuation">(</span><span class="token string">&#39;date_of_birth&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;date_of_birth&#39;</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;date_of_birth&#39;</span><span class="token punctuation">)</span>
compare_cl<span class="token punctuation">.</span>exact<span class="token punctuation">(</span><span class="token string">&#39;state&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;state&#39;</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;state&#39;</span><span class="token punctuation">)</span>
<span class="token comment"># Find similar matches for pairs of surname and address_1 using string similarity</span>
compare_cl<span class="token punctuation">.</span>string<span class="token punctuation">(</span><span class="token string">&#39;surname&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;surname&#39;</span><span class="token punctuation">,</span> threshold<span class="token operator">=</span><span class="token number">0.85</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;surname&#39;</span><span class="token punctuation">)</span>
compare_cl<span class="token punctuation">.</span>string<span class="token punctuation">(</span><span class="token string">&#39;address_1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;address_1&#39;</span><span class="token punctuation">,</span> threshold<span class="token operator">=</span><span class="token number">0.85</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">&#39;address_1&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Find matches</span>
potential_matches <span class="token operator">=</span> compare_cl<span class="token punctuation">.</span>compute<span class="token punctuation">(</span>pairs<span class="token punctuation">,</span> census_A<span class="token punctuation">,</span> census_B<span class="token punctuation">)</span>

<span class="token comment"># print</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>potential_matches<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面结果中，1表示符合，0表示不符合</p><img src="https://pic.hanjiaming.com.cn/2022/06/02/65e2e49b350e0.png" alt="1654100364764.png" style="zoom:50%;"><p>下一步 筛选出来我认为是相似的数据条目</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 我们设定 当某一行的值的和 &gt;= 3时，认为是相似的</span>
potential_matches<span class="token punctuation">[</span>potential_matches<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/06/02/04062ba687964.png" alt="1654100570259.png" tabindex="0" loading="lazy"><figcaption>1654100570259.png</figcaption></figure><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt;&gt;&gt; matches.index

MultiIndex(levels=[[&#39;rec-1007-org&#39;, &#39;rec-1016-org&#39;, &#39;rec-1054-org&#39;, &#39;rec-1066-org&#39;,
&#39;rec-1070-org&#39;, &#39;rec-1075-org&#39;, &#39;rec-1080-org&#39;, &#39;rec-110-org&#39;, ...
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来只需要</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Get indices from census_B only</span>
duplicate_rows <span class="token operator">=</span> matches<span class="token punctuation">.</span>index<span class="token punctuation">.</span>get_level_values<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>census_B_index<span class="token punctuation">)</span>

<span class="token comment"># drop duplicates</span>
census_B_new <span class="token operator">=</span> census_B<span class="token punctuation">[</span><span class="token operator">~</span>census_B<span class="token punctuation">.</span>index<span class="token punctuation">.</span>isin<span class="token punctuation">(</span>duplicate_rows<span class="token punctuation">)</span><span class="token punctuation">]</span>

<span class="token comment"># Link the DataFrames!</span>
full_census <span class="token operator">=</span> census_A<span class="token punctuation">.</span>append<span class="token punctuation">(</span>census_B_new<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="np-non" tabindex="-1"><a class="header-anchor" href="#np-non" aria-hidden="true">#</a> np.non</h2><p>可以使用NaN值替代异常值。NaN元素位于 Numpy, 应当先导入 Numpy as np</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># 用NaN代替 98, 99</span>
pounds <span class="token operator">=</span> pounds<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">]</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>nan<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="str操作" tabindex="-1"><a class="header-anchor" href="#str操作" aria-hidden="true">#</a> str操作</h2><h3 id="series-str-cat" tabindex="-1"><a class="header-anchor" href="#series-str-cat" aria-hidden="true">#</a> series.str.cat()</h3><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Concatenate &#39;stop_date&#39; and &#39;stop_time&#39; (separated by a space)</span>
combined <span class="token operator">=</span> ri<span class="token punctuation">.</span>stop_date<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>cat<span class="token punctuation">(</span>ri<span class="token punctuation">.</span>stop_time<span class="token punctuation">,</span> sep <span class="token operator">=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <code>date</code> 列 和 <code>time</code> 列的字符串拼接。</p><div class="hint-container info"><p class="hint-container-title">区分 .cat</p><ul><li>series.str.cat() 是 处理 str 元素的，用于拼接的方法</li><li>series.cat 表示看做 category处理，类似于 series.str</li></ul></div><h3 id="strip" tabindex="-1"><a class="header-anchor" href="#strip" aria-hidden="true">#</a> Strip</h3><p>去除指定字符后的字符，适用于对DataFrame 整列进行操作</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/06/02/f4d38165d6a3e.png" alt="1654100907302.png" tabindex="0" loading="lazy"><figcaption>1654100907302.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/06/02/89e0e02c8c6e3.png" alt="1654100920430.png" tabindex="0" loading="lazy"><figcaption>1654100920430.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/06/02/ebfc4a380172d.png" alt="1654100932168.png" tabindex="0" loading="lazy"><figcaption>1654100932168.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/06/02/07c69bee8b096.png" alt="1654100945474.png" tabindex="0" loading="lazy"><figcaption>1654100945474.png</figcaption></figure>`,92);function m(k,v){const e=p("ExternalLinkIcon");return i(),c("div",null,[u,n("p",null,[a("Replace 支持使用正则表达式，正则表达式语法请参考 "),n("a",r,[a("https://www.runoob.com/regexp/regexp-tutorial.html"),o(e)])]),d])}const b=t(l,[["render",m],["__file","Cleaning-Data-in-Python.html.vue"]]);export{b as default};
