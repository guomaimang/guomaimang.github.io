import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as s,c as h,a as e,b as l,d as r,e as t}from"./app-0983f945.js";const i={},c=t('<h1 id="llvm编译器系列简介" tabindex="-1"><a class="header-anchor" href="#llvm编译器系列简介" aria-hidden="true">#</a> LLVM编译器系列简介</h1><h2 id="llvm" tabindex="-1"><a class="header-anchor" href="#llvm" aria-hidden="true">#</a> LLVM</h2><p>LLVM项目是模块化和可重用的编译器及工具链技术的集合。尽管名称如此，LLVM与传统虚拟机关系不大。名称“ LLVM”本身不是缩写。它是项目的全名。</p><p>LLVM Core库提供了现代的，独立于源和目标的优化器，并为许多流行的CP Us（以及一些不常见的CP Us）提供了代码生成支持。这些库是围绕一种称为LLVM中间件的明确指定的代码表示构建的表示形式（“ LLVM IR”）。 LLVM核心库有充分的文档记录，特别容易发明自己的语言（或移植现有的编译器）以将LLVM用作优化器和代码生成器。</p><p>Clang是“ LLVM本机” C / C ++ / Objective-C编译器，旨在提供惊人的快速编译，极其有用的错误和警告消息，并为构建出色的源代码级工具提供平台。 Clang静态分析器 和 clang -tidy是可自动在代码中查找错误的工具，并且是可以使用Clang前端作为库来解析C / C ++代码的工具的很好的示例。</p><h2 id="clang" tabindex="-1"><a class="header-anchor" href="#clang" aria-hidden="true">#</a> Clang</h2><p>clang 是 LLVM的C语言家族前端</p>',7),d={href:"https://www.llvm.org/",target:"_blank",rel:"noopener noreferrer"},_=e("code",null,"clang",-1),p=e("code",null,"clang-cl.exe",-1),g={href:"https://clang.llvm.org/get_started.html",target:"_blank",rel:"noopener noreferrer"},u=e("h3",{id:"特点和目标",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#特点和目标","aria-hidden":"true"},"#"),l(" 特点和目标")],-1),L=e("p",null,"该项目的一些目标包括：",-1),C={href:"https://clang.llvm.org/features.html#enduser",target:"_blank",rel:"noopener noreferrer"},f=e("li",null,"快速编译和低内存使用",-1),m={href:"https://clang.llvm.org/diagnostics.html",target:"_blank",rel:"noopener noreferrer"},b=e("li",null,"GCC兼容性",-1),v={href:"https://clang.llvm.org/features.html#applications",target:"_blank",rel:"noopener noreferrer"},V=e("ul",null,[e("li",null,"基于模块化库的架构"),e("li",null,"支持各种客户端（重构，静态分析，代码生成等）"),e("li",null,"允许与IDE紧密集成"),e("li",null,"使用LLVM'Apache 2'许可证")],-1),M={href:"https://clang.llvm.org/features.html#design",target:"_blank",rel:"noopener noreferrer"},x=t('<ul><li>真实的，生产质量的编译器</li><li>一个简单易学的代码库</li><li>适用于C，Objective C，C ++和Objective C ++的单个统一解析器</li><li>符合C / C ++ / ObjC及其变体</li></ul><h3 id="为什么选clang" tabindex="-1"><a class="header-anchor" href="#为什么选clang" aria-hidden="true">#</a> 为什么选Clang</h3><p>新前端的开发是从对编译器的需求开始的，该编译器需要更好的诊断，与IDE的更好集成，与商业产品兼容的许可证以及易于开发和维护的灵活编译器。所有这些都是在可以满足这些需求的新前端上开展工作的动机。</p><h2 id="lldb" tabindex="-1"><a class="header-anchor" href="#lldb" aria-hidden="true">#</a> LLDB</h2><p>LLDB是下一代高性能调试器。它是作为一组可重用的组件构建的，这些组件高度利用了较大的LLVM Project中的现有库，例如Clang表达式解析器和LLVM反汇编程序。</p><p>LLDB是macOS上Xcode中的默认调试器，并支持在台式机，iOS设备和模拟器上调试C，Objective-C和C ++。</p><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h2>',7),k={href:"https://clang.llvm.org/",target:"_blank",rel:"noopener noreferrer"},O={href:"https://llvm.org/",target:"_blank",rel:"noopener noreferrer"};function j(B,D){const n=o("ExternalLinkIcon");return s(),h("div",null,[c,e("p",null,[l("Clang项目为"),e("a",d,[l("LLVM"),r(n)]),l(" 项目的C语言家族（C，C ++，Objective C / C ++，OpenCL，CUDA和RenderScript）中的语言提供了语言前端和工具基础结构。提供了与GCC兼容的编译器驱动程序（"),_,l("）和与MSVC兼容的编译器驱动程序（"),p,l("）。您可以立即"),e("a",g,[l("获取并构建"),r(n)]),l("源。")]),u,L,e("p",null,[e("strong",null,[e("a",C,[l("最终用户功能"),r(n)])]),l("：")]),e("ul",null,[f,e("li",null,[l("富有表现力的诊断（"),e("a",m,[l("示例"),r(n)]),l("）")]),b]),e("p",null,[e("strong",null,[e("a",v,[l("实用程序和应用程序"),r(n)])]),l("：")]),V,e("p",null,[e("strong",null,[e("a",M,[l("内部设计与实现"),r(n)])]),l("：")]),x,e("ul",null,[e("li",null,[e("a",k,[l("https://clang.llvm.org/"),r(n)])]),e("li",null,[e("a",O,[l("https://llvm.org/"),r(n)])])])])}const I=a(i,[["render",j],["__file","llvm-std.html.vue"]]);export{I as default};
