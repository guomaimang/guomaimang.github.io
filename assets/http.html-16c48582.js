import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as t,e}from"./app-a901a58e.js";const s={},i=e(`<h1 id="use-http" tabindex="-1"><a class="header-anchor" href="#use-http" aria-hidden="true">#</a> Use HTTP</h1><h2 id="http-base" tabindex="-1"><a class="header-anchor" href="#http-base" aria-hidden="true">#</a> HTTP Base</h2><p>Hypertext Transfer Protocol (HTTP)</p><ul><li>用于通过 Internet 传输超文本和其他文件格式的应用程序协议</li><li>当前广泛使用的版本：HTTP/1.1（1997年标准化）</li><li>HTTP/2 规范于 2015 年 5 月作为 RFC 7540 发布</li><li>客户端（例如 Web 浏览器）向 URL 发送 HTTP 请求</li><li>服务器准备并返回请求的资源</li></ul><p>An HTTP request has the following components</p><ul><li>URL – the unique identifier of the online resource</li><li>Method/Verb – the action of the request (e.g. GET something?)</li><li>HTTP Version – the version of the protocol you are using</li><li>Headers – the metadata of the reques</li><li>Body – Data to be sent to the server</li></ul><h3 id="uniform-resource-locator-url" tabindex="-1"><a class="header-anchor" href="#uniform-resource-locator-url" aria-hidden="true">#</a> Uniform Resource Locator (URL)</h3><ul><li>特定类型的URI（统一资源标识符）</li><li>它意味着访问资源的方式</li></ul><p>Syntax of a URL:</p><figure><img src="https://pic.hanjiaming.com.cn/2024/12/09/6c05a72b6be0e.png" alt="1733684960284.png" tabindex="0" loading="lazy"><figcaption>1733684960284.png</figcaption></figure><h3 id="http-request-methods" tabindex="-1"><a class="header-anchor" href="#http-request-methods" aria-hidden="true">#</a> HTTP Request Methods</h3><p>回想一下，HTTP 是一种文本协议（即使用 HTTP 发送的所有内容都假定为字符）</p><p>如果要发送文件（二进制数据），需要先对二进制数据进行编码后再发送</p><p>In an HTML form, set <code>enctype=&quot;multipart/form-data&quot;</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Send!<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置 <code>enctype=&quot;multipart/form-data&quot;</code>告诉服务器，数据被分成多个部分，每个文件一个，再加上一个用于表单体中的文本数据。</p><h3 id="http-headers" tabindex="-1"><a class="header-anchor" href="#http-headers" aria-hidden="true">#</a> HTTP Headers</h3><p>标头包含有关请求/响应的元数据，例如：</p><ul><li>客户身份</li><li>内容类型（例如：纯文本、HTML、CSS、图片）</li><li>Encoding of the content (e.g. ASCII, utf-8)</li><li>Expiry date/time of the content</li><li>Cookies</li><li>安全策略 CSR</li><li>Some of the <strong>response header</strong> “keys” <ul><li>Content-Length: length of the content of the resource</li><li>Content-Type: format of the resource<br> (e.g. text/html)</li><li>Last - Modified：资源最后一次更改的时间</li><li>服务器：为资源提供服务的 Web 服务器的名称</li></ul></li></ul><h3 id="http-status-code" tabindex="-1"><a class="header-anchor" href="#http-status-code" aria-hidden="true">#</a> HTTP Status Code</h3><p>HTTP 状态代码包含在 HTTP 响应中以指示 HTTP 请求的结果</p><p>HTTP状态码的不同类别：</p><ul><li>1XX: Informational</li><li>2XX: Successful</li><li>3XX: Redirection</li><li>4XX: Client-side error</li><li>5XX: Server-side error</li></ul><h3 id="http-is-a-stateless-protocol" tabindex="-1"><a class="header-anchor" href="#http-is-a-stateless-protocol" aria-hidden="true">#</a> HTTP is a Stateless Protocol</h3><ul><li>服务器不会在请求之间保留有关客户端的信息</li><li>每个请求都被视为独立的</li><li>服务器端不存储会话信息</li></ul><h2 id="data-communication" tabindex="-1"><a class="header-anchor" href="#data-communication" aria-hidden="true">#</a> Data Communication</h2><p>如何在Android中对Web服务器执行HTTP请求？</p><ul><li>首先需要在AndroidManifest.xml文件中请求权限</li><li>使用 <code>HttpURLConnection</code> HTTP 客户端执行HTTP 请求</li><li>注意：HTTP 请求还有很多替代方案，例如默认 HTTP 客户端（已弃用）、Ok HTTP、Ktor、Retrofit、Multiplatform（均为第三方）。</li></ul><h3 id="httpurlconnection" tabindex="-1"><a class="header-anchor" href="#httpurlconnection" aria-hidden="true">#</a> HttpURLConnection</h3><ul><li><strong>HttpURLConnection</strong> can be used to perform both GET and POST actions</li><li>Data is returned in the form of <strong>InputStream</strong></li><li>根据数据的数据类型（例如图像、文本、文件等），需要将数据解码为适当的格式</li></ul><p>For HTTP server, you need to trust the site,</p><p>Add a network security configuration file for POST method on http:</p><ul><li>Create a network_security_config.xml under res\\xml</li><li>Add a path of the file to the AndroidManifest.xml</li></ul><h2 id="exchanging-data" tabindex="-1"><a class="header-anchor" href="#exchanging-data" aria-hidden="true">#</a> Exchanging Data</h2><p>在应用程序编程中，我们通常不会请求网页。相反，我们从服务器请求数据，例如：</p><ul><li>List of latest news (news app)</li><li>History of conversation (instant messaging app)</li></ul><p>为了交换结构化数据，我们需要有一个通用的数据格式，常见的数据交换格式包括：</p><ul><li>XML (Extensible Markup Language) <ul><li>Using different tags (e.g. <code>&lt;title&gt;&lt;/title&gt;</code>) to give meanings to the<br> data</li><li>可能导致数据长度显著增加</li></ul></li><li>JSON (JavaScript Object Notation) <ul><li>JavaScript对象以字符串编码，可以处理多种数据类型，如字符串、数字、布尔值和数组。</li><li>相比XML更紧凑，但仍易于人类阅读</li></ul></li></ul><h2 id="checking-availability-of-network" tabindex="-1"><a class="header-anchor" href="#checking-availability-of-network" aria-hidden="true">#</a> Checking Availability of Network</h2><ul><li>在使用网络进行数据通信之前，首先检查网络的可用性是一个好习惯。</li><li>在手机上，网络可能不稳定</li><li>用户可能已关闭数据传输，或切换到飞行模式</li><li>通过检查网络可用性，您可以在执行任何网络操作之前先提示用户</li></ul><p>为了能够检查网络状态，您需要在 <code>AndroidManifest.xml</code>文件中请求以下权限</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.permission.INTERNET<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.permission.ACCESS_NETWORK_STATE<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-servers" tabindex="-1"><a class="header-anchor" href="#http-servers" aria-hidden="true">#</a> HTTP Servers</h2><h3 id="what-are-http-servers" tabindex="-1"><a class="header-anchor" href="#what-are-http-servers" aria-hidden="true">#</a> What are HTTP Servers?</h3><ul><li>它持续监听特定端口（默认=80）的传入连接。</li><li>它处理HTTP请求并以HTTP响应的形式发送回复。</li><li>它解析请求并在必要时将请求发送给其他处理。例如，当需要动态内容时。</li></ul><p>A simple HTTP Server’s Pseudo-code</p><figure><img src="https://pic.hanjiaming.com.cn/2024/12/09/7bb495e4b7405.png" alt="1733687113563.png" tabindex="0" loading="lazy"><figcaption>1733687113563.png</figcaption></figure><p>之前的简单服务器是一个单线程服务器的例子。</p><ul><li>对于 Web 应用程序/服务，它通常不仅仅是从磁盘提供静态文件。</li><li>执行业务逻辑、更新数据库、写入日志是常见的操作。</li><li>单线程的HTTP服务器无法同时处理许多客户端。</li></ul><p>Other approaches</p><ul><li>Create a new <strong>process</strong> to handle a new request</li><li>Create a new <strong>thread</strong> to handle a new request</li><li>预先创建一个工作者池（进程或线程），以处理新的请求</li><li><strong>Event-driven</strong></li></ul><h3 id="nginx-web-server" tabindex="-1"><a class="header-anchor" href="#nginx-web-server" aria-hidden="true">#</a> Nginx Web Server</h3><ul><li>Pronounced “engine X”</li><li>一个“强聚焦于高并发、性能和低内存使用”的Web服务器 <ul><li>使用事件驱动（异步）方法处理HTTP请求</li><li>避免等待阻塞的系统调用（例如，从套接字读取，从内存或磁盘中的文件读取）</li></ul></li><li>增加功能，如带缓存的反向代理、负载均衡，以及支持其他新协议，如SPDY或WebSockets</li></ul><h3 id="serving-dynamic-content" tabindex="-1"><a class="header-anchor" href="#serving-dynamic-content" aria-hidden="true">#</a> Serving Dynamic Content</h3>`,54),l=[i];function o(p,r){return n(),t("div",null,l)}const d=a(s,[["render",o],["__file","http.html.vue"]]);export{d as default};
