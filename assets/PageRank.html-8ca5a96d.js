import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as n,e as s,a}from"./app-3b17342e.js";const t={},e=s('<h1 id="pagerank" tabindex="-1"><a class="header-anchor" href="#pagerank" aria-hidden="true">#</a> PageRank</h1><h2 id="pagerank-thinking" tabindex="-1"><a class="header-anchor" href="#pagerank-thinking" aria-hidden="true">#</a> PageRank Thinking</h2><p>PageRank 的核心思想是，一个网页的重要性可以通过其他网页对它的引用来衡量。</p><ul><li>具体来说，如果一个网页被许多其他重要的网页引用（即链接到它），那么这个网页就被认为是更重要的。</li><li>PageRank算法通过分析网页之间的链接关系来为每个网页分配一个权重，称为其“PageRank值”。</li></ul><p>PageRank算法的工作原理如下：</p><ol><li>首先，将互联网看作一个有向图，其中每个网页是一个节点，链接则是有向边。当网页A链接到网页B时，就在A和B之间建立一条有向边。</li><li>PageRank算法会为每个网页分配一个初始值，<strong>通常是相等的</strong>。然后，<strong>通过多次迭代来重新分配这些值</strong>，直到达到一个<strong>稳定</strong>状态。</li><li>在每次迭代中，每个网页的 PageRank 值会根据其链接到的其他网页的值进行更新。 <ol><li>具体来说，网页A的 PageRank 值会被分配给它所链接的所有网页，分配的比例取决于A的出度（即A链接到的网页数量）</li><li>因此，一个网页的新 PageRank 值是由 <ol><li>所有链接到它的网页的当前PageRank值，和</li><li>出度决定的</li></ol></li></ol></li><li>为了防止循环引用和陷入死循环，PageRank算法还引入了一个名为“阻尼因子”（damping factor）的参数。 <ol><li>这个参数通常取值为 0.85，意味着一个网页的PageRank值有 85% 来自链接到它的其他网页</li><li>而剩下的15%来自所有网页的均匀分布。</li></ol></li></ol><p>在进行多次迭代后，PageRank值会收敛到一个稳定的状态。这些最终的PageRank值可以作为网页重要性的度量，用于对搜索结果进行排序。</p><details class="hint-container details"><summary>计算举例</summary><p>假设我们有4个网页：A、B、C和D。它们之间的链接关系如下：</p><ul><li>网页A链接到网页B和网页C</li><li>网页B链接到网页C</li><li>网页C链接到网页A</li><li>网页D链接到网页A和网页C</li></ul><p>首先，我们为每个网页分配一个初始的PageRank值，假设为1。然后，我们使用 PageRank 算法进行迭代更新。在此过程中，我们采用阻尼因子0.85。现在，我们计算每个网页的新PageRank值：</p><p>网页A的新PageRank值的计算公式为：</p><p><code>网页A的新PageRank值 = 0.15 + 0.85 * (网页C的当前值 / 网页C的出度)</code></p><p>0.85 是阻尼因子，0.15 是网站的 pagerank 初始值，通常 pagerank 初始值 = 1 - b （即 1- 阻尼因子）。</p><p><strong>第1次迭代：</strong></p><ol><li>网页A的新 PageRank值 = 0.15 + 0.85 * (网页C的当前值 / 网页C的出度) = 0.15 + 0.85 * (1 / 1) = 1</li><li>网页B的新 PageRank值 = 0.15 + 0.85 * (网页A的当前值 / 网页A的出度) = 0.15 + 0.85 * (1 / 2) = 0.575</li><li>网页C的新 PageRank值 = 0.15 + 0.85 * [(网页A的当前值 / 网页A的出度) + (网页B的当前值 / 网页B的出度) + (网页D的当前值 / 网页D的出度)] = 0.15 + 0.85 * [(1 / 2) + (1 / 1) + (1 / 2)] = 1.425</li><li>网页D的新 PageRank值 = 0.15 + 0.85 * (网页C的当前值 / 网页C的出度) = 0.15 + 0.85 * (1 / 1) = 1</li></ol><p><strong>第2次迭代：</strong></p><ol><li>网页A的新PageRank值 = 0.15 + 0.85 * (网页C的当前值 / 网页C的出度) = 0.15 + 0.85 * (1.425 / 1) = 1.31125</li><li>网页B的新PageRank值 = 0.15 + 0.85 * (网页A的当前值 / 网页A的出度) = 0.15 + 0.85 * (1 / 2) = 0.575</li><li>...</li></ol><p><strong>第3次迭代：</strong></p><ol><li>网页A的新PageRank值 = 0.15 + 0.85 * (网页C的当前值 / 网页C的出度) = 0.15 + 0.85 * (1.51375 / 1) = 1.4366875</li><li>网页B的新PageRank值 = 0.15 + 0.85 * (网页A的当前值 / 网页A的出度) = 0.15 + 0.85 * (1.31125 / 2) = 0.7025625</li><li>网页C的新PageRank值 = 0.15 + 0.85 * [(网页A的当前值 / 网页A的出度) + (网页B的当前值 / 网页B的出度) + (网页D的当前值 / 网页D的出度)] = 0.15 + 0.85 * [(1.31125 / 2) + (0.575 / 1) + (1 / 2)] = 1.4759375</li><li>网页D的新PageRank值 = 0.15 + 0.85 * (网页C的当前值 / 网页C的出度) = 0.15 + 0.85 * (1.51375 / 1) = 1.4366875</li></ol><p>我们可以继续进行更多次迭代，直到PageRank值收敛到一个稳定状态。</p></details><h2 id="the-flow-model" tabindex="-1"><a class="header-anchor" href="#the-flow-model" aria-hidden="true">#</a> The “Flow” Model</h2><ul><li>一个重要页面的 &quot;投票 &quot;价值更高</li><li>如果一个页面被其他重要页面指向，则该页面很重要</li><li><strong>Define a “rank”</strong> r<sub>j</sub> <strong>for page</strong> <strong>j</strong></li></ul>',10),p=a("p",{class:"katex-block"},[a("span",{class:"katex-display"},[a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},[a("semantics",null,[a("mrow",null,[a("msub",null,[a("mi",null,"r"),a("mi",null,"j")]),a("mo",null,"="),a("munder",null,[a("mo",null,"∑"),a("mrow",null,[a("mi",null,"i"),a("mo",null,"→"),a("mi",null,"j")])]),a("mfrac",null,[a("msub",null,[a("mi",null,"r"),a("mi",null,"i")]),a("msub",null,[a("mrow",null,[a("mtext",null," "),a("mi",{mathvariant:"normal"},"d")]),a("mi",{mathvariant:"normal"},"i")])])]),a("annotation",{encoding:"application/x-tex"}," r_{j}=\\sum_{i \\rightarrow j} \\frac{r_{i}}{\\mathrm{~d}_{\\mathrm{i}}} ")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.7167em","vertical-align":"-0.2861em"}}),a("span",{class:"mord"},[a("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.3117em"}},[a("span",{style:{top:"-2.55em","margin-left":"-0.0278em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j")])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.2861em"}},[a("span")])])])])]),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),a("span",{class:"mrel"},"="),a("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),a("span",{class:"base"},[a("span",{class:"strut",style:{height:"2.5213em","vertical-align":"-1.4138em"}}),a("span",{class:"mop op-limits"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"1.05em"}},[a("span",{style:{top:"-1.8723em","margin-left":"0em"}},[a("span",{class:"pstrut",style:{height:"3.05em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mathnormal mtight"},"i"),a("span",{class:"mrel mtight"},"→"),a("span",{class:"mord mathnormal mtight",style:{"margin-right":"0.05724em"}},"j")])])]),a("span",{style:{top:"-3.05em"}},[a("span",{class:"pstrut",style:{height:"3.05em"}}),a("span",null,[a("span",{class:"mop op-symbol large-op"},"∑")])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"1.4138em"}},[a("span")])])])]),a("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),a("span",{class:"mord"},[a("span",{class:"mopen nulldelimiter"}),a("span",{class:"mfrac"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"1.1076em"}},[a("span",{style:{top:"-2.314em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mspace nobreak"}," "),a("span",{class:"mord mathrm"},"d")]),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.3175em"}},[a("span",{style:{top:"-2.55em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mathrm mtight"},"i")])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])]),a("span",{style:{top:"-3.23em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"frac-line",style:{"border-bottom-width":"0.04em"}})]),a("span",{style:{top:"-3.677em"}},[a("span",{class:"pstrut",style:{height:"3em"}}),a("span",{class:"mord"},[a("span",{class:"mord"},[a("span",{class:"mord mathnormal",style:{"margin-right":"0.02778em"}},"r"),a("span",{class:"msupsub"},[a("span",{class:"vlist-t vlist-t2"},[a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.3117em"}},[a("span",{style:{top:"-2.55em","margin-left":"-0.0278em","margin-right":"0.05em"}},[a("span",{class:"pstrut",style:{height:"2.7em"}}),a("span",{class:"sizing reset-size6 size3 mtight"},[a("span",{class:"mord mtight"},[a("span",{class:"mord mathnormal mtight"},"i")])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.15em"}},[a("span")])])])])])])])]),a("span",{class:"vlist-s"},"​")]),a("span",{class:"vlist-r"},[a("span",{class:"vlist",style:{height:"0.836em"}},[a("span")])])])]),a("span",{class:"mclose nulldelimiter"})])])])])])],-1),r=s('<img src="https://pic.hanjiaming.com.cn/2023/04/19/6e0adaf796a62.png" alt="1681884024938.png" style="zoom:50%;"><p>就上述图片示例而言，<strong>3 equations, 3 unknowns, no constants</strong></p><ul><li>没有唯一解</li><li>所有解都以比例因子为模</li><li>额外的制约因素迫使唯一性 <ul><li>𝒓𝒚 + 𝒓𝒂 + 𝒓𝒎 = 𝟏</li><li>**Solution: **𝒓𝒚 =𝟓, 𝒓𝒂 =𝟓, 𝒓𝒎 =𝟓</li></ul></li></ul><p>但是，我们需要一种更好的方法来处理大型网络图</p><h2 id="matrix-formulation" tabindex="-1"><a class="header-anchor" href="#matrix-formulation" aria-hidden="true">#</a> Matrix Formulation</h2><p>PageRank 的矩阵形式是基于线性代数的一种表示方法，它将 PageRank 算法的计算过程表示为矩阵运算。这种表示方法可以让我们更方便地使用线性代数的知识来理解和分析 PageRank 算法</p><p>首先，我们需要构造一个链接矩阵 H，矩阵的大小为 N×N（N 为网页数量）。矩阵元素 H(i, j) 的值为：</p><ul><li>如果网页 j 链接到网页 i，H(i, j) = 1/ L(p_j)，其中 L(p_j) 为网页 j 的出度（即链接到其他网页的数量）。 <ul><li>这就表示，每一列的加和为1</li><li>这就表示，H(i, j) 的值是 <code>列标</code> 指向 <code>行标</code> 的值</li></ul></li><li>如果网页 j 不链接到网页 i，H(i, j) = 0</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2023/04/19/902a48319a815.png" alt="1681885244414.png" tabindex="0" loading="lazy"><figcaption>1681885244414.png</figcaption></figure><h2 id="problems" tabindex="-1"><a class="header-anchor" href="#problems" aria-hidden="true">#</a> Problems</h2><ul><li>有些页面是死胡同「Dead Ends」（没有外链）：死胡同页面（Dead Ends）：这类页面没有任何出链（即没有指向其他页面的链接）。由于这种页面不能将其权重分配给其他页面，它们会导致权重“泄漏”。</li><li>Spider traps: 这是一组页面，其所有的出链都指向该组内的其他页面，不指向组外的任何页面。在这种情况下，权重会在这组页面之间循环流动，最终导致该组页面吸收了所有的权重。 <ul><li>这同样会影响 PageRank 算法的性能和准确性，因为在这个过程中，权重无法正确地分配给其他页面。</li></ul></li></ul><p>为了解决这两种问题，PageRank 算法引入了阻尼因子（Damping Factor）。</p><h3 id="dead-ends" tabindex="-1"><a class="header-anchor" href="#dead-ends" aria-hidden="true">#</a> Dead Ends</h3><p>谷歌对蜘蛛陷阱的解决方案：在每个时间步骤，&quot;投票 &quot;有两个选项</p><ul><li>With prob. b, follow a link at random</li><li>With prob. **1-**b, jump to some random page</li></ul><p>Common values for b are in the range 0.8 to 0.9</p><p>“投票”将在几个时间步内传送出蜘蛛陷阱</p><img src="https://pic.hanjiaming.com.cn/2023/04/19/e6de312ab3016.png" alt="1681894604455.png" style="zoom:33%;"><h3 id="spider-traps" tabindex="-1"><a class="header-anchor" href="#spider-traps" aria-hidden="true">#</a> Spider Traps</h3><ul><li>瞬移：遵循随机传送链接，概率为1.0，远离死胡同。</li><li>相应地调整矩阵</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2023/04/19/576c6506c0d50.png" alt="1681894733521.png" tabindex="0" loading="lazy"><figcaption>1681894733521.png</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">为什么传送可以解决问题</p><ul><li>蜘蛛陷阱不是问题，但有了陷阱，PageRank分数就不是我们想要的了</li><li>死胡同是个问题，矩阵不是列随机的，所以我们的初始假设没有得到满足（SUM = 1)</li><li>解决方案：当没有地方可去时，总是通过传送来使矩阵列随机化。</li></ul></div><figure><img src="https://pic.hanjiaming.com.cn/2023/04/19/28ff5bce6013e.png" alt="1681895764048.png" tabindex="0" loading="lazy"><figcaption>1681895764048.png</figcaption></figure><p>**What is **b? In practice b <em>=0.8 ~ 0.9</em> (make <em>5</em> steps on avg., jump)</p><figure><img src="https://pic.hanjiaming.com.cn/2023/04/19/2debdb5bcda29.png" alt="1681895842484.png" tabindex="0" loading="lazy"><figcaption>1681895842484.png</figcaption></figure>',25),m=[e,p,r];function o(g,c){return i(),n("div",null,m)}const u=l(t,[["render",o],["__file","PageRank.html.vue"]]);export{u as default};
