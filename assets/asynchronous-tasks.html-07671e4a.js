import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,e as l}from"./app-d8c979a2.js";const n={},s=l('<h1 id="asynchronous-tasks" tabindex="-1"><a class="header-anchor" href="#asynchronous-tasks" aria-hidden="true">#</a> Asynchronous Tasks</h1><h2 id="http-request-response-cycle" tabindex="-1"><a class="header-anchor" href="#http-request-response-cycle" aria-hidden="true">#</a> HTTP Request-Response Cycle</h2><ul><li>应用程序服务器仅在客户端发出<strong>请求</strong>时才执行工作</li><li>客户端在应用服务器完成其工作并返回响应之前等待响应</li><li>HTTP请求-响应周期预计在短时间内完成（没有人喜欢等待！）</li></ul><p>但并不是所有的任务都能在短时间内完成</p><p>因此，有必要在后台执行一些任务（即在HTTP请求-响应周期之外）</p><ul><li>有很多场景下，后台任务都是必要的</li><li>考虑一个移动应用程序，当您共享新文件时，通知将发送给您的朋友</li></ul><img src="https://pic.hanjiaming.com.cn/2024/11/30/472ed6b728a69.png" alt="1732943957769.png" style="zoom:33%;"><p>在HTTP响应-请求周期之外执行的任务被称为异步（非阻塞）任务</p><img src="https://pic.hanjiaming.com.cn/2024/11/30/9e19011f99ba1.png" alt="1732944054020.png" style="zoom:33%;"><p>实现异步任务的一个简单方法是在系统中安排在特定时间（以及定期）运行的“作业”。</p><p>例如：</p><ul><li>更新系统中的各种计数器（例如，用户数量、帖子、消息）</li><li>生成用户推荐好友列表</li><li>根据电子商务网站中的用户反馈计算两种产品的相似度</li><li>从外部来源（例如新闻或天气信息）收集信息</li></ul><h2 id="regular-jobs-cron" tabindex="-1"><a class="header-anchor" href="#regular-jobs-cron" aria-hidden="true">#</a> Regular Jobs - Cron</h2><ul><li>Cron 是 Unix/Linux 系统中用于设置定期任务的调度器</li><li>Type “<strong>crontab -e</strong>” to edit the configuration file (<strong>cron table</strong>)</li><li>配置文件中的每一行定义了一个单独的任务</li></ul><img src="https://pic.hanjiaming.com.cn/2024/11/30/af8aecd9d24b9.png" alt="1732944388209.png" style="zoom:33%;"><img src="https://pic.hanjiaming.com.cn/2024/11/30/fa9ec14b95adb.png" alt="1732944483268.png" style="zoom:25%;"><h2 id="message-queues" tabindex="-1"><a class="header-anchor" href="#message-queues" aria-hidden="true">#</a> Message Queues</h2><h3 id="limitation-of-cron-jobs" tabindex="-1"><a class="header-anchor" href="#limitation-of-cron-jobs" aria-hidden="true">#</a> Limitation of Cron Jobs</h3><p>Cron 用于安排周期性任务。然而：</p><ul><li>发送到您的服务器的请求可能不会在时间上均匀分布</li><li>不是所有任务都能在特定时间内完成</li><li>将逻辑或负载均衡纳入执行一系列相关工作的过程中并非易事。</li></ul><p>实现异步任务可能并不简单：</p><ul><li>任务可能必须按顺序执行</li><li>可能会有很多并发任务</li><li>任务可能有不同的优先级</li><li>不同的任务可能需要不同数量的资源</li></ul><p>我们需要一些“中间人”来帮助我们管理服务器应用程序和工人之间的任务/消息。</p><h3 id="how-to" tabindex="-1"><a class="header-anchor" href="#how-to" aria-hidden="true">#</a> How to?</h3><p><strong>我们如何异步执行任务？这就像是在不同规模上的多线程/多进程</strong></p><p>在多进程处理中，我们创建一个消息队列，以便系统的不同部分可以相互通知任何更新</p><img src="https://pic.hanjiaming.com.cn/2024/11/30/b611f8fd54ed5.png" alt="1732945292648.png" style="zoom:40%;"><p>类似的消息队列可以在各个程序或组件之间使用</p><p>Message Queues</p><ul><li>通过在应用服务器和服务之间有一个“经纪人”「<strong>broker</strong>」，我们实际上拥有一个更健壮的系统</li><li>将 HTTP 请求-响应周期从繁重的任务中解放出来</li><li>客户免受后台任务失败的影响</li><li>如果出现失败，broker可以确保再次提交任务进行重试</li></ul><p>Asynchronous Message Queues</p><ul><li>在 Python 应用程序中实现异步消息队列的一种流行方法涉及使用以下各项的组合： <ul><li>Celery – 作为任务队列</li><li>Rabbitmq – 作为消息代理</li><li>Redis – 作为后端数据存储</li></ul></li></ul><h2 id="rabbitmq" tabindex="-1"><a class="header-anchor" href="#rabbitmq" aria-hidden="true">#</a> RabbitMQ</h2><p>常用开源消息代理软件之一。一些功能包括：</p><ul><li>Delivery acknowledgement</li><li>Clustering and queues mirroring</li><li>可在多种编程语言中使用的客户端库</li><li>Management UI</li></ul><p>使用 Rabbit MQ 作为消息代理时的架构（注意：以下组件不一定驻留在同一台机器上）</p><img src="https://pic.hanjiaming.com.cn/2024/11/30/5e8d954d1313a.png" alt="1732947197905.png" style="zoom:33%;"><h3 id="amqp" tabindex="-1"><a class="header-anchor" href="#amqp" aria-hidden="true">#</a> AMQP</h3><p>RabbitMQ使用AMQP协议进行消息传递</p><ul><li>AMQP = <strong>Advanced Message Queuing Protocol</strong></li><li>用于发送和接收消息的应用层协议</li><li>Defines how messages are routed and stored in the broker</li><li>定义了客户端与服务器（代理）之间通信的方式</li></ul><p>RabbitMQ 是一种通用消息代理，您可以使用不同的技术和语言（只要您使用 AMQP 协议）来实现生产者和消费者。</p><img src="https://pic.hanjiaming.com.cn/2024/11/30/64779347ebd8b.png" alt="1732950784438.png" style="zoom:33%;"><h3 id="model" tabindex="-1"><a class="header-anchor" href="#model" aria-hidden="true">#</a> Model</h3><p><strong>A single queue with a single consumer</strong></p><img src="https://pic.hanjiaming.com.cn/2024/11/30/14f1bade02e11.png" alt="1732948027871.png" style="zoom:33%;"><p><strong>在多个工作人员之间分发消息</strong></p><ul><li>简单地创建更多工人并让他们从同一个队列中消费</li><li>RabbitMQ将按轮询方式向它们分发消息</li><li>一条消息将仅传递给一位消费者</li></ul><img src="https://pic.hanjiaming.com.cn/2024/11/30/c035852ce1ca1.png" alt="1732948082241.png" style="zoom:33%;"><p>在某些情况下，我们希望将消息传递给所有消费者→发布/订阅模型</p><ul><li>示例：监控某些统计数据（股价、天气状况等）的变化</li><li>当发生（在出版商处）某事时，需要采取多个动作（由订阅者执行）时很有用</li></ul><h3 id="exchanges" tabindex="-1"><a class="header-anchor" href="#exchanges" aria-hidden="true">#</a> Exchanges</h3><p><strong>Exchanges</strong> - A core concept in RabbitMQ</p><ul><li>生产者通常将消息发送到交换器，交换器将根据其中定义的某种逻辑将消息分派到零个、一个或多个队列</li><li>进一步解耦生产者（们）和消费者（们）</li></ul><img src="https://pic.hanjiaming.com.cn/2024/11/30/69a838e01562a.png" alt="预览 2024-11-30 14.37.29.png" style="zoom:33%;"><h4 id="direct-exchange" tabindex="-1"><a class="header-anchor" href="#direct-exchange" aria-hidden="true">#</a> Direct Exchange</h4><p>直接将路由消息发送到由路由键指定的队列</p><img src="https://pic.hanjiaming.com.cn/2024/11/30/9a8cfd70a5881.png" alt="1732948731796.png" style="zoom:50%;"><h4 id="fanout-exchanges" tabindex="-1"><a class="header-anchor" href="#fanout-exchanges" aria-hidden="true">#</a> Fanout Exchanges</h4><ul><li>将消息路由到绑定到交换器的所有队列</li><li>Also known as the pub/sub model</li><li>在MMO游戏、体育新闻网站、群聊、股价更新等中很有用。</li></ul><img src="https://pic.hanjiaming.com.cn/2024/11/30/b13ed1567432d.png" alt="1732948799489.png" style="zoom:50%;"><ul><li>立即向所有队列广播消息（忽略路由键）</li><li>设置一个exchange，让exchange为多个消费者提交消息到多个队列</li></ul><img src="https://pic.hanjiaming.com.cn/2024/11/30/528e19e80c405.png" alt="1732948856721.png" style="zoom:33%;"><h4 id="topic-exchanges" tabindex="-1"><a class="header-anchor" href="#topic-exchanges" aria-hidden="true">#</a> Topic Exchanges</h4><img src="https://pic.hanjiaming.com.cn/2024/11/30/cc105066385a4.png" alt="1732950681504.png" style="zoom:33%;"><ul><li>路由消息到名称与路由键中给出的模式匹配的队列</li><li>在根据某些标准分发信息方面很有用，例如地理位置、按类别更新的新闻等。</li><li>消息也可以由交易所根据其“主题”进行路由，例如：</li></ul><h4 id="headers-exchanges" tabindex="-1"><a class="header-anchor" href="#headers-exchanges" aria-hidden="true">#</a> Headers Exchanges</h4><p>基于报头字段中的属性进行路由消息，而不是基于路由键属性。</p><h2 id="events-vs-commands" tabindex="-1"><a class="header-anchor" href="#events-vs-commands" aria-hidden="true">#</a> Events vs. Commands</h2><ul><li>信息内容可以根据您的需求进行定制</li><li>You can issue “<strong>commands</strong>”, e.g., “increment user’s number of likes”</li><li>You can also issue “<strong>events</strong>”, e.g., “user_id=3 likes photo_id=5”</li></ul><p>一般来说，发送“事件”消息（以使您的应用程序事件驱动）更好</p><ul><li>事件可以被负责执行不同任务的工人消费</li><li>允许系统之间更好的隔离</li><li>不需要在您的应用程序中硬编码操作</li></ul><div class="hint-container info"><p class="hint-container-title">Message Queues in a Distributed System</p><p>消息队列在分布式系统中非常重要，原因有以下几点：</p><ul><li>允许解耦不同组件并移除依赖</li><li>提高容错性。当一个组件失败时，其他所有组件可以继续与队列交互。</li><li>通过允许生产者、消费者以及队列本身独立增长，实现细粒度可伸缩性。</li><li>提高编写请求的性能，因为实际的写入操作可以由后台工作者以异步方式进行。</li></ul></div><h2 id="celery" tabindex="-1"><a class="header-anchor" href="#celery" aria-hidden="true">#</a> Celery</h2><ul><li>用Python编写的Python应用程序的分布式任务队列</li><li>它必须得到消息代理的支持（即 Rabbitmq）</li><li>允许异步任务的实施更深入地集成到您的Python应用程序中</li></ul><p>Before you use Celery</p><img src="https://pic.hanjiaming.com.cn/2024/11/30/f4ce748268f60.png" alt="1732953138461.png" style="zoom:33%;"><p>After you use Celery</p><ul><li>允许您通过在Python中简单地进行函数调用即可发送消息/调用异步任务</li><li>Helps you manage your workers (e.g. restart them in case of a failure or if an exception is raised)</li></ul><img src="https://pic.hanjiaming.com.cn/2024/11/30/b7fe87f2cc0bc.png" alt="1732953194439.png" style="zoom:33%;"><ul><li>很多情况下，您只是想提交任务而不关心结果（例如用户喜欢一篇文章、用户对照片的评论等）</li><li>在其他情况下，您可能想跟踪任务的进度（例如，让用户了解上传文件的进度）</li><li>对于后一种情况，Celery需要一个“后端”存储来临时存储异步任务的状态</li><li>通常使用Redis（键值存储）作为后端</li></ul><img src="https://pic.hanjiaming.com.cn/2024/11/30/39e34f6b85822.png" alt="1732953249237.png" style="zoom:33%;"><p>Celery Architecture</p><p>为了可扩展性，这些组件都可以设置在不同的机器上（Workers 应该指向同一个消息代理的 URI）</p><img src="https://pic.hanjiaming.com.cn/2024/11/30/005c410cf0bd4.png" alt="1732953356056.png" style="zoom:50%;"><h2 id="case-study" tabindex="-1"><a class="header-anchor" href="#case-study" aria-hidden="true">#</a> Case Study</h2><p>考虑一个社交应用，其中用户可以成为彼此的朋友。常见的操作有哪些？</p><ul><li>获取指定用户的朋友列表</li><li>获取两个指定用户常见好友列表</li><li>如果其他用户是他/她朋友的朋友，则推荐用户添加其他用户为朋友</li></ul><p>直接存储友谊网络的一种简单方法是使用包含以下数据的集合：</p><img src="https://pic.hanjiaming.com.cn/2024/11/30/054fba13e4f7c.png" alt="1732953451612.png" style="zoom:25%;"><ul><li>如何获取两个指定用户（例如 user_id = 1 和 user_id = 2）的共有好友列表？ <ul><li>检索这两个用户的好友列表，然后在您的应用程序代码中找到这两个列表的交集</li><li>通过将好友表与自身连接，执行复杂对象查询，并让数据库返回共同好友列表</li></ul></li><li>无论如何，实时计算这个列表都不会很高效。同时，这个列表不太可能经常发生变化。</li></ul><p>我们如何使用异步任务来提高这个功能的效率呢？</p><figure><img src="https://pic.hanjiaming.com.cn/2024/11/30/ba3b887e61d95.png" alt="1732953541697.png" tabindex="0" loading="lazy"><figcaption>1732953541697.png</figcaption></figure><p>使用消息队列时请注意</p><ul><li>如果要执行的操作比向代理发送消息消耗更多时间或资源，请使用异步任务</li><li>确保工作人员消费消息的速度比生产者生成消息的速度快</li><li>考虑信息的的重要性，并在必要时使用确认回复</li></ul>',94),t=[s];function r(o,c){return e(),a("div",null,t)}const g=i(n,[["render",r],["__file","asynchronous-tasks.html.vue"]]);export{g as default};
