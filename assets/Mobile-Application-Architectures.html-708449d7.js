import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as u,c as d,d as r,w as e,e as s,a as i,b as l}from"./app-c31a6da5.js";const h={},p=s('<h1 id="mobile-app-architectures" tabindex="-1"><a class="header-anchor" href="#mobile-app-architectures" aria-hidden="true">#</a> Mobile APP Architectures</h1><p>基于 移动客户端 - 服务器模式 的移动计算应用体系结构类型</p><p>瘦客户端</p><ul><li>需要与网络持续连接</li><li>使用微浏览器来显示信息</li><li>通常用于信息服务应用程序</li></ul><p>智能客户端</p><ul><li>结合移动数据库技术进行持久性数据存储</li><li>允许离线访问重要数据</li><li>将本地数据与企业系统进行同步</li><li>最适用于 &quot;偶尔连接 &quot;环境中的应用</li></ul><h2 id="thin-client" tabindex="-1"><a class="header-anchor" href="#thin-client" aria-hidden="true">#</a> Thin Client</h2><p>瘦客户端（无线互联网）应用使用与互联网应用相同的架构</p><ul><li>业务逻辑和企业数据都存储在服务器上</li><li>客户端是一个带有互联网浏览器的移动设备，称为微浏览器「Microbrowser」 <ul><li>微浏览器提供有限的用户界面和功能</li><li>客户端设备上不需要其他软件</li></ul></li><li>与有线互联网应用的区别在于如何将信息传输给终端用户。</li></ul><img src="https://pic.hanjiaming.com.cn/2022/12/04/96e05681661dc.png" alt="1670160693926.png" style="zoom:33%;"><div class="hint-container note"><p class="hint-container-title">Components</p><ul><li>Microbrowser client</li><li>Wireless network</li><li>Wireless gateway</li><li>Server</li><li>Back-end system</li></ul></div><h3 id="microbrowser-client" tabindex="-1"><a class="header-anchor" href="#microbrowser-client" aria-hidden="true">#</a> Microbrowser Client</h3><p>无线设备有一个预装的微浏览器，其操作类似于桌面互联网浏览器。</p><ul><li>浏览器使用一个URL地址来联系指定的无线网络服务器</li><li>浏览器解析包含标记语言的响应，并将结果显示给用户</li></ul><p>有各种各样的微浏览器和标记语言被使用：不同的微浏览器有自己独特的方式来浏览应用程序</p><div class="hint-container tip"><p class="hint-container-title">实现</p><p>相当于APP内嵌套 Webview。</p></div><h3 id="wireless-network" tabindex="-1"><a class="header-anchor" href="#wireless-network" aria-hidden="true">#</a> Wireless Network</h3><p>瘦客户机应用程序向服务器发送请求（和从服务器接收数据）需要无线网络连接。</p><ul><li>每个请求都通过无线网络传到无线网关，后者将请求转发到服务器。</li><li>瘦客户端应用程序要求必须一直保持与服务器的连接。</li></ul><p>微浏览器负责处理与无线网络的通信。</p><ul><li>开发人员不需要知道底层「underlying」无线网络如何工作，可以专注于应用逻辑</li><li>这是一个显著的优势，因为有大量的无线网络协议正在被使用</li></ul><h3 id="wireless-gateway" tabindex="-1"><a class="header-anchor" href="#wireless-gateway" aria-hidden="true">#</a> Wireless Gateway</h3><p>当无线网络不是基于 Internet 协议时，基站包含一个网关，可以转换请求并将其作为超文本传输协议 (HTTP) 发送到 Web 服务器。</p><ul><li>网关作为无线和有线网络之间的桥梁</li><li>它由无线网络供应商托管（在一个基站中）。</li><li>它允许瘦客户端应用程序通过同一入口访问互联网服务和数据。</li></ul><div class="hint-container info"><p class="hint-container-title">网关功能</p><ul><li>转换不同的协议: wireless protocol ↔ IP, WAP ↔ HTTP, HTML ↔ WML etc.</li><li>优化「Optimize」通信流</li><li>向无线客户端推送「push」信息</li><li>增强安全性「security」</li></ul></div><h3 id="server" tabindex="-1"><a class="header-anchor" href="#server" aria-hidden="true">#</a> Server</h3><p>Web servers</p><ul><li>Listen to the incoming HTTP request</li><li>从企业数据源中收集内容，并为客户适当格式化数据</li><li>Send response back to the client</li></ul><p>Wireless application servers</p><ul><li>通常位于企业内部</li><li>提供应用逻辑「logics」和核心功能</li></ul><h3 id="back-end-system" tabindex="-1"><a class="header-anchor" href="#back-end-system" aria-hidden="true">#</a> Back-end System</h3><ul><li>Provide enterprise data source</li><li>允许Web服务器和应用服务器使用 首选「preferred」/标准「standard」 访问机制「mechanisms」访问企业数据源</li></ul>',32),m=i("p",null,[i("strong",null,"瘦客户端优点")],-1),v=i("ul",null,[i("li",null,"将互联网计算应用扩展到移动环境"),i("li",null,[l("需要最少到零的软件部署 "),i("ul",null,[i("li",null,"无需任何额外的客户端配置即可部署应用程序"),i("li",null,"整个配置、适应和更新只发生在服务器上")])]),i("li",null,"保持最新数据: 所有的数据都是最新版本，没有陈旧的数据。"),i("li",null,"提供高度的数据安全性: 所有数据都存储在公司防火墙后面的服务器上，没有数据存储在客户端")],-1),b=i("p",null,[i("strong",null,"瘦客户端缺点")],-1),_=i("ul",null,[i("li",null,"需要持久的无线连接：当用户在不同地点之间移动时，很难保持持久的连接性"),i("li",null,"应用性能受网络条件的影响很大：通过无线网络传输「transferred」的每个请求都会受到网络吞吐量「throughput」和延迟「latency」的影响。"),i("li",null,"可用性：如果在服务器端出现问题，所有的用户将被阻止。"),i("li",null,[l("Application testing is difficult "),i("ul",null,[i("li",null,"在所有的微浏览器上测试应用程序是困难的。"),i("li",null,"Emulators「模拟器」 不能准确代表最终用户的体验，因为它不是通过无线网络执行的。")])])],-1),g=s('<h2 id="smart-client" tabindex="-1"><a class="header-anchor" href="#smart-client" aria-hidden="true">#</a> Smart Client</h2><p>智能客户端应用程序允许用户即使在与网络断开连接时也能访问数据</p><ul><li>在客户端设备上开发的应用软件代替了微浏览器，即使在无法连接网络的情况下也可以使用。</li><li>通过将应用软件部署到设备端，客户端应用程序可以有一些 &quot;智能&quot;（业务逻辑）来处理数据。</li><li>应用软件结合了移动数据库技术，为企业系统提供持久的数据存储管理和数据同步。</li></ul><img src="https://pic.hanjiaming.com.cn/2022/12/04/62287d5a0200b.png" alt="1670162564319.png" style="zoom:50%;"><div class="hint-container note"><p class="hint-container-title">Components</p><ul><li>Smart client</li><li>Wireless networks</li><li>Synchronization server</li><li>Back-end enterprise system</li></ul></div><h3 id="smart-client-1" tabindex="-1"><a class="header-anchor" href="#smart-client-1" aria-hidden="true">#</a> Smart client</h3><p>智能客户端应用程序在客户端运行</p><ul><li>为终端用户提供丰富和定制的用户界面</li><li>客户端应用逻辑决定了客户应用的行为方式 <ul><li>应用程序从哪里获得数据（从本地存储或服务器）</li><li>数据如何在设备上呈现、处理和存储</li><li>哪一组数据被送回企业系统进行同步「同步」</li></ul></li><li>拥有持久的数据存储，在本地存储数据，以提供离线数据访问</li><li>持久性数据存储是智能客户端设备的一个关键组成部分 <ul><li>在设备上本地存储应用程序的数据</li><li>在没有无线连接的情况下提供快速、可靠的数据访问</li></ul></li><li>通过无线连接与同步服务器进行通信</li></ul><h3 id="synchronization-server" tabindex="-1"><a class="header-anchor" href="#synchronization-server" aria-hidden="true">#</a> Synchronization Server</h3><p>Interface to the client application</p><ul><li>接收来自客户端应用程序的数据</li><li>支持断开连接的操作</li><li>确保传输的数据量最小 <ul><li>数据可以以各种格式发送</li><li>客户端和服务器都知道如何破译「decipher」传输的数据。</li></ul></li></ul><p>Synchronization logic</p><ul><li>确定如何处理「manipulate」数据，例如，数据子集「subsetting」、数据转换「transformation」、数据压缩「compression」等</li><li>Detect and resolve data conflicts <ul><li>只需将更新的内容，应用于数据存储或</li><li>执行复杂的行动以检测和解决冲突</li></ul></li></ul><p>与后端数据源整合：使用标准DBMS提供对企业数据源的访问</p><p>智能客户端应用程序需要数据同步</p><ul><li>什么是数据同步「synchronization」：应用数据如何在移动设备和后端企业系统之间进行同步</li><li>为什么智能客户端应用程序需要数据同步：为了确保客户端和服务器上相同数据的不同副本之间的一致性 <ul><li>将数据从移动设备备份到服务器</li><li>从/到移动设备更新数据</li><li>将更新从服务器传播到所有移动设备</li></ul></li><li>在哪里执行数据同步？ <ul><li>大部分是在同步服务器上执行</li><li>智能客户端需要知道某些同步知识，如同步服务器的位置、要同步的数据等。</li></ul></li></ul>',16),f=i("p",null,[i("strong",null,"Smart Client Advantages")],-1),y=i("ul",null,[i("li",null,"Offline data access：即使在没有无线网络的情况下，用户仍然可以访问和修改应用数据。这克服了瘦客户机架构的限制"),i("li",null,"Performance：性能是已知的，由处理器速度、数据访问等决定。"),i("li",null,"Distributed computing: 在客户端执行和处理数据可以减少服务器的负载"),i("li",null,"Security：在客户端和服务器端控制用户数据，不涉及第三方系统")],-1),w=i("p",null,[i("strong",null,"Smart Client Disadvantages")],-1),A=i("ul",null,[i("li",null,"Application deployment: 由于应用程序需要被部署到移动设备上，应用程序的部署和管理成为负担"),i("li",null,"Development complexity: 为具有不同移动操作系统的各种移动设备开发应用程序是困难的"),i("li",null,"Security risk: 移动操作系统向病毒敞开大门")],-1),S=i("h2",{id:"summary",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#summary","aria-hidden":"true"},"#"),l(" Summary")],-1),x=i("ul",null,[i("li",null,[l("Three mobile computing models are introduced："),i("strong",null,"Mobile client/server, mobile P2P, mobile agent")]),i("li",null,[l("Two three-tier models for mobile C/S model："),i("strong",null,"Client/agent/server, client/intercept/server")]),i("li",null,[l("Two mobile application architectures are described: "),i("strong",null,"Thin client, smart client")])],-1);function T(k,P){const a=c("Tabs");return u(),d("div",null,[p,r(a,{id:"275",data:[{id:"Advantages"},{id:"Disadvantages"}]},{title0:e(({value:t,isActive:n})=>[l("Advantages")]),title1:e(({value:t,isActive:n})=>[l("Disadvantages")]),tab0:e(({value:t,isActive:n})=>[m,v]),tab1:e(({value:t,isActive:n})=>[b,_]),_:1}),g,r(a,{id:"579",data:[{id:"Advantages"},{id:"Disadvantages"}]},{title0:e(({value:t,isActive:n})=>[l("Advantages")]),title1:e(({value:t,isActive:n})=>[l("Disadvantages")]),tab0:e(({value:t,isActive:n})=>[f,y]),tab1:e(({value:t,isActive:n})=>[w,A]),_:1}),S,x])}const M=o(h,[["render",T],["__file","Mobile-Application-Architectures.html.vue"]]);export{M as default};
