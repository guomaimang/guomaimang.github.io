import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as l,a as n,b as s,d as e,e as t}from"./app-8999461d.js";const i={},r=t(`<h1 id="总结章" tabindex="-1"><a class="header-anchor" href="#总结章" aria-hidden="true">#</a> 总结章</h1><p>本章简要回顾我们到现在为止学到的 JavaScript 特性，并特别注意了一些细节。</p><h2 id="代码结构" tabindex="-1"><a class="header-anchor" href="#代码结构" aria-hidden="true">#</a> 代码结构</h2><p>语句用分号分隔：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通常，换行符也被视为分隔符，因此下面的例子也能正常运行：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello&#39;</span><span class="token punctuation">)</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;World&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这就是所谓的「自动分号插入」。但有时它不起作用，例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;There will be an error after this message&quot;</span><span class="token punctuation">)</span>

<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>alert<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数代码风格指南都认为我们应该在每个语句后面都加上分号。</p><p>在代码块 <code>{...}</code> 后以及有代码块的语法结构（例如循环）后不需要加分号：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 函数声明后不需要加分号</span>
<span class="token punctuation">}</span>

<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 循环语句后不需要加分号</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>……但即使我们在某处添加了「额外的」分号，这也不是错误。分号会被忽略的。</p>`,13),d={href:"https://zh.javascript.info/structure",target:"_blank",rel:"noopener noreferrer"},u=t(`<h2 id="严格模式" tabindex="-1"><a class="header-anchor" href="#严格模式" aria-hidden="true">#</a> 严格模式</h2><p>为了完全启用现代 JavaScript 的所有特性，我们应该在脚本顶部写上 <code>&quot;use strict&quot;</code> 指令。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span><span class="token punctuation">;</span>

<span class="token operator">...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该指令必须位于 JavaScript 脚本的顶部或函数体的开头。</p><p>如果没有 <code>&quot;use strict&quot;</code>，所有东西仍可以正常工作，但是某些特性的表现方式与旧式「兼容」方式相同。我们通常更喜欢现代的方式。</p><p>语言的一些现代特征（比如我们将来要学习的类）会隐式地启用严格模式。</p>`,6),k={href:"https://zh.javascript.info/strict-mode",target:"_blank",rel:"noopener noreferrer"},v=t(`<h2 id="变量" tabindex="-1"><a class="header-anchor" href="#变量" aria-hidden="true">#</a> 变量</h2><p>可以使用以下方式声明变量：</p><ul><li><code>let</code></li><li><code>const</code>（不变的，不能被改变）</li><li><code>var</code>（旧式的，稍后会看到）</li></ul><p>一个变量名可以由以下组成：</p><ul><li>字母和数字，但是第一个字符不能是数字。</li><li>字符 <code>$</code> 和 <code>_</code> 是允许的，用法同字母。</li><li>非拉丁字母和象形文字也是允许的，但通常不会使用。</li></ul><p>变量是动态类型的，它们可以存储任何值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有 8 种数据类型：</p><ul><li><code>number</code> — 可以是浮点数，也可以是整数，</li><li><code>bigint</code> — 用于任意长度的整数，</li><li><code>string</code> — 字符串类型，</li><li><code>boolean</code> — 逻辑值：<code>true/false</code>，</li><li><code>null</code> — 具有单个值 <code>null</code> 的类型，表示“空”或“不存在”，</li><li><code>undefined</code> — 具有单个值 <code>undefined</code> 的类型，表示“未分配（未定义）”，</li><li><code>object</code> 和 <code>symbol</code> — 对于复杂的数据结构和唯一标识符，我们目前还没学习这个类型。</li></ul><p><code>typeof</code> 运算符返回值的类型，但有两个例外：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token operator">==</span> <span class="token string">&quot;object&quot;</span> <span class="token comment">// JavaScript 编程语言的设计错误</span>
<span class="token keyword">typeof</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">==</span> <span class="token string">&quot;function&quot;</span> <span class="token comment">// 函数被特殊对待</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,11),m={href:"https://zh.javascript.info/variables",target:"_blank",rel:"noopener noreferrer"},b={href:"https://zh.javascript.info/types",target:"_blank",rel:"noopener noreferrer"},h=n("h2",{id:"交互",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#交互","aria-hidden":"true"},"#"),s(" 交互")],-1),f=n("p",null,"我们使用浏览器作为工作环境，所以基本的 UI 功能将是：",-1),g={href:"https://developer.mozilla.org/zh/docs/Web/API/Window/prompt",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"prompt(question[, default\\])",-1),w=n("p",null,[s("提出一个问题，并返回访问者输入的内容，如果他按下「取消」则返回 "),n("code",null,"null"),s("。")],-1),j={href:"https://developer.mozilla.org/zh/docs/Web/API/Window/confirm",target:"_blank",rel:"noopener noreferrer"},y=n("code",null,"confirm(question)",-1),q=n("p",null,[s("提出一个问题，并建议用户在“确定”和“取消”之间进行选择。选择结果以 "),n("code",null,"true/false"),s(" 形式返回。")],-1),x={href:"https://developer.mozilla.org/zh/docs/Web/API/Window/alert",target:"_blank",rel:"noopener noreferrer"},z=n("code",null,"alert(message)",-1),W=n("p",null,[s("输出一个 "),n("code",null,"消息"),s("。")],-1),A=t(`<p>这些函数都会产生 <strong>模态框</strong>，它们会暂停代码执行并阻止访问者与页面的其他部分进行交互，直到用户做出回答为止。</p><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> userName <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;Your name?&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> isTeaWanted <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&quot;Do you want some tea?&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;Visitor: &quot;</span> <span class="token operator">+</span> userName <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Alice</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;Tea wanted: &quot;</span> <span class="token operator">+</span> isTeaWanted <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),J={href:"https://zh.javascript.info/alert-prompt-confirm",target:"_blank",rel:"noopener noreferrer"},S=n("h2",{id:"运算符",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#运算符","aria-hidden":"true"},"#"),s(" 运算符")],-1),B=n("p",null,"JavaScript 支持以下运算符：",-1),I=t("<li><p>算数运算符</p><p>常规的：<code>+ - * /</code>（加减乘除），取余运算符 <code>%</code> 和幂运算符 <code>**</code>。二进制加号 <code>+</code> 可以连接字符串。如果任何一个操作数是一个字符串，那么另一个操作数也将被转换为字符串：<code>alert( &#39;1&#39; + 2 ); // &#39;12&#39;，字符串 alert( 1 + &#39;2&#39; ); // &#39;12&#39;，字符串</code></p></li><li><p>赋值</p><p>简单的赋值：<code>a = b</code> 和合并了其他操作的赋值：<code>a * = 2</code>。</p></li>",2),N=n("p",null,"按位运算符",-1),T={href:"https://developer.mozilla.org/zh/docs/Web/JavaScript/Guide/Expressions_and_Operators#Bitwise",target:"_blank",rel:"noopener noreferrer"},E=t("<li><p>三元运算符</p><p>唯一具有三个参数的操作：<code>cond ? resultA : resultB</code>。如果 <code>cond</code> 为真，则返回 <code>resultA</code>，否则返回 <code>resultB</code>。</p></li><li><p>逻辑运算符</p><p>逻辑与 <code>&amp;&amp;</code> 和或 <code>||</code> 执行短路运算，然后返回运算停止处的值（<code>true</code>/<code>false</code> 不是必须的）。逻辑非 <code>!</code> 将操作数转换为布尔值并返回其相反的值。</p></li><li><p>空值合并运算符</p><p><code>??</code> 运算符从一列变量中，选取值为已定义的值（defined value）的变量。<code>a ?? b</code> 的结果是 <code>a</code>，除非 <code>a</code> 为 <code>null/undefined</code>，这时结果是 <code>b</code>。</p></li><li><p>比较运算符</p><p>对不同类型的值进行相等检查时，运算符 <code>==</code> 会将不同类型的值转换为数字（除了 <code>null</code> 和 <code>undefined</code>，它们彼此相等而没有其他情况），所以下面的例子是相等的：<code>alert( 0 == false ); // true alert( 0 == &#39;&#39; ); // true</code>其他比较也将转换为数字。严格相等运算符 <code>===</code> 不会进行转换：不同的类型总是指不同的值。值 <code>null</code> 和 <code>undefined</code> 是特殊的：它们只在 <code>==</code> 下相等，且不相等于其他任何值。大于/小于比较，在比较字符串时，会按照字符顺序逐个字符地进行比较。其他类型则被转换为数字。</p></li><li><p>其他运算符</p><p>还有很少一部分其他运算符，如逗号运算符。</p></li>",5),V={href:"https://zh.javascript.info/operators",target:"_blank",rel:"noopener noreferrer"},H={href:"https://zh.javascript.info/comparison",target:"_blank",rel:"noopener noreferrer"},P={href:"https://zh.javascript.info/logical-operators",target:"_blank",rel:"noopener noreferrer"},L={href:"https://zh.javascript.info/nullish-coalescing-operator",target:"_blank",rel:"noopener noreferrer"},Y=t(`<h2 id="循环" tabindex="-1"><a class="header-anchor" href="#循环" aria-hidden="true">#</a> 循环</h2><ul><li><p>我们涵盖了 3 种类型的循环：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// 2</span>
<span class="token keyword">do</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>在 <code>for(let...)</code> 循环内部声明的变量，只在该循环内可见。但我们也可以省略 <code>let</code> 并重用已有的变量。</p></li><li><p>指令 <code>break/continue</code> 允许退出整个循环/当前迭代。使用标签来打破嵌套循环。</p></li></ul>`,2),C={href:"https://zh.javascript.info/while-for",target:"_blank",rel:"noopener noreferrer"},D=t(`<p>稍后我们将学习更多类型的循环来处理对象。</p><h2 id="switch-结构" tabindex="-1"><a class="header-anchor" href="#switch-结构" aria-hidden="true">#</a> “switch” 结构</h2><p>“switch” 结构可以替代多个 <code>if</code> 检查。它内部使用 <code>===</code>（严格相等）进行比较。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;Your age?&#39;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">case</span> <span class="token number">18</span><span class="token operator">:</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Won&#39;t work&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// prompt 的结果是一个字符串，而不是数字</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

  <span class="token keyword">case</span> <span class="token string">&quot;18&quot;</span><span class="token operator">:</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;This works!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>

  <span class="token keyword">default</span><span class="token operator">:</span>
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Any value not equal to one above&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),G={href:"https://zh.javascript.info/switch",target:"_blank",rel:"noopener noreferrer"},O=t(`<h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><p>我们介绍了三种在 JavaScript 中创建函数的方式：</p><ol><li><p>函数声明：主代码流中的函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>函数表达式：表达式上下文中的函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>

  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>箭头函数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 表达式在右侧</span>
<span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>

<span class="token comment">// 或带 {...} 的多行语法，此处需要 return：</span>
<span class="token keyword">let</span> <span class="token function-variable function">sum</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 没有参数</span>
<span class="token keyword">let</span> <span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 有一个参数</span>
<span class="token keyword">let</span> <span class="token function-variable function">double</span> <span class="token operator">=</span> <span class="token parameter">n</span> <span class="token operator">=&gt;</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><ul><li>函数可能具有局部变量：在函数内部声明的变量，或在其参数列表中。这类变量只在函数内部可见。</li><li>参数可以有默认值：<code>function sum(a = 1, b = 2) {...}</code>。</li><li>函数总是返回一些东西。如果没有 <code>return</code> 语句，那么返回的结果是 <code>undefined</code>。</li></ul>`,4);function U($,F){const a=p("ExternalLinkIcon");return c(),l("div",null,[r,n("p",null,[s("更多内容："),n("a",d,[s("代码结构"),e(a)]),s("。")]),u,n("p",null,[s("更多内容："),n("a",k,[s('现代模式，"use strict"'),e(a)]),s("。")]),v,n("p",null,[s("更多内容："),n("a",m,[s("变量"),e(a)]),s(" 和 "),n("a",b,[s("数据类型"),e(a)]),s("。")]),h,f,n("ul",null,[n("li",null,[n("p",null,[n("a",g,[_,e(a)])]),w]),n("li",null,[n("p",null,[n("a",j,[y,e(a)])]),q]),n("li",null,[n("p",null,[n("a",x,[z,e(a)])]),W])]),A,n("p",null,[s("更多内容："),n("a",J,[s("交互：alert、prompt 和 confirm"),e(a)]),s("。")]),S,B,n("ul",null,[I,n("li",null,[N,n("p",null,[s("按位运算符在最低位级上操作 32 位的整数：详见 "),n("a",T,[s("文档"),e(a)]),s("。")])]),E]),n("p",null,[s("更多内容："),n("a",V,[s("基础运算符，数学"),e(a)]),s("，"),n("a",H,[s("值的比较"),e(a)]),s("，"),n("a",P,[s("逻辑运算符"),e(a)]),s("，"),n("a",L,[s("空值合并运算符 '??'"),e(a)]),s("。")]),Y,n("p",null,[s("更多内容："),n("a",C,[s("循环：while 和 for"),e(a)]),s("。")]),D,n("p",null,[s("详情请见："),n("a",G,[s('"switch" 语句'),e(a)]),s("。")]),O])}const Q=o(i,[["render",U],["__file","summary.html.vue"]]);export{Q as default};
