import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as r,c as o,a as n,b as a,d as i,e as t}from"./app-3270becb.js";const c={},p=t('<h1 id="gnu家族简介及gdb汇编玩法" tabindex="-1"><a class="header-anchor" href="#gnu家族简介及gdb汇编玩法" aria-hidden="true">#</a> GNU家族简介及GDB汇编玩法</h1><h2 id="gnu" tabindex="-1"><a class="header-anchor" href="#gnu" aria-hidden="true">#</a> GNU</h2><h3 id="gnu是什么" tabindex="-1"><a class="header-anchor" href="#gnu是什么" aria-hidden="true">#</a> GNU是什么？</h3>',3),d={href:"http://www.gnu.org/philosophy/free-sw.html",target:"_blank",rel:"noopener noreferrer"},g={href:"http://www.gnu.org/distros/free-distros.html",target:"_blank",rel:"noopener noreferrer"},h={href:"http://www.gnu.org/#More-GNU",target:"_blank",rel:"noopener noreferrer"},u=n("img",{src:"https://pic.hanjiaming.com.cn/2021/04/05/34cec6fc501ac.jpg",alt:"trisquel9-mate.jpg",title:"trisquel9-mate.jpg"},null,-1),m=n("h3",{id:"gnu-和-linux-的关系",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gnu-和-linux-的关系","aria-hidden":"true"},"#"),a(" GNU 和 Linux 的关系")],-1),b=n("p",null,[n("strong",null,"Linux只是一个操作系统内核而已（不是操作系统），而GNU提供了大量的自由软件来丰富在其之上各种应用程序。")],-1),f=n("p",null,"严格来讲，Linux这个词本身只表示Linux内核（但在实际上人们已经习惯了用Linux来形容 「整个基于Linux内核，并且使用GNU 工程各种工具和数据库的操作系统」）",-1),x=n("p",null,"Linux的历史是和GNU紧密联系在一起的。从1983年开始的GNU计划致力于开发一个自由并且完整的类Unix操作系统，包括软件开发工具和各种应用程序。到1991年Linux内核发布的时候，GNU已经几乎完成了除了系统内核之外的各种必备软件的开发。在Linus Torvalds和其他开发人员的努力下，GNU组件可以运行于Linux内核之上。",-1),G=n("p",null,"Linux确实存在，许多人都在使用它，但它仅仅是所用系统的一部分。Linux是内核：它是为你运行的其他程序分配计算机资源的程序。内核是操作系统的基本部分，但是它自己并无用处；它只能在完整的操作系统框架下才能发挥作用。Linux一般和GNU操作系统一起使用：整个系统基本上就是GNU加上Linux，或叫GNU/Linux。所有被叫做“Linux”的发行版实际上是GNU/Linux发行版。包含 GNU软件 和 Linux内核的软件 被称为 Linux发行版 或 Linux发行套件。",-1),v={href:"http://xn--OpenOffice-lv8rx27o.org",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"绝大多数基于Linux内核的操作系统使用了大量的GNU软件，包括了shell程序、工具、程序库、编译器及工具；还有许多其他程序，例如Emacs。",-1),N=n("p",null,'正是由于Linux使用了许多GNU程序，GNU计划的开创者Richard Stallman博士提议将Linux操作系统改名为GNU/Linux。但有些人只把操作系统叫做"Linux"。有部分Linux套件，包括Debian，采用了“GNU/Linux”的称呼。但大多数商业 Linux套件 依然将操作系统称为Linux。有些人也认为“操作系统”一词指的应该只是系统的内核，其他程序都只能算是应用软件，这么一来，该操作系统的内核应叫Linux，而Linux套件是在Linux内核的基础上加入各种GNU工具。',-1),_={href:"http://www.gnu.org/#mission-statement",target:"_blank",rel:"noopener noreferrer"},U=t(`<p>“自由软件基金会（FSF）是一个非盈利组织。我们的使命是在全球范围内促进计算机用户的自由。我们捍卫所有软件用户的权利。”</p><h2 id="gcc" tabindex="-1"><a class="header-anchor" href="#gcc" aria-hidden="true">#</a> GCC</h2><p>GCC（GNU Compiler Collection，GNU编译器套件）是由GNU开发的编程语言译器。GNU编译器套件包括C、C++、 Objective-C、 Fortran、Java、Ada和Go语言前端，也包括了这些语言的库（如libstdc++，libgcj等） 。</p><p>GCC原本作为GNU操作系统的官方编译器，现已被大多数类Unix操作系统（如Linux、BSD、Mac OS X等）采纳为标准的编译器，GCC同样适用于微软的Windows。GCC是自由软件过程发展中的著名例子，由自由软件基金会以GPL协议发布。</p><p>GCC的初衷是为GNU操作系统专门编写的一款编译器。GNU系统是彻底的自由软件。此处，“自由”的含义是它尊重用户的自由</p><h3 id="gnu-compiler-collection" tabindex="-1"><a class="header-anchor" href="#gnu-compiler-collection" aria-hidden="true">#</a> GNU Compiler Collection</h3><p>GCC原名为GNU C语言编译器（GNU C Compiler），只能处理C语言。但其很快扩展，变得可处理C++，后来又扩展为能够支持更多编程语言，如Fortran、Pascal、Objective -C、Java、Ada、Go以及各类处理器架构上的汇编语言等，所以改名GNU编译器套件（GNU Compiler Collection）</p><p>之后，gcc 有时就被 限定的称为 GNU Compiler Collection 的 c 的编译器；</p><p>所以gcc现在有两个意思。</p><h3 id="g" tabindex="-1"><a class="header-anchor" href="#g" aria-hidden="true">#</a> g++</h3><p>g++ 是 GNU Compiler Collection 的 c++ 的编译器，但是也支持编译c.</p><h3 id="过程模拟" tabindex="-1"><a class="header-anchor" href="#过程模拟" aria-hidden="true">#</a> 过程模拟</h3><p>linux下，gcc 是指gcc c编译器。我们从一个程序到一个可执行文件来说明gcc的几个选项：</p><ul><li>如果你写的代码是hello.c，你的程序将经历下面的步骤到达硬盘或者内存成为可执行文件。</li><li>gcc -E main.c -o main.i //第一步：hello.c（文本）经过预编译生成hello.i（文本）</li><li>gcc -S main.i -o main.S //第二步：hello.i（文本）经过编译器生成hello.s（汇编。文本）</li><li>gcc -c main.c -o main.o //第三步：hello.s（文本）经过汇编器生成hello.o（二进制）。</li><li>gcc main.o -o main //第四步：hello.o（二进制）经过链接器生成hello可执行文件</li></ul><h3 id="部分文件后缀约定" tabindex="-1"><a class="header-anchor" href="#部分文件后缀约定" aria-hidden="true">#</a> 部分文件后缀约定</h3><p>gcc所遵循的部分约定规则：</p><ol><li>c为后缀的文件，C语言源代码文件。</li><li>a为后缀的文件，是由目标文件构成的档案库文件。</li><li>.h为后缀的文件，是程序所包含的头文件。</li><li>.i 为后缀的文件，是C源代码文件且不应该对其执行预处理。</li><li>.m为后缀的文件，是Objective-C源代码文件。</li><li>.o为后缀的文件，是编译后的目标文件。</li><li>.s为后缀的文件，是汇编语言源代码文件。</li></ol><h2 id="gdb" tabindex="-1"><a class="header-anchor" href="#gdb" aria-hidden="true">#</a> GDB</h2><p>GDB: The GNU Project Debugger「GDB：GNU项目调试器」</p><h3 id="什么是-gdb" tabindex="-1"><a class="header-anchor" href="#什么是-gdb" aria-hidden="true">#</a> 什么是 GDB？</h3><p>GDB，<strong>GNU项目调试器</strong>，使您可以查看另一个程序在“执行”期间正在执行的操作–或该程序崩溃时正在执行的操作。</p><p>GDB可以做四种主要的事情（以及支持这些事情的其他事情）来帮助您捕获行为中的错误：</p><ul><li>启动您的程序，并指定可能影响其行为的所有内容。</li><li>使程序在指定条件下停止。</li><li>检查程序停止时发生的情况。</li></ul><p>更改程序中的内容，以便您可以尝试纠正一个错误的影响，然后继续了解另一个错误。这些程序可能与GDB（本机）在同一台计算机上执行，在另一台计算机（远程）上或在模拟器上执行。 GDB可以在大多数流行的UNIX和Microsoft Windows变体以及Mac OS X上运行。</p><h3 id="gdb支持什么语言" tabindex="-1"><a class="header-anchor" href="#gdb支持什么语言" aria-hidden="true">#</a> GDB支持什么语言</h3><p>GDB supports the following languages (in alphabetical order):</p><ul><li>Ada</li><li>Assembly</li><li>C</li><li>C++</li><li>D</li><li>Fortran</li><li>Go</li><li>Objective-C</li><li>OpenCL</li><li>Modula-2</li><li>Pascal</li><li>Rust</li></ul><h3 id="gdb-和-gcc的区别" tabindex="-1"><a class="header-anchor" href="#gdb-和-gcc的区别" aria-hidden="true">#</a> GDB 和 GCC的区别</h3><p>GDB是调试工具，GCC是编译器。</p><h3 id="玩法" tabindex="-1"><a class="header-anchor" href="#玩法" aria-hidden="true">#</a> 玩法</h3><table><thead><tr><th><strong>Objectives</strong></th><th><strong>GDB commands</strong></th></tr></thead><tbody><tr><td>Getting started with a program</td><td>gcc <strong>–g</strong> example.c –O filename<br>g –o example filename<br>gdb example</td></tr><tr><td>Check out the C and assembly code</td><td>list, list 1,24 disas main, disas /m, disas /r</td></tr><tr><td>Display source code and assembly code in independent windows</td><td>Enter split window mode: layout split Set focus: focus src, focus asm Exit the mode: Ctrl-X a</td></tr><tr><td>Insert a break point And run the program</td><td>b function_name/line_number run</td></tr><tr><td>Execute the c code step by step</td><td>next/n</td></tr><tr><td>Execute the assembly code step by step</td><td>nexti/ni</td></tr><tr><td>Check out the CPU registers with values</td><td>info registers, info registers eflags/rax…</td></tr><tr><td>Watch the value of a variable</td><td>print var</td></tr><tr><td>Examine memory with an address</td><td>x /d $regname</td></tr></tbody></table><ul><li><p>实验环境 Centos Linux 7.2</p></li><li><p>编译器：gcc（未安装使用以下命令安装）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> gcc gcc-c++
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>调试器：gdb （未安装使用以下命令安装）</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>yum <span class="token function">install</span> gdb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>实验文件：example.c</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">long</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    b <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> <span class="token operator">*</span>pa<span class="token punctuation">,</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span>
    pa <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span>
    pb <span class="token operator">=</span> <span class="token operator">&amp;</span>b<span class="token punctuation">;</span>

    <span class="token keyword">long</span> t1 <span class="token operator">=</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span>
    <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token operator">*</span>pb<span class="token punctuation">;</span>
    <span class="token operator">*</span>pb <span class="token operator">=</span> t1<span class="token punctuation">;</span>

    <span class="token keyword">return</span> t1 <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h4 id="get-start-with-a-program" tabindex="-1"><a class="header-anchor" href="#get-start-with-a-program" aria-hidden="true">#</a> Get start with a program</h4><p>如果你想直接编译program而不debug，使用 <code>gcc example.c –o filename</code></p><p>此时我将filename 改为 examp</p><p>如果后续你想要使用gdb 对 program 进行debug, 使用 <code>gcc -g example.c –o filename</code></p><p>此时我将filename 改为 example</p><p>使用 <code>ls-al</code> 查看当前文件夹下的情况</p><img src="https://pic.hanjiaming.com.cn/2021/04/05/f2d0a56dd78b8.png" alt="image.png" title="image.png"><p>可以发现 带有 -g 参数的 生成的可执行程序大小 大于 不带 -g 参数的。</p><h4 id="查看汇编操作" tabindex="-1"><a class="header-anchor" href="#查看汇编操作" aria-hidden="true">#</a> 查看汇编操作</h4><ol><li><p>使用<code>gdb</code>进入调试页面,使用<code>quit</code>退出。</p></li><li><p>使用 <code>gdb example </code>进入对 example 的调试页面</p></li><li><p>进入后 使用 <code>list</code> 显示 源代码</p><img src="https://pic.hanjiaming.com.cn/2021/04/05/fa7faacd9415d.png" alt="image.png" title="image.png"></li><li><p>使用 <code>contral + L</code>清屏进入新页面</p></li><li><p>使用 disassemble functionName 或 disas functionName 查看指定函数对应的汇编代码；</p><img src="https://pic.hanjiaming.com.cn/2021/04/05/49a44f64bc2cf.png" alt="image.png" title="image.png"></li><li><p>使用 disas /m functionName 查看一一对应版本</p><img src="https://pic.hanjiaming.com.cn/2021/04/05/2c9b7638f8f33.png" alt="image.png" title="image.png"></li><li><p>使用 dis /r functionName</p><img src="https://pic.hanjiaming.com.cn/2021/04/05/6bedf838f3cc7.png" alt="image.png" title="image.png"></li><li><p>使用 layout split</p><img src="https://pic.hanjiaming.com.cn/2021/04/05/42b8dbed6798a.png" alt="image.png" title="image.png"><p>使用 focus asm 和 focus src 来切换聚焦</p></li></ol><h4 id="调试操作" tabindex="-1"><a class="header-anchor" href="#调试操作" aria-hidden="true">#</a> 调试操作</h4><ol><li><p>使用 start 开始 debug</p><img src="https://pic.hanjiaming.com.cn/2021/04/05/d8e5dc1db54ee.png" alt="image.png" title="image.png"></li><li><p>使用 next 查看下一段</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/606c365e68609.png" alt="image.png" title="image.png"></li><li><p>使用 disas main 可查看停在了哪里</p><img src="https://pic.hanjiaming.com.cn/2021/04/06/7bae01a31eec5.png" alt="image.png" title="image.png"></li><li><p>nexti<br><img src="https://pic.hanjiaming.com.cn/2021/04/06/74cea3fca9bc6.png" alt="image.png" title="image.png"></p></li><li><p>使用 info register 或 info reg查看当前寄存器中的值<br><img src="https://pic.hanjiaming.com.cn/2021/04/06/c274117cb4819.png" alt="image.png" title="image.png"></p></li><li><p>使用 info all-register 可查看 CPU所有寄存器的当前值</p></li><li><p>使用 info b 可查看 当前程序设定的断点「breakpoint」</p></li><li><p>使用 b main ，在main函数头处打断点（即设定第一次停止的地方，此后每运行一个语句都会停止。）</p></li><li><p>使用 run 开始 debug</p></li><li><p>使用print variableName 查看相应变量的当前的值</p></li></ol><img src="https://pic.hanjiaming.com.cn/2021/04/06/c274117cb4819.png" alt="image.png" title="image.png"><ol start="11"><li><img src="https://pic.hanjiaming.com.cn/2021/04/06/22573de80ecfc.png" alt="image.png" title="image.png"></li></ol><h2 id="引用材料" tabindex="-1"><a class="header-anchor" href="#引用材料" aria-hidden="true">#</a> 引用材料</h2>`,47),C={href:"http://www.gnu.org/software/gdb",target:"_blank",rel:"noopener noreferrer"},w={href:"http://www.gnu.org/",target:"_blank",rel:"noopener noreferrer"},L=n("li",null,"COMP1411@PolyU lec6 PowerPoint",-1);function j(y,D){const e=l("ExternalLinkIcon");return r(),o("div",null,[p,n("p",null,[a("GNU是一个"),n("a",d,[a("自由软件"),i(e)]),a("操作系统—就是说，它尊重其使用者的自由。GNU操作系统包括GNU软件包（专门由GNU工程发布的程序）和由第三方发布的自由软件。GNU的开发使你能够使用电脑而无需安装可能会侵害你自由的软件。")]),n("p",null,[a("我们建议安装"),n("a",g,[a("这些GNU版本"),i(e)]),a("（更确切地说是，GNU/Linux发行版），它们完全是自由软件。"),n("a",h,[a("更多关于 GNU"),i(e)]),a("。")]),u,m,b,f,x,G,n("p",null,[a("一般来讲，一个Linux发行套件 包含大量的软件，比如软件开发工具，数据库，Web服务器（例如Apache)，X Window，桌面环境（比如GNOME和KDE），办公套件（"),n("a",v,[a("比如OpenOffice.org"),i(e)]),a("）······")]),k,N,n("p",null,[a("GNU操作系统 由"),n("a",_,[a("自由软件基金会"),i(e)]),a("资助。")]),U,n("ul",null,[n("li",null,[n("a",C,[a("www.gnu.org/software/gdb"),i(e)])]),n("li",null,[n("a",w,[a("http://www.gnu.org/"),i(e)])]),L])])}const E=s(c,[["render",j],["__file","gnu-gdb-std.html.vue"]]);export{E as default};
