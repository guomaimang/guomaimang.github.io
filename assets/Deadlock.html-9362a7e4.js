import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,e as t}from"./app-0df2b16c.js";const i={},o=t('<h1 id="deadlock" tabindex="-1"><a class="header-anchor" href="#deadlock" aria-hidden="true">#</a> Deadlock</h1><p>用一个看起来类似的案例来比较 Deadlock。两个人正向对方走去，几乎相撞。两人都看到他们要撞上对方，都试图通过转向道路的一边来避免。会发生什么呢？他们俩会再次相撞。所以他们又做了一个动作来避免。在一个不幸运的情况下，当两个人总是做错动作时，他们最终会花时间去尝试其他的路线，但不成功。我们称这种情况为 Deadlock。</p><p>死锁是一组阻塞进程，每个过程都包含资源并等待在集合中获取由另一个进程所持持有的资源。<br> 如果它正在等待当前由另一个进程持有的资源，则会阻止进程。 我们称之为这个资源僵局，这也是本文讨论的重点。</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>Consider two processes P<strong>1</strong> and P<strong>2</strong> communicating via pipes.</p><ul><li>P<strong>1</strong>: read(fd2to1[0], b1, 80); write(fd1to2[1], b1, strlen(b1));</li><li>P<strong>2</strong>: read(fd1to2[0], b2, 80); write(fd2to1[1], b2, strlen(b2));</li></ul><p>Both processes will wait to read from the pipe before each goes ahead to write into the pipe.</p><h2 id="resource-model" tabindex="-1"><a class="header-anchor" href="#resource-model" aria-hidden="true">#</a> Resource Model</h2><h3 id="资源是能够被使用的对象" tabindex="-1"><a class="header-anchor" href="#资源是能够被使用的对象" aria-hidden="true">#</a> 资源是能够被使用的对象</h3><ul><li>一个进程通过打开文件并获得 opening the file 且 gets the file <strong>pointer or file descriptor</strong>. 来使用一个文件</li><li>一个进程通过<code>malloc()</code>获得一个内存块</li><li>一个进程通过<strong>系统调用设备驱动程序</strong>来使用I/O设备。</li></ul><h3 id="steps-to-use-a-resource" tabindex="-1"><a class="header-anchor" href="#steps-to-use-a-resource" aria-hidden="true">#</a> Steps to use a resource</h3><ul><li><strong>Request</strong> for the resource (acquire or open).</li><li><strong>Wait until</strong> the resource is allocated or granted.</li><li><strong>Wait</strong> until the resource is allocated or granted.</li><li><strong>Release</strong> the resource (return or close).</li></ul><p>资源只能由一个进程使用，在它向资源管理器发出请求之后，管理器批准其用量（grant the resource）。</p><h3 id="resources-can-be-grouped-into-types" tabindex="-1"><a class="header-anchor" href="#resources-can-be-grouped-into-types" aria-hidden="true">#</a> Resources can be grouped into types</h3><ul><li>There are m types of resources: R<strong>1</strong>, R<strong>2</strong>, . . ., R<strong>m</strong>.</li><li>Each resource type R<strong>i</strong> has W<strong>i</strong> copies (or W<strong>i</strong> instances).</li></ul><p>For example, there may be 10 shared buffers, 80 physical memory frames, and 4 worker threads in the thread pool.</p><h2 id="deadlock-characterization" tabindex="-1"><a class="header-anchor" href="#deadlock-characterization" aria-hidden="true">#</a> Deadlock Characterization</h2><ul><li>Mutual exclusion (相互排斥) <ul><li>Only one process at a time can use a resource.</li></ul></li><li>Hold and wait <ul><li>持有至少一个资源的过程正在等待获取由其他进程所持持的额外资源。</li></ul></li><li>No preemption （无法抢占） <ul><li>在该过程完成任务之后，只能通过持有该过程的流程<strong>自愿</strong>释放资源。</li></ul></li><li>Circular wait（循环等待）</li></ul><h2 id="resource-allocation-graph" tabindex="-1"><a class="header-anchor" href="#resource-allocation-graph" aria-hidden="true">#</a> Resource Allocation Graph</h2><p>A resource allocation graph has a set of vertices V and a set of edges E. 「资源分配图具有一组顶点V和一组边缘。」</p><p>There are two types of vertices V:</p><ul><li><p><code>P = {P1, P2, …, Pn}</code> is the set of all processes.</p></li><li><p><code>R = {R1, R2, …, Rm}</code> is the set of all resource types.</p></li><li><p><code>Pi -&gt; Rj</code> means that Pi is requesting for resource Rj.</p></li><li><p><code>Rj -&gt; Pi</code> means that Rj is allocated/assigned to Pi, which holds the resource.</p></li></ul><h3 id="quick-rules-of-thumb" tabindex="-1"><a class="header-anchor" href="#quick-rules-of-thumb" aria-hidden="true">#</a> Quick rules of thumb</h3><ul><li>如果图表不包含循环，那么绝对没有死锁。</li><li>如果每个资源类型只有一个实例，那么循环意味着存在死锁。</li><li>如果每个资源类型有几个实例，那么循环只意味着有可能出现死锁。</li></ul><h3 id="algorithm" tabindex="-1"><a class="header-anchor" href="#algorithm" aria-hidden="true">#</a> Algorithm</h3><p>在分配资源之前，操作系统检查分配是否会导致循环。如果产生了循环，就不要分配资源。只有在将请求边转换为分配边不会导致资源分配图的循环时，才能批准对资源的请求。</p><h2 id="deadlock-handling" tabindex="-1"><a class="header-anchor" href="#deadlock-handling" aria-hidden="true">#</a> Deadlock Handling</h2><ul><li>Ostrich approach: Ignore the deadlock problem and pretend that deadlocks never occur in the system.</li><li>Deadlock prevention: Ensure that the system will never enter a deadlock state.</li><li>Deadlock avoidance: Allocate the resources very carefully so that system will not enter a deadlock state.</li><li>Deadlock detection: <strong>Allow the system to enter a deadlock state</strong>, detect it and then recover from it.</li></ul><p>Banker’s Algorithm is an algorithm for multiple instances of resource types.</p><figure><img src="https://pic.hanjiaming.com.cn/2022/04/30/814df4211d97f.png" alt="1651327864401.png" tabindex="0" loading="lazy"><figcaption>1651327864401.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/04/30/814df4211d97f.png" alt="1651327864401.png" tabindex="0" loading="lazy"><figcaption>1651327864401.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/04/30/8bdf625f119f4.png" alt="CleanShot 2022-04-30 at 22.11.32@2x.png" tabindex="0" loading="lazy"><figcaption>CleanShot 2022-04-30 at 22.11.32@2x.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/04/30/441d19cdbda78.png" alt="1651327932793.png" tabindex="0" loading="lazy"><figcaption>1651327932793.png</figcaption></figure>',33),l=[o];function s(n,c){return a(),r("div",null,l)}const p=e(i,[["render",s],["__file","Deadlock.html.vue"]]);export{p as default};
