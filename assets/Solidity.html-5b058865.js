import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as i,c as l,a as n,b as o,d as p,e as s}from"./app-ae05e74e.js";const c={},u=s(`<h1 id="solidity" tabindex="-1"><a class="header-anchor" href="#solidity" aria-hidden="true">#</a> Solidity</h1><h2 id="evm" tabindex="-1"><a class="header-anchor" href="#evm" aria-hidden="true">#</a> EVM</h2><p>「Ethereum Virtual Machine」</p><h3 id="runtime-environment" tabindex="-1"><a class="header-anchor" href="#runtime-environment" aria-hidden="true">#</a> Runtime environment</h3><p>以太坊智能合约的运行时环境：EVM是以太坊智能合约的运行时环境，负责执行和管理智能合约。</p><ul><li>Stack-based (1024 depth, 256-bit word), &quot;gas&quot; for operations <ul><li>EVM使用一个深度为1024的堆栈，每个堆栈单元为256位来执行操作。</li><li>操作的&quot;燃料&quot;：每个操作都需要消耗一定量的Gas，以防止资源滥用。</li></ul></li><li>Consistently execute「持续执行」 across the Ethereum nodes<br> EVM确保智能合约在所有以太坊节点上以一致的方式执行，保持网络一致性。</li><li>Updates old state with new transactions「用新交易更新旧状态」<br> 每次交易都会引起状态的更新，EVM负责执行交易并更新全网的状态。</li><li>EVM有多种实现方式，如 geth（Go语言）、Py-EVM（Python）、evmone（C++）和 ethereumjs-vm（JavaScript）。</li></ul><h3 id="life-cycle" tabindex="-1"><a class="header-anchor" href="#life-cycle" aria-hidden="true">#</a> Life Cycle</h3><p>智能合约生命周期（与比特币中的 UTXO 相比）: 智能合约有其生命周期，包括创建、执行和完成。</p><ul><li>Creation: deploy the contract (e.g., coinbase -&gt; some address)<br> 「部署合约（例如，从coinbase地址到某个地址）」</li><li>Execute: Evaluates the calls to the contract (e.g., witness to spend a UTXO)<br> 「评估对合约的调用（例如，见证花费一个UTXO）」</li><li>Confirm a change has made<br> 「确认已进行的更改」</li><li>A contract can &quot;SELFDESTRUCT&quot; if set (cannot be called, but past data remain)<br> 「如果设置，合约可以&quot;自毁&quot;（不能被调用，但过去的数据仍然保留）」</li></ul><h3 id="evm-structure" tabindex="-1"><a class="header-anchor" href="#evm-structure" aria-hidden="true">#</a> EVM Structure</h3><figure><img src="https://pic.hanjiaming.com.cn/2024/10/11/a5227d9a9f815.png" alt="1728612780496.png" tabindex="0" loading="lazy"><figcaption>1728612780496.png</figcaption></figure><h4 id="世界状态-world-state" tabindex="-1"><a class="header-anchor" href="#世界状态-world-state" aria-hidden="true">#</a> 世界状态（World State）</h4><ul><li><strong>World state σt 和 σt+1</strong>: 这是以太坊区块链在不同时间点的状态。每个状态包含多个账户，每个账户有自己的状态信息。</li><li><strong>Address N</strong>: 这是账户的地址。</li><li><strong>Account state N</strong>: 这是账户的状态，包括账户的代码和存储。</li><li><strong>Code</strong>: 账户的代码，通常是智能合约代码。</li><li><strong>Storage</strong>: 账户的存储，是一个持久化的键值存储。</li></ul><h4 id="交易和消息调用" tabindex="-1"><a class="header-anchor" href="#交易和消息调用" aria-hidden="true">#</a> 交易和消息调用</h4><ul><li>Input data: 这是交易或消息调用的输入数据，它会影响到EVM的执行。</li><li>**从 σt 到 σt+1 **: 交易或消息调用会导致世界状态从 σt 变化到 σt+1。</li></ul><h4 id="以太坊虚拟机" tabindex="-1"><a class="header-anchor" href="#以太坊虚拟机" aria-hidden="true">#</a> 以太坊虚拟机</h4><ul><li><strong>EVM</strong>: 以太坊虚拟机负责执行智能合约代码。EVM接收输入数据和当前的世界状态，并执行代码，最终更新世界状态。</li><li><strong>Virtual ROM</strong>: 虚拟只读存储器，包含不可变的EVM代码。</li><li><strong>Program counter (PC)</strong>: 程序计数器，指示当前执行到哪一行代码。</li><li><strong>Gas available (Gas)</strong>: 执行代码时消耗的Gas，用于防止无限循环和滥用资源。</li><li><strong>Stack</strong>: 堆栈内存，用于临时存储数据。每个堆栈元素是256位，堆栈深度为1024。</li><li><strong>Memory</strong>: 易失性内存，按字节寻址的线性内存。</li><li><strong>(Account) storage</strong>: 持久化存储，是256位到256位的键值存储。</li></ul><h4 id="状态和存储" tabindex="-1"><a class="header-anchor" href="#状态和存储" aria-hidden="true">#</a> 状态和存储</h4><ul><li><strong>Machine state μ</strong>: 机器状态，包括程序计数器、Gas、堆栈和内存，这些都是易失性的。</li><li><strong>World state σ</strong>: 世界状态，是持久化的，包括账户的存储。</li></ul><h4 id="数据流和状态更新" tabindex="-1"><a class="header-anchor" href="#数据流和状态更新" aria-hidden="true">#</a> 数据流和状态更新</h4><ul><li><strong>红色箭头</strong>: 表示数据和状态从世界状态流向EVM，然后EVM执行并更新世界状态。</li><li><strong>蓝色箭头</strong>: 表示输入数据流向EVM，并参与执行过程。</li></ul><h2 id="solidity-language" tabindex="-1"><a class="header-anchor" href="#solidity-language" aria-hidden="true">#</a> Solidity Language</h2><p>Solidity是一种面向合约的高级编程语言「A contract-oriented, high-level language」。</p><ul><li>面向合约意味着它专门用于编写和部署智能合约。</li><li>高级编程语言意味着它提供了抽象和高级功能，使得编程更加简洁和易于理解。</li></ul><p>Solidity代码被编译成以太坊虚拟机（EVM）可以理解的字节码，然后在EVM上运行。EVM是一个图灵完备的虚拟机，负责执行以太坊网络上的智能合约。</p><ul><li>Solidity是一种静态类型语言，这意味着在编译时就需要确定所有变量的类型。</li><li>Yul: language that can be compiled to bytecode for different backends (&quot;Assembly&quot;)<br> 「Yul：可编译成字节码用于不同后端（&quot;汇编&quot;）的语言」<br> Yul是一种中间语言，可以编译成不同后端的字节码，包括EVM的汇编代码。它为优化和跨平台兼容提供了灵活性。</li><li>Solidity的语法和特性受到了C++、Python和JavaScript的影响。例如，它借鉴了C++的静态类型系统、Python的简洁语法和JavaScript的控制结构。</li><li>Solidity专门设计用于以太坊虚拟机（EVM），确保编写的智能合约能够在EVM上高效运行。</li><li>Solidity是一种面向对象的编程语言，支持类和对象的概念。它支持多重继承、库和复杂的用户定义类型等特性</li><li>Solidity支持多重继承和多态性，允许一个合约继承多个其他合约的特性。它还支持库和复杂的用户定义类型，使得代码复用和模块化更加方便。</li><li>Solidity的控制结构与JavaScript非常相似，包括if、else、while、do、for、break、continue、return、三元运算符（? :）等，但不支持switch和goto语句。</li></ul><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.26</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
		<span class="token builtin">string</span> <span class="token keyword">public</span> greet <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Example</summary><p>Example 1</p><p>我们需要创建一个智能合约，允许用户投票给多个候选人，并且在投票结束后能够统计每个候选人的票数。</p><ul><li>我们需要一个数据结构来存储候选人和他们的票数。</li><li>需要一个函数来投票，并确保每个用户只能投票一次。</li><li>需要一个函数来统计每个候选人的票数。</li></ul><p>Solidity作为一种面向合约的语言，非常适合编写这种需要自动执行和不可篡改的投票系统。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Voting</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">Candidate</span> <span class="token punctuation">{</span>
        <span class="token builtin">string</span> name<span class="token punctuation">;</span>
        <span class="token builtin">uint</span> voteCount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token keyword">public</span> hasVoted<span class="token punctuation">;</span>
    Candidate<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> candidates<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidateNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            candidates<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Candidate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                name<span class="token punctuation">:</span> candidateNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
                voteCount<span class="token punctuation">:</span> <span class="token number">0</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token builtin">uint</span> candidateIndex<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">!</span>hasVoted<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;You have already voted.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>candidateIndex <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">&quot;Invalid candidate index.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        hasVoted<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        candidates<span class="token punctuation">[</span>candidateIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>voteCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">getCandidate</span><span class="token punctuation">(</span><span class="token builtin">uint</span> index<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> name<span class="token punctuation">,</span> <span class="token builtin">uint</span> voteCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">&quot;Invalid candidate index.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Candidate <span class="token keyword">storage</span> candidate <span class="token operator">=</span> candidates<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>candidate<span class="token punctuation">.</span>name<span class="token punctuation">,</span> candidate<span class="token punctuation">.</span>voteCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example 2</p><p>假设我们要创建一个简单的智能合约，用于记录和修改一个人的姓名和年龄。</p><ul><li>我们需要一个合约来存储姓名和年龄，这些信息将作为状态变量。</li><li>我们还需要两个函数：一个用于设置姓名和年龄，另一个用于获取这些信息。</li></ul><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token comment">// 状态变量</span>
    <span class="token comment">// private 关键字表示这些变量只能在合约的内部访问，外部无法直接访问这些变量。</span>
    <span class="token builtin">string</span> <span class="token keyword">private</span> name<span class="token punctuation">;</span>
    <span class="token builtin">uint</span> <span class="token keyword">private</span> age<span class="token punctuation">;</span>

    <span class="token comment">// 事件</span>
    <span class="token comment">// 事件是 Solidity 中的一种机制，用于记录日志信息，外部应用程序可以监听这些事件。</span>
    <span class="token keyword">event</span> <span class="token function">NameChanged</span><span class="token punctuation">(</span><span class="token builtin">string</span> newName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">event</span> <span class="token function">AgeChanged</span><span class="token punctuation">(</span><span class="token builtin">uint</span> newAge<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置姓名和年龄的函数</span>
    <span class="token comment">// public 关键字表示这个函数可以被外部调用。</span>
    <span class="token comment">// 在 Solidity 中，memory 关键字用于指定变量的存储位置。</span>
    <span class="token comment">// string memory _name 表示该函数接受一个字符串类型的参数 _name，并且该字符串被存储在内存（memory）中。</span>
    <span class="token comment">// 这是与 storage 相对的，storage 变量是永久存储在区块链上的状态变量。</span>
    <span class="token keyword">function</span> <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _name<span class="token punctuation">,</span> <span class="token builtin">uint</span> _age<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>
        age <span class="token operator">=</span> _age<span class="token punctuation">;</span>
        <span class="token comment">// 使用 emit 关键字触发 NameChanged 和 AgeChanged 事件，记录姓名和年龄的变化。</span>
        <span class="token keyword">emit</span> <span class="token function">NameChanged</span><span class="token punctuation">(</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">emit</span> <span class="token function">AgeChanged</span><span class="token punctuation">(</span>_age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取姓名和年龄的函数</span>
    <span class="token comment">// view 关键字表示这个函数不会修改合约的状态，只是读取状态变量。</span>
    <span class="token keyword">function</span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">,</span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个合约可以用来存储和更新一个人的姓名和年龄，并在每次更新时记录相应的日志信息。</p></details><h2 id="structure" tabindex="-1"><a class="header-anchor" href="#structure" aria-hidden="true">#</a> Structure</h2><p>Solidity中的合约类似于面向对象编程（OOP）中的类。</p><ul><li>类是OOP中的一个核心概念，它是对象的蓝图或模板，定义了对象的属性和行为</li><li>同样，Solidity中的合约定义了合约的状态变量、函数和其他组件。</li></ul><p>每个Solidity合约可以包含以下声明：</p><ul><li><strong>State Variables（状态变量）</strong>：存储在区块链上的数据。 <ul><li>在 Solidity 中，全局变量也称为状态变量（state variables），它们存储在区块链的状态中。</li><li>状态变量在合约的所有函数中都是可见的，并且它们的值会永久存储在区块链上，直到被显式修改。</li><li>合约之间的交易导致状态改变</li><li>区块链存储每个合约的最新状态</li></ul></li><li><strong>Functions（函数）</strong>：执行特定任务的代码块。</li><li><strong>Function Modifiers（函数修饰符）</strong>：用于修改函数的行为。</li><li><strong>Events（事件）</strong>：用于在区块链上记录活动。</li><li><strong>Struct Types（结构体类型）</strong>：自定义数据类型，可以包含多个不同类型的变量。</li><li><strong>Enum Types（枚举类型）</strong>：定义一组命名常量。</li></ul><p>Solidity支持继承，这意味着一个合约可以从另一个合约继承属性和行为。通过继承，可以重用代码并创建更复杂的合约结构。</p><h2 id="basics" tabindex="-1"><a class="header-anchor" href="#basics" aria-hidden="true">#</a> Basics</h2><h3 id="constructor-and-state-variable" tabindex="-1"><a class="header-anchor" href="#constructor-and-state-variable" aria-hidden="true">#</a> Constructor and State Variable</h3><p>构造函数是在合约创建时执行的函数，您可以在其中运行合约的初始化代码。Solidity支持多重继承，因此一个合约可以从多个父合约继承。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// 这个合约定义了一个简单的存储结构，使用枚举类型 State 来表示状态，并在合约部署时将状态初始化为 On。</span>
<span class="token keyword">contract</span> <span class="token class-name">SimpleStorage</span> <span class="token punctuation">{</span>

    <span class="token comment">// 这行定义了一个枚举 State，它有两个可能的值：On 和 Off。</span>
    <span class="token comment">// 枚举是一种数据类型，允许变量有一组预定义的常量值。</span>
		<span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>On<span class="token punctuation">,</span> Off<span class="token punctuation">}</span>
		
		State <span class="token keyword">public</span> storedData<span class="token punctuation">;</span>
		
<span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    storedData <span class="token operator">=</span> State<span class="token punctuation">.</span>On<span class="token punctuation">;</span> <span class="token comment">// default</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="data-location" tabindex="-1"><a class="header-anchor" href="#data-location" aria-hidden="true">#</a> Data Location</h3><p>数据位置是指在智能合约中数据的存储位置，主要包括 storage、memory和calldata 三种。了解区别有助于优化智能合约的性能和成本。</p><ul><li>存储（storage）是默认的数据位置，用于存储状态变量，这些变量在合约的整个生命周期内存在，并且数据存储在链上。</li><li>内存（memory）是临时的数据存储位置，其生命周期仅限于外部函数调用期间，数据不会存储在链上。</li><li>调用数据（calldata）与内存相似，但不可修改，存储在“特殊位置”，主要用于存储函数参数（例如，外部调用时），数据不会存储在链上。</li></ul><p>Assignment behavior</p><p>赋值行为是指在不同数据位置之间进行数据赋值时的具体操作方式。</p><p><strong>Storage &lt;&gt; memory (or calldata -&gt; memory): 会创建数据的副本，而不是引用</strong></p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> storageArray<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">storageToMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从存储到内存，创建副本</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> memoryArray <span class="token operator">=</span> storageArray<span class="token punctuation">;</span> 
        <span class="token keyword">return</span> memoryArray<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">calldataToMemory</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">calldata</span> inputArray<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从调用数据到内存，创建副本</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> memoryArray <span class="token operator">=</span> inputArray<span class="token punctuation">;</span> 
        <span class="token keyword">return</span> memoryArray<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>memory -&gt; memory : 赋值的是引用，而不是创建副本</strong></p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">memoryToMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        array1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        array1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        array1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

				<span class="token comment">// 内存到内存，赋值的是引用</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> array2 <span class="token operator">=</span> array1<span class="token punctuation">;</span> 

        array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> array1<span class="token punctuation">;</span> <span class="token comment">// 返回 [10, 2, 3]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>storage -&gt; local storage (in a function)</strong> 赋值的是引用</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> storageArray<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">storageToLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
    		<span class="token comment">// 存储到局部存储，赋值的是引用</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">storage</span> localStorageArray <span class="token operator">=</span> storageArray<span class="token punctuation">;</span> 

        localStorageArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        localStorageArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        localStorageArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">getStorageArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> storageArray<span class="token punctuation">;</span> <span class="token comment">// 返回 [1, 2, 3]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在其他情况下，赋值到存储位置时会创建数据的副本。</p><h4 id="状态变量" tabindex="-1"><a class="header-anchor" href="#状态变量" aria-hidden="true">#</a> 状态变量</h4><ul><li><strong>默认存储位置是 <code>storage</code></strong></li><li>合约中的 <code>name</code> 和 <code>age</code> 状态变量默认存储在 <code>storage</code> 中，因为它们是合约的一部分</li></ul><h4 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h4><p>对于引用类型（如 <code>string</code>、<code>bytes</code>、<code>struct</code>、<code>array</code>），必须明确指定 <code>memory</code> 或 <code>calldata</code>，否则编译器会报错。</p><p>在函数参数中，如果没有指定存储位置，编译器会报错。例如，如果你省略 <code>memory</code>，如下代码将无法编译。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function setPerson(string _name, uint _age) public {
    // 编译器会报错，因为 _name 的存储位置未指定
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h4><p>局部变量的默认存储位置取决于变量的类型。</p><ul><li>对于值类型（如 uint, int, bool 等），局部变量默认存储在内存中。</li><li>而对于引用类型（如 string, bytes, array, struct 等），局部变量的默认存储位置是 storage</li></ul><p>但是在大多数情况下，你需要显式地指定它们的存储位置。你通常会希望它们存储在 <code>memory</code> 中。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function example() public {
    string memory localString = &quot;Hello&quot;;
    // localString 被存储在内存中
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="types" tabindex="-1"><a class="header-anchor" href="#types" aria-hidden="true">#</a> Types</h2><p>在编译时需要指定变量的类型（状态变量和局部变量）。</p><p>几种基本类型可以组合形成复杂类型。</p><p>Value Types</p><ul><li>布尔型（boolean {true, false}）；操作符：!（非），&amp;&amp;（与），||（或），==（等于），!=（不等于）。</li><li>整数（例如，int/uint：有符号和无符号整数）</li><li>地址（20字节值，以太坊地址的大小），可支付</li><li>balance; transfer(); send(); call(), <s>callcode()</s>, delegatecall();</li><li>Enum</li><li>user-defined value types (type myType is uint256)</li><li>function, ...</li></ul><h3 id="fixed-size-byte-arrays" tabindex="-1"><a class="header-anchor" href="#fixed-size-byte-arrays" aria-hidden="true">#</a> Fixed-size (byte) arrays</h3><ul><li>固定大小数组的长度在编译时确定，不能在运行时改变。</li><li><strong>声明方式</strong>：固定大小数组在声明时需要指定长度。例如：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>uint[10] public fixedArray;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>Bytes数组</p><p>在 Solidity 中，<code>bytes</code> 类型是一种特殊的动态大小数组，用于存储任意长度的字节序列。<code>bytes</code> 类型实际上是 <code>byte[]</code> 的别名，但它的实现更高效。相对的，<code>bytes1</code> 到 <code>bytes32</code> 是固定大小的字节数组。</p><ul><li>bytes1, bytes2, ..., bytes32 (x in {1..32}, read-only field: .length = x)</li><li>length, push(); pop() (since 0.5.4)</li><li>可以通过索引访问数组元素，但不能获取数组的长度，因为长度是已知的固定值</li></ul><h3 id="dynamically-sized-array" tabindex="-1"><a class="header-anchor" href="#dynamically-sized-array" aria-hidden="true">#</a> Dynamically-sized array</h3><ul><li><strong>大小可变</strong>：动态大小数组的长度可以在运行时改变。你可以添加或删除元素。</li><li><strong>声明方式</strong>：动态大小数组在声明时不需要指定长度。例如：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>uint[] public dynamicArray;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>存储方式</strong>：动态大小数组可以存储在合约的存储（storage）中，也可以存储在内存（memory）中。</li><li><strong>访问</strong>：可以通过索引访问数组元素，并且可以获取数组的长度</li></ul><h3 id="reference-type" tabindex="-1"><a class="header-anchor" href="#reference-type" aria-hidden="true">#</a> Reference Type</h3><p>Data Location is needed except declared directly under Contract<br> 「除非直接在合约下声明，否则需要数据位置。」</p><h3 id="mappings" tabindex="-1"><a class="header-anchor" href="#mappings" aria-hidden="true">#</a> Mappings</h3><p><code>mapping (KeyType KeyName? =&gt; ValueType ValueName?) </code> [in Storage only]</p><ul><li>类似于存储键值对的哈希表（数据位置：存储）。</li><li>key 类型：不允许用户定义或复杂类型，如映射、结构体或数组。</li><li>value 类型可以是任何类型，包括映射。</li><li>不可迭代，不同于Python/JavaScript/...；但可以实现它。</li></ul><h3 id="structs" tabindex="-1"><a class="header-anchor" href="#structs" aria-hidden="true">#</a> Structs</h3><p>C-like syntax</p><h2 id="special-about-type" tabindex="-1"><a class="header-anchor" href="#special-about-type" aria-hidden="true">#</a> Special about Type</h2><p>在以太坊中，数据类型的选择会影响智能合约之间的交互和Gas的消耗。</p><ul><li>特别是需要注意内存（memory）和调用数据（calldata）之间的区别。 <ul><li>内存是临时的存储空间，费用较低</li><li>而调用数据是只读的，用于函数参数传递，费用也较低。</li></ul></li><li>直接将其他编程语言中的算法翻译成Solidity代码可能会遇到问题 <ul><li>因为Solidity有其特定的限制和特性。</li><li>例如，Solidity中的运算可能会导致意外的成本增加和错误（如无符号整型的溢出问题）。</li></ul></li><li>其他合约也可以预先确定数组的大小。这意味着在设计合约时，可以通过定义固定大小的数组来优化数据存储和传输。</li><li>与字符串相比，字节（bytes）消耗更少的Gas。因此，在将数据传递给另一个合约时，可以考虑将字符串转换为字节以节省Gas。</li><li>还有一些类型（如固定点数和无符号固定点数）尚未完全支持。这些类型用于表示具有不同大小的有符号或无符号固定点数。</li></ul><details class="hint-container details"><summary>Example</summary><p>定义一个函数，将字符串转换为字节：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">stringToBytes</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> str<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在合约之间传递字节数据：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">sendDataToOtherContract</span><span class="token punctuation">(</span><span class="token builtin">address</span> contractAddress<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token keyword">memory</span> name<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
    <span class="token builtin">bytes</span> <span class="token keyword">memory</span> nameBytes <span class="token operator">=</span> <span class="token function">stringToBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OtherContract</span><span class="token punctuation">(</span>contractAddress<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">receiveData</span><span class="token punctuation">(</span>nameBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收合约中的函数：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">contract</span> <span class="token class-name">OtherContract</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">receiveData</span><span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span> name<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理接收到的数据</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><div class="hint-container warning"><p class="hint-container-title">Integer Overflow/Underflow</p><p>Solidity 可以处理最大256位的数字（最大值为 2^256 -1），因此，如果再增加1，数值将回绕到0。这指的是 Solidity 中的整数类型可以表示的最大值是 2^256 -1，如果超过这个值，数值会回绕到0。</p></div><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h2><p>Functions are the executable units of code within a contract. 「函数是合约中可执行的代码单元。」</p><p>函数调用可以在内部或外部发生，并且对其他合约具有不同的可见性级别。</p><ul><li>内部调用是指合约内部的函数相互调用，</li><li>外部调用是指其他合约或外部账户调用合约的函数。</li></ul><p>Function modifiers amend the semantics of functions in a declarative way.「函数修饰符以声明方式修改函数的语义。」</p><ul><li>通过使用修饰符，可以在函数执行前后添加额外的逻辑，例如权限检查。</li><li>say 「例如」, only owner can call, no reentrancy 「例如，只有合约的所有者可以调用该函数，防止重入攻击。」 <ul><li>重入攻击是指攻击者在函数执行过程中反复调用同一函数，导致意外的结果。</li></ul></li><li>e.g., <code>onlySeller</code> in the sample, 在示例中使用了onlySeller修饰符，确保只有卖家可以调用某些函数。</li></ul><img src="https://pic.hanjiaming.com.cn/2024/10/11/ff883bd103e77.png" alt="1728638183460.png" style="zoom:50%;"><h3 id="function-types" tabindex="-1"><a class="header-anchor" href="#function-types" aria-hidden="true">#</a> Function types</h3><p><code>function (&lt;parameter types&gt;) {internal|external} [pure|view|payable] [returns (&lt;return types&gt;)]</code></p><ul><li>function types are by default internal: <ul><li>在Solidity中，如果不指定函数的可见性修饰符，函数默认是internal类型</li><li>即只能在当前合约和继承的合约中访问。</li></ul></li><li>合约函数默认是 public <ul><li>在Solidity中，如果不指定函数的可见性修饰符，合约中的函数默认是public类型，</li><li>即任何人都可以调用这些函数。</li></ul></li><li>可见性总结 「Visibility summary」 <ul><li>public 修饰符表示函数可以被任何人调用，包括外部账户和其他合约。</li><li>external <ul><li>修饰符表示函数只能被外部账户或其他合约调</li><li>不能在当前合约内部调用，直接调用f()是不行的，但可以通过this.f()来调用</li></ul></li><li>internal <ul><li>修饰符表示函数只能在当前合约和继承该合约的合约中调用</li><li>不需要使用this关键字</li></ul></li><li>private 修饰符表示函数只能在当前合约中调用，不能在继承的合约中调用。</li></ul></li></ul><h3 id="modifiers" tabindex="-1"><a class="header-anchor" href="#modifiers" aria-hidden="true">#</a> Modifiers</h3><p>函数可以有多种修饰符，主要包括 <code>pure</code>、<code>view</code>、<code>payable</code> 以及没有任何修饰符的普通函数。</p><h4 id="没有任何修饰符" tabindex="-1"><a class="header-anchor" href="#没有任何修饰符" aria-hidden="true">#</a> 没有任何修饰符</h4><p>如果一个函数既没有被标记为 <code>pure</code> 也没有被标记为 <code>view</code>，那么它就是一个普通的函数。</p><ul><li>普通函数既可以读取状态变量，也可以修改状态变量。</li><li>它们没有任何限制，可以执行任何操作</li></ul><h4 id="纯函数-和-视图函数" tabindex="-1"><a class="header-anchor" href="#纯函数-和-视图函数" aria-hidden="true">#</a> 纯函数 和 视图函数</h4><p>纯函数（pure）和视图函数（view）是Solidity中的特殊函数类型。</p><ul><li>纯函数不修改状态变量，也不读取状态变量。</li><li>视图函数可以读取状态变量，但不能修改它们。</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/10/11/59183e171461f.png" alt="1728653182481.png" tabindex="0" loading="lazy"><figcaption>1728653182481.png</figcaption></figure><h4 id="payable" tabindex="-1"><a class="header-anchor" href="#payable" aria-hidden="true">#</a> payable</h4><ul><li>可支付函数，可以接收以太币。</li><li>调用该函数时可以附带以太币。</li></ul><p>除了上述修饰符，Solidity 还支持自定义修饰符（modifiers），用于控制函数的访问权限和行为。例如：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">modifier</span> <span class="token function">onlyOwner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> owner<span class="token punctuation">,</span> <span class="token string">&quot;Not the contract owner&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">_</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">restrictedFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> onlyOwner <span class="token punctuation">{</span>
    <span class="token comment">// 只有合约所有者可以调用此函数</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，还可以组合 <code>payable</code> 与其他修饰符</p><div class="hint-container warning"><p class="hint-container-title">非法组合</p><p><code>payable view</code> 和 <code>payable pure</code> 是非法的组合，因为 <code>payable</code> 函数需要能够修改状态（接受以太币），而 <code>view</code> 和 <code>pure</code> 函数不能修改状态。</p></div><h3 id="function-return" tabindex="-1"><a class="header-anchor" href="#function-return" aria-hidden="true">#</a> Function return</h3><p>可以命名返回变量，例如：<code>returns(uint256 _n, bool _b, uint256[4] memory _a)</code>。</p><p>其中，</p><ul><li><code>_n</code>是一个无符号256位整数</li><li><code>_b</code>是一个布尔值</li><li><code>_a</code>是一个存储在内存中的包含4个无符号256位整数的数组</li></ul><p>自动返回命名的变量。当函数执行完毕时，这些命名的变量会自动作为返回值返回。</p><p>return: inside function body to return values</p><p>例如，<code>return(1, false, [uint256(1), 2, 3]);</code></p><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events" aria-hidden="true">#</a> Events</h2><p>Interfaces with the EVM logging facilities.</p><ul><li>EVM提供了日志记录的功能，允许智能合约在执行过程中生成日志。</li><li>事件是Solidity中用于触发这些日志的工具。</li></ul><p>当事件被调用时，它们会将参数存储在交易的日志中。</p><ul><li>这个日志是一种特殊的数据结构，存储在区块链上。</li><li>通过这种方式，事件可以记录智能合约的执行情况，并且这些记录可以被外部应用程序读取和分析。</li></ul><p>emit [evt]</p><ul><li>在Solidity中，<code>emit</code>关键字用于触发事件。</li><li><code>[evt]</code>是事件的名称。当事件被触发时，相关的数据会被记录到区块链的日志中。</li></ul><p>Notify others</p><ul><li>事件的主要功能之一是通知其他外部系统或应用程序。</li><li>通过监听事件，外部应用程序可以实时获取智能合约的状态变化。</li><li>事件的通知是异步的「asynchronous」。 <ul><li>这意味着事件的触发和处理不会阻塞智能合约的执行。</li><li>外部应用程序可以在事件触发后独立地处理事件数据。</li></ul></li><li>cheap vs. storage：与存储数据相比，使用事件记录日志更加经济。存储数据需要消耗更多的Gas，而记录日志则相对便宜。</li><li>app (with web3.js/ether.js) can listen to the events <ul><li>部应用程序可以使用Web3.js或Ether.js库来监听事件。</li><li>这些库提供了API，允许开发者编写代码来监听和处理智能合约触发的事件。</li></ul></li></ul><h2 id="interface" tabindex="-1"><a class="header-anchor" href="#interface" aria-hidden="true">#</a> Interface</h2><p>与其他合约进行交互。接口允许一个合约与另一个合约进行通信和交互。</p><p>当你<strong>使用</strong>接口调用另一个合约时，括号内通常填入的是目标合约的地址</p><ol><li>接口中不包含任何函数的实现。接口只是定义了函数的签名，而不包含具体的实现逻辑。</li><li>接口可以继承其他接口。通过继承，接口可以扩展其他接口的功能，形成更复杂的接口结构。</li><li>所有声明的函数 in Interface 必须是外部函数。接口中的函数只能从合约外部调用，不能在合约内部调用。</li><li>接口不能声明构造函数。构造函数用于初始化合约状态，而接口不包含实现，因此不能有构造函数。</li><li>接口不能声明状态变量。状态变量用于存储合约的持久数据，而接口不包含实现，因此不能有状态变量。</li><li>接口基本上仅限于合约ABI可以表示的内容。接口定义了合约的外部调用方式，与ABI紧密相关。</li></ol><details class="hint-container details"><summary>Example</summary><p>假设我们有一个计数器合约（Counter），它包含一个计数函数（count）和一个递增函数（increment）。我们希望通过另一个合约（MyContract）来调用这个计数器合约中的函数。</p><p>我们需要定义一个接口（ICounter）来描述计数器合约的函数签名，并在MyContract中使用这个接口来调用计数器合约的函数。</p><p>接口允许我们定义合约之间的标准化交互方式，使得 MyContract 可以调用Counter 合约的函数，而不需要知道具体的实现细节。</p><p><strong>定义计数器合约（Counter）</strong></p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">contract</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span> <span class="token keyword">public</span> count<span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">{</span>
        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Solidity 中，公共状态变量会自动生成一个同名的 getter 函数。因此，<code>Counter</code> 合约实际上已经实现了 <code>count()</code> 函数，这个函数会返回 <code>count</code> 变量的值。</p><p><strong>定义接口（ICounter）</strong></p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">interface</span> <span class="token class-name">ICounter</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在你的例子中，<code>ICounter</code> 接口定义了 <code>count()</code> 和 <code>increment()</code> 函数的签名，而 <code>Counter</code> 合约实现了这些函数：</p><ol><li><code>Counter</code> 合约实现了 <code>count</code> 变量和 <code>increment</code> 函数。</li><li><code>ICounter</code> 接口定义了 <code>count</code> 和 <code>increment</code> 函数的签名。</li></ol><p><strong>定义 MyContract 并使用接口调用 Counter 合约的函数</strong></p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">contract</span> <span class="token class-name">MyContract</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">incCounter</span><span class="token punctuation">(</span><span class="token builtin">address</span> _counter<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">{</span>
        <span class="token function">ICounter</span><span class="token punctuation">(</span>_counter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token builtin">address</span> _counter<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">ICounter</span><span class="token punctuation">(</span>_counter<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details><h2 id="inheritance" tabindex="-1"><a class="header-anchor" href="#inheritance" aria-hidden="true">#</a> Inheritance</h2><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// 合约X包含一个公共字符串变量name，并通过构造函数初始化name。</span>
<span class="token keyword">contract</span> <span class="token class-name">X</span> <span class="token punctuation">{</span>
    <span class="token builtin">string</span> <span class="token keyword">public</span> name<span class="token punctuation">;</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 合约Y包含一个公共字符串变量text，并通过构造函数初始化text。</span>
<span class="token keyword">contract</span> <span class="token class-name">Y</span> <span class="token punctuation">{</span>
    <span class="token builtin">string</span> <span class="token keyword">public</span> text<span class="token punctuation">;</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        text <span class="token operator">=</span> _text<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 合约A同时继承了合约X和合约Y，并在其构造函数中调用了X和Y的构造函数。</span>
<span class="token keyword">contract</span> <span class="token class-name">A</span> <span class="token keyword">is</span> X<span class="token punctuation">,</span> Y <span class="token punctuation">{</span>
    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">X</span><span class="token punctuation">(</span><span class="token string">&quot;X was called&quot;</span><span class="token punctuation">)</span> <span class="token function">Y</span><span class="token punctuation">(</span><span class="token string">&quot;Y was called&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数的调用顺序是按照声明顺序，从X到Y再到A。</p><p>这意味着在合约A的构造函数中，首先调用X的构造函数，然后调用Y的构造函数，最后执行A的构造函数主体。</p><div class="hint-container tip"><p class="hint-container-title">子类重写父类的虚函数</p><p>「Child override parents&#39; virtual function」</p><p>当一个函数在不同的合约中多次定义时，</p><ul><li>父合约的搜索顺序是从右到左，</li><li>并且是深度优先搜索。</li></ul></div><h2 id="receive" tabindex="-1"><a class="header-anchor" href="#receive" aria-hidden="true">#</a> receive()</h2><ul><li><code>receive()</code> 函数不能接受任何参数，也不能返回任何值。</li><li>这是 Solidity 对 <code>receive()</code> 函数的严格要求，确保其专用于接收 Ether。</li><li>在一个智能合约中，最多只能定义一个 <code>receive()</code> 函数。这是为了避免混淆和冲突，确保合约能够明确处理接收到的 Ether。</li><li><code>receive()</code> 函数必须具有 <code>external</code> 可见性，并且必须标记为 <code>payable</code>。这意味着该函数只能从合约外部调用，并且在调用时可以接收 Ether。<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 这里不需要使用 function 关键字来定义 receive() 函数
receive() external payable { ... }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li>当通过 .send() 或 .transfer() 方法进行简单的 Ether 转账时，receive() 函数会被执行。<br> 这些方法用于将 Ether 从一个地址转移到另一个地址。</li><li>如果合约中没有定义 <code>receive()</code> 函数，但存在一个 <code>payable</code> 的 <code>fallback</code> 函数，那么在进行简单的 Ether 转账时，会调用 <code>fallback</code> 函数。<br><code>fallback</code> 函数是一种默认函数，当调用的函数不存在时会被执行。</li><li>任何标记为 <code>payable</code> 的函数都可以接收 Ether。<br> 这意味着不仅仅是 <code>receive()</code> 函数，其他带有 <code>payable</code> 修饰符的函数也可以在调用时接收 Ether。</li></ul><p>在下面例子中，<code>receive()</code> 函数每次接收到 Ether 时都会更新 <code>totalReceived</code> 变量。<code>msg.value</code> 是接收到的 Ether 数量。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">SimpleWallet</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span> <span class="token keyword">public</span> totalReceived<span class="token punctuation">;</span>

    <span class="token comment">// receive() 函数来处理传入的以太</span>
    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        totalReceived <span class="token operator">+=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Function to withdraw Ether</span>
    <span class="token keyword">function</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
   		<span class="token keyword">payable</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span>balance<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Some Special Notes of Receiving Ether</p><ul><li>没有以太币接收功能的合约可以接收以太币 <ul><li>一个没有接收以太币函数的合约仍然可以接收以太币。</li><li>作为一个coinbase交易（也称为矿工区块奖励）的接收者。 <ul><li>coinbase交易是矿工在挖到区块时获得的奖励</li><li>在调用selfdestruct函数时，会将剩余的资金转移到指定的地址。</li></ul></li></ul></li><li>一个合约不能对这些转账作出反应，因此也不能拒绝这些转账。 <ul><li>这是EVM的设计选择。Solidity无法绕过这一点。</li></ul></li><li>selfdestruct()创建了一个发送以太币的“侧通道”。 <ul><li>使得address(this).balance（合约地址的余额）高于手动记账的余额。</li><li>即将被弃用。</li></ul></li><li>想象一个基于总资金做出关键决策的合约。</li></ul></div><h2 id="special-variables-block-msg-tx" tabindex="-1"><a class="header-anchor" href="#special-variables-block-msg-tx" aria-hidden="true">#</a> Special Variables: block, msg &amp; tx</h2><ul><li><code>gasleft()</code> 函数返回当前剩余的 Gas 量，以单位<code>uint256</code>表示。Gas用于支付执行合约代码的费用。</li><li><code>block.blockhash(uint blockNumber)</code> 函数返回指定区块的哈希值，哈希值以<code>bytes32</code>表示。 <ul><li>该函数只能获取最近256个区块的哈希值，不包括当前区块。</li></ul></li><li><code>block.coinbase</code> 返回当前区块矿工的地址，以 <code>address</code> 表示。</li><li><code>block.difficulty</code> 返回当前区块的难度，以<code>uint</code>表示。 <ul><li>难度值用于调整生成新区块的难度。</li></ul></li><li><code>block.gaslimit</code> 返回当前区块的Gas限制，以<code>uint</code>表示。 <ul><li>Gas限制是单个区块中允许的最大Gas量。</li></ul></li><li><code>block.timestamp</code> 返回当前区块的时间戳，以<code>uint</code>表示。 <ul><li>时间戳是区块生成的时间。</li></ul></li><li><code>msg.data</code> 包含调用合约时传递的完整数据，以<code>bytes</code>表示。</li><li><code>msg.sender</code> 返回发送消息（当前调用）的地址，以<code>address</code>表示。 <ul><li>可以是发起交易的用户地址或调用合约的合约地址。</li></ul></li><li><code>msg.sig</code> 返回调用数据的前四个字节，即函数标识符，以<code>bytes4</code>表示。</li><li><code>msg.value</code> 返回消息中发送的以太币数量，以<code>uint</code>表示。单位是<code>wei</code>，以太坊中最小的货币单位。</li><li><code>tx.gasprice</code> 返回交易的Gas价格，以<code>uint</code>表示。Gas价格是每单位Gas的成本。</li><li><code>tx.origin</code> 返回交易的发起者地址，以<code>address</code>表示。它是整个调用链的起始地址。</li></ul><h2 id="fallback-function" tabindex="-1"><a class="header-anchor" href="#fallback-function" aria-hidden="true">#</a> Fallback Function</h2><p>一个智能合约可以有且只有一个没有名字的函数，这个函数没有参数也不返回任何值。</p><ul><li>这个函数通常被称为回退函数（Fallback Function）。</li><li>当调用合约时，如果没有其他函数与给定的函数标识符匹配（或者根本没有提供数据），这个回退函数就会被执行。</li><li>也就是说，当调用一个不存在的函数时，回退函数会自动执行。</li></ul><p>每当合约接收到纯以太币（没有附带数据）时，回退函数也会被执行。</p><ul><li>这意味着即使没有调用特定函数，只要转账到合约地址，回退函数就会触发。 <ul><li>当合约接收到以太但没有调用任何其他函数时 会被调用</li><li>当调用的函数不存在时 会被调用</li></ul></li></ul><p>为了接收以太币，回退函数必须被标记为 <code>payable</code>。</p><ul><li>只有标记为 <code>payable</code> 的回退函数才能接收以太币，否则会导致交易失败。</li><li>这意味着所有转账到该合约的以太币都会被拒绝。</li></ul><details class="hint-container details"><summary>example</summary><p>假设我们有一个智能合约，它需要接收以太币并记录每个发送者的余额。如果发送者调用了一个不存在的函数，合约应该能够处理这种情况。</p><p>我们需要一个回退函数来接收以太币，并在调用不存在的函数时处理这种情况。回退函数需要标记为 <code>payable</code> 以接收以太币。</p><p>回退函数允许合约在接收以太币和处理无效函数调用时保持灵活性。</p><ol><li>定义一个结构来存储每个发送者的余额。</li><li>定义一个回退函数，标记为 <code>payable</code>，以便接收以太币。</li><li>在回退函数中，更新发送者的余额。</li></ol><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">FallbackExample</span> <span class="token punctuation">{</span>
    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token keyword">public</span> balances<span class="token punctuation">;</span>

    <span class="token comment">// Fallback function to receive Ether and update sender&#39;s balance</span>
    <span class="token function">fallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        balances<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">+=</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个合约的主要功能是在接收到以太时，通过回退函数将发送者的余额记录在 <code>balances</code> 映射中。每当有人向这个合约发送以太时，他们的地址和发送的以太数量会被记录下来。</p></details>`,151),d={id:"function-calls",tabindex:"-1"},r=n("a",{class:"header-anchor",href:"#function-calls","aria-hidden":"true"},"#",-1),k=s(`<p>Internal function calls</p><ul><li><strong>它们在 EVM 内部被翻译成简单的跳转（jumps）：</strong> 内部函数调用是指在同一个智能合约内部调用其他函数。这些调用在 EVM 中被翻译成简单的跳转操作，不涉及外部合约的调用。</li><li><strong>只有同一个合约的函数可以被内部调用：</strong> 内部函数调用只能在同一个合约内进行，不能调用其他合约的函数。这样可以减少调用的复杂性和 Gas 消耗。</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/11/21/e9d2ef55dc6e0.png" alt="1732201921382.png" tabindex="0" loading="lazy"><figcaption>1732201921382.png</figcaption></figure><p>External function calls</p><ul><li><strong>调用合约实例（c.f(1)）或通过 this（this.f(1)）来调用函数：</strong> 外部函数调用是指调用不同合约中的函数。可以通过合约实例或 this 关键字来调用外部函数。</li><li><strong>函数通过消息调用（message call）而不是跳转来调用：</strong> 外部函数调用通过消息调用的方式进行，而不是简单的跳转。这涉及到更复杂的操作和更高的 Gas 消耗。</li><li><strong>调用时可以指定发送的 Wei 数量和 Gas 限制：</strong> 在外部函数调用时，可以使用 .value() 和 .gas() 方法指定发送的 Wei 数量和 Gas 限制。这对于控制调用的成本和资源消耗非常重要。</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/11/21/fa61a4d6f5be8.png" alt="1732201933898.png" tabindex="0" loading="lazy"><figcaption>1732201933898.png</figcaption></figure><h2 id="error-handling" tabindex="-1"><a class="header-anchor" href="#error-handling" aria-hidden="true">#</a> Error Handling</h2><p>Solidity使用状态回滚异常来处理错误。</p><p>它会撤销当前调用及其所有子调用中对状态所做的所有更改，并向调用者标记一个错误。</p><p><code>assert()</code>用于测试内部错误，并检查不变量。</p><ul><li>例如，访问一个数组时索引过大或为负数（如<code>x[i]</code>，其中<code>i &gt;= x.length</code>或<code>i &lt; 0</code>）。</li><li>除以零或取模（如<code>5 / 0</code>或<code>23 % 0</code>）；负数移位等。</li></ul><p><code>require()</code>用于确保满足有效条件，例如输入或合约状态变量，或验证对外部合约调用的返回值。</p><p><code>revert()</code>用于标记一个错误并回滚当前调用。</p><h2 id="methods-to-send-ether" tabindex="-1"><a class="header-anchor" href="#methods-to-send-ether" aria-hidden="true">#</a> Methods to Send Ether</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;address&gt;.send(amount)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是用于发送以太币的方法之一，其中<code>&lt;address&gt;</code>是接收者的地址，<code>amount</code>是发送的以太币数量。</p><ul><li>使用<code>.send()</code>方法时，接收合约的fallback函数执行有一个2300 gas的限制。这足够创建一个事件（event），但可能不足以执行更复杂的逻辑。</li><li><code>.send()</code>方法等价于使用<code>.call()</code>方法，指定2300的gas限制，并发送指定数量的以太币。</li><li>如果<code>.send()</code>方法执行失败（例如gas不足），它会返回<code>false</code>，而不是抛出异常。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;address&gt;.transfer(amount)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是另一种发送以太币的方法，和<code>.send()</code>类似，但在失败时会抛出异常。</p><ul><li><code>.transfer()</code>方法也有2300 gas的限制，但开发者们在讨论是否应该允许添加<code>.gas()</code>来设置gas限制。</li><li><code>.transfer()</code>方法等价于<code>require(&lt;address&gt;.send(amount))</code>，即要求发送成功，否则抛出异常。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;address&gt;.call.value(amount).gas(gasLimit)()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这是第三种发送以太币的方法，可以手动设置gas限制。如果操作失败，它会返回<code>false</code>。</p><h2 id="throw-vs-return" tabindex="-1"><a class="header-anchor" href="#throw-vs-return" aria-hidden="true">#</a> Throw vs. Return</h2><p><code>throw</code> 将会撤销代码的任何副作用，除了Gas的消耗。也就是说，所有的状态更改都会被回滚，但已经消耗的Gas不会被退还。</p><p><code>return</code> 允许调用的合约从失败中优雅地恢复，前提是没有恶意行为。这意味着合约可以处理错误并继续执行。</p><p><code>throw</code> 已在以太坊0.5.0版本中被弃用。这意味着不再建议使用<code>throw</code>，而是使用其他更安全和有效的错误处理机制。</p><h2 id="application-binary-interface-abi" tabindex="-1"><a class="header-anchor" href="#application-binary-interface-abi" aria-hidden="true">#</a> Application Binary Interface (ABI)</h2><ul><li>应用程序二进制接口（ABI）是一个定义数据结构和函数在机器码中如何被访问的标准。与高层次的API不同，ABI在更低的层次上工作，直接与机器码交互。</li><li>在以太坊中，ABI有特定的应用，主要用于智能合约的调用和数据处理。</li><li>ABI编码智能合约的调用，使得EVM可以理解和执行这些调用，同时也用于从交易中读取数据。</li><li>ABI定义了智能合约中可以被调用的函数，包括函数的名称、参数类型和返回值类型。</li><li>ABI描述了每个函数如何接受参数以及如何返回结果，这包括参数的顺序、类型和返回值的格式。</li></ul>`,28);function m(v,b){const a=t("Badge");return i(),l("div",null,[u,n("h2",d,[r,o(" Function Calls "),p(a,{text:"以下内容为本章后续更新",color:"tip"})]),k])}const g=e(c,[["render",m],["__file","Solidity.html.vue"]]);export{g as default};
