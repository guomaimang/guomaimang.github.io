const e=JSON.parse('{"key":"v-1c22a644","path":"/note/it/arch/bloom-filter.html","title":"布隆过滤器","lang":"zh-CN","frontmatter":{"article":false,"date":"2024-12-23T00:00:00.000Z","index":true,"order":5,"headerDepth":1,"category":["tech"],"description":"布隆过滤器 布隆过滤器是一种用于检测集合中是否存在某个元素的数据结构。它通过使用哈希函数和位数组来确定数据的存在性，能够有效地减少缓存穿透的情况。 本文将详细介绍布隆过滤器的原理、应用场景及其在Java项目中的具体实现。 案例背景 为了便于理解，我们以一个真实的电商网站案例进行讲解。假设我们在开发一个类似于淘宝或京东的购物网站，每个商品都有一个唯一的SKU编号。 例如，商品编号857对应的页面内容也是唯一的。 1734532388168.png","head":[["meta",{"property":"og:url","content":"https://guomaimang.github.io/note/it/arch/bloom-filter.html"}],["meta",{"property":"og:site_name","content":"Hirsun HAN (Jiaming) | 韩佳明"}],["meta",{"property":"og:title","content":"布隆过滤器"}],["meta",{"property":"og:description","content":"布隆过滤器 布隆过滤器是一种用于检测集合中是否存在某个元素的数据结构。它通过使用哈希函数和位数组来确定数据的存在性，能够有效地减少缓存穿透的情况。 本文将详细介绍布隆过滤器的原理、应用场景及其在Java项目中的具体实现。 案例背景 为了便于理解，我们以一个真实的电商网站案例进行讲解。假设我们在开发一个类似于淘宝或京东的购物网站，每个商品都有一个唯一的SKU编号。 例如，商品编号857对应的页面内容也是唯一的。 1734532388168.png"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-22T20:15:45.000Z"}],["meta",{"property":"article:author","content":"Hirsun (HAN Jiaming)"}],["meta",{"property":"article:published_time","content":"2024-12-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-22T20:15:45.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"布隆过滤器\\",\\"description\\":\\"布隆过滤器 布隆过滤器是一种用于检测集合中是否存在某个元素的数据结构。它通过使用哈希函数和位数组来确定数据的存在性，能够有效地减少缓存穿透的情况。 本文将详细介绍布隆过滤器的原理、应用场景及其在Java项目中的具体实现。 案例背景 为了便于理解，我们以一个真实的电商网站案例进行讲解。假设我们在开发一个类似于淘宝或京东的购物网站，每个商品都有一个唯一的SKU编号。 例如，商品编号857对应的页面内容也是唯一的。 1734532388168.png\\"}"]]},"headers":[{"level":2,"title":"案例背景","slug":"案例背景","link":"#案例背景","children":[{"level":3,"title":"系统架构","slug":"系统架构","link":"#系统架构","children":[]},{"level":3,"title":"缓存的优势","slug":"缓存的优势","link":"#缓存的优势","children":[]},{"level":3,"title":"缓存穿透问题","slug":"缓存穿透问题","link":"#缓存穿透问题","children":[]}]},{"level":2,"title":"布隆过滤器简介","slug":"布隆过滤器简介","link":"#布隆过滤器简介","children":[{"level":3,"title":"操作步骤","slug":"操作步骤","link":"#操作步骤","children":[]},{"level":3,"title":"误判问题","slug":"误判问题","link":"#误判问题","children":[]}]},{"level":2,"title":"布隆过滤器在Java中的应用","slug":"布隆过滤器在java中的应用","link":"#布隆过滤器在java中的应用","children":[{"level":3,"title":"Java集成","slug":"java集成","link":"#java集成","children":[]}]},{"level":2,"title":"项目中的布隆过滤器使用流程","slug":"项目中的布隆过滤器使用流程","link":"#项目中的布隆过滤器使用流程","children":[{"level":3,"title":"初始化阶段","slug":"初始化阶段","link":"#初始化阶段","children":[]},{"level":3,"title":"请求处理","slug":"请求处理","link":"#请求处理","children":[]},{"level":3,"title":"误判处理","slug":"误判处理","link":"#误判处理","children":[]}]},{"level":2,"title":"布隆过滤器数据删除问题","slug":"布隆过滤器数据删除问题","link":"#布隆过滤器数据删除问题","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1734898545000,"updatedTime":1734898545000,"contributors":[{"name":"hanjiaming","email":"47519540+guomaimang@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":35.16,"words":3516},"filePathRelative":"note/it/arch/bloom-filter.md","localizedDate":"2024年12月23日","excerpt":"<h1> 布隆过滤器</h1>\\n<p>布隆过滤器是一种用于检测集合中是否存在某个元素的数据结构。它通过使用哈希函数和位数组来确定数据的存在性，能够有效地减少缓存穿透的情况。</p>\\n<p>本文将详细介绍布隆过滤器的原理、应用场景及其在Java项目中的具体实现。</p>\\n<h2> 案例背景</h2>\\n<p>为了便于理解，我们以一个真实的电商网站案例进行讲解。假设我们在开发一个类似于淘宝或京东的购物网站，每个商品都有一个唯一的SKU编号。</p>\\n<p>例如，商品编号857对应的页面内容也是唯一的。</p>\\n<figure><img src=\\"https://pic.hanjiaming.com.cn/2024/12/18/073e341be8b88.png\\" alt=\\"1734532388168.png\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>1734532388168.png</figcaption></figure>","autoDesc":true}');export{e as data};
