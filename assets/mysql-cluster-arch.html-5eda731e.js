import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as t,e as i}from"./app-ae05e74e.js";const s={},o=i('<h1 id="mysql-集群架构与应用场景" tabindex="-1"><a class="header-anchor" href="#mysql-集群架构与应用场景" aria-hidden="true">#</a> MySQL 集群架构与应用场景</h1><h2 id="单库模式" tabindex="-1"><a class="header-anchor" href="#单库模式" aria-hidden="true">#</a> 单库模式</h2><p><strong>特点</strong>:</p><ul><li><strong>简单易用</strong>: 适合初期项目和小型应用，成本低。</li><li><strong>适用场景</strong>: 企业门户网站、中小型项目、项目原型。</li></ul><p><strong>缺点</strong>:</p><ul><li><strong>不可用性</strong>: 如果数据库挂掉，系统会瘫痪。</li><li><strong>并发瓶颈</strong>: 高并发下性能差。</li></ul><h2 id="读写分离模式" tabindex="-1"><a class="header-anchor" href="#读写分离模式" aria-hidden="true">#</a> 读写分离模式</h2><img src="https://pic.hanjiaming.com.cn/2024/12/18/dace8ca4f9124.png" alt="1734517169939.png" style="zoom:40%;"><p><strong>架构</strong>:</p><ul><li><strong>主库</strong>: 负责写入操作。</li><li><strong>从库</strong>: 负责读取操作，通过主从同步机制保持数据一致。</li><li><strong>中间件</strong>: 如 MyCat、ShardingSphere，负责请求路由。</li></ul><p><strong>优点</strong>:</p><ul><li><strong>性能提升</strong>: 适合读多写少的场景，有效分摊读取压力。</li><li><strong>高可用性</strong>: 可通过 MHA 等方案实现故障转移。</li></ul><p><strong>缺点</strong>:</p><ul><li><strong>架构复杂</strong>: 部署和维护成本增加。</li><li><strong>数据一致性</strong>: 网络问题可能导致数据不一致。</li></ul><h2 id="分库分表模式-sharding" tabindex="-1"><a class="header-anchor" href="#分库分表模式-sharding" aria-hidden="true">#</a> 分库分表模式 (Sharding)</h2><img src="https://pic.hanjiaming.com.cn/2024/12/18/d528985e8616c.png" alt="1734517260389.png" style="zoom:33%;"><p><strong>架构</strong>:</p><ul><li><strong>分片</strong>: 将大数据集合打散存储在多个子数据库的子表中。</li><li><strong>中间件</strong>: 如 MyCat、ShardingSphere，负责 SQL 路由。</li></ul><p><strong>优点</strong>:</p><ul><li><strong>适用大数据</strong>: 适合十亿级别的数据量。</li><li><strong>数据分散</strong>: 每个节点的数据是所有数据的子集。</li></ul><p><strong>缺点</strong>:</p><ul><li><strong>架构复杂</strong>: 部署和维护成本高。</li><li><strong>高可用性差</strong>: 每个节点数据不同，单点故障影响大。</li></ul><h3 id="分片算法" tabindex="-1"><a class="header-anchor" href="#分片算法" aria-hidden="true">#</a> 分片算法</h3><p><strong>范围法</strong>: 按数据范围划分，适合范围检索，但可能导致数据不均匀。</p><img src="https://pic.hanjiaming.com.cn/2024/12/18/efc94489552d2.png" alt="1734517421813.png" style="zoom:33%;"><p><strong>哈希法</strong>: 数据均匀分布，适合大型互联网应用，但扩展困难。</p><img src="https://pic.hanjiaming.com.cn/2024/12/18/194ca738efc78.png" alt="1734517405448.png" style="zoom:33%;"><h2 id="综合应用-组合方案" tabindex="-1"><a class="header-anchor" href="#综合应用-组合方案" aria-hidden="true">#</a> 综合应用 -&gt; 组合方案:</h2><ul><li><strong>读写分离 + 分片</strong>: 结合两者优点，适用于大规模互联网应用。</li><li><strong>高可用性</strong>: 配合 MHA、MDR 等方案，确保系统稳定可靠。</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/12/18/13a8879647b78.png" alt="Typora 2024-12-18 18.22.41.png" tabindex="0" loading="lazy"><figcaption>Typora 2024-12-18 18.22.41.png</figcaption></figure><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><strong>单库模式</strong>: 简单易用，适合小型项目。</li><li><strong>读写分离模式</strong>: 提升性能，适合读多写少的应用。</li><li><strong>分库分表模式</strong>: 适用于大数据量，架构复杂，需结合读写分离实现高可用性。</li></ul>',32),a=[o];function l(g,e){return r(),t("div",null,a)}const d=n(s,[["render",l],["__file","mysql-cluster-arch.html.vue"]]);export{d as default};
