import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,e as t}from"./app-175e264e.js";const a={},s=t('<h1 id="program-testing" tabindex="-1"><a class="header-anchor" href="#program-testing" aria-hidden="true">#</a> Program Testing</h1><ol><li>了解从开发期间的测试到系统客户的验收测试的各个阶段。</li><li>已经介绍了帮助你选择测试用例的技术，这些用例旨在发现程序缺陷。</li><li>理解 &quot;测试优先 &quot;的开发方式，即在编写代码之前设计测试，并自动运行这些测试。</li><li>了解三种不同类型的测试 - 组件测试、系统测试和发布测试。</li><li>了解开发测试和用户测试之间的区别。</li></ol><h2 id="program-testing-1" tabindex="-1"><a class="header-anchor" href="#program-testing-1" aria-hidden="true">#</a> Program Testing</h2><ul><li>测试的目的是表明一个程序做了它想做的事情，并在投入使用前发现程序的缺陷。</li><li>当你测试软件时，你使用人工数据执行一个程序。</li><li>你检查测试运行的结果是否有错误、异常或关于程序的非功能属性的信息。</li><li>可以揭示错误的存在，但不能揭示其不存在。</li><li>Testing is part of a more general verification and validation proces，其中也包括静态验证技术。</li></ul><p>向开发者和客户证明软件符合其要求。</p><h3 id="program-testing-goals" tabindex="-1"><a class="header-anchor" href="#program-testing-goals" aria-hidden="true">#</a> Program Testing Goals</h3><ul><li>向开发人员和客户证明软件满足其要求。 <ul><li>对于定制软件，这意味着需求文件中的每个需求都应该有至少一个测试。</li><li>对于通用软件产品来说，这意味着应该对所有的系统功能以及这些功能的组合进行测试，这些功能将被纳入到产品发布中。</li></ul></li><li>发现软件的行为不正确、不理想或不符合其规范的情况。 <ul><li>缺陷测试「Defect Testing 」关注的是根除不理想的系统行为，如系统崩溃、与其他系统不需要的互动、不正确的计算和数据损坏。</li></ul></li><li>对于通用软件产品来说，这意味着应该对所有的系统功能以及这些功能的组合进行测试，这些功能将被纳入到产品发布中。</li></ul><h3 id="validation-and-defect-testing" tabindex="-1"><a class="header-anchor" href="#validation-and-defect-testing" aria-hidden="true">#</a> Validation and Defect Testing</h3><ul><li>The first goal leads to validation testing <ul><li>你期望系统在使用一组反映系统预期用途的测试用例时能够正确执行。</li></ul></li><li>The second goal leads to defect testing <ul><li>测试用例旨在暴露缺陷。缺陷测试中的测试用例可以故意模糊，不需要反映系统的正常使用情况。</li><li>成功的测试是使系统运行不正确并因此暴露系统中的缺陷的测试。</li></ul></li></ul><h3 id="verification-validation-v-v" tabindex="-1"><a class="header-anchor" href="#verification-validation-v-v" aria-hidden="true">#</a> Verification &amp; Validation (V&amp;V)</h3><ul><li>Verification: &quot;Are we building the product right”. <ul><li>过程</li><li>该软件应符合其规格。</li></ul></li><li>Validation: &quot;Are we building the right product”. <ul><li>交付</li><li>该软件应该做用户真正需要的事情。</li></ul></li></ul><p>V&amp;V 的目的是 <strong>建立对系统 &quot;适用于目的&quot;的信心。</strong></p><ul><li>软件目的：信心水平取决于软件对一个组织的关键程度。</li><li>用户期望：用户可能对某些类型的软件期望较低。</li><li>营销环境：让产品尽早上市可能比在程序中发现缺陷更重要。</li></ul><h3 id="software-inspections" tabindex="-1"><a class="header-anchor" href="#software-inspections" aria-hidden="true">#</a> Software Inspections</h3><p>这些涉及到人们检查源表示，目的是发现异常和缺陷。</p><ul><li>它们可以应用于系统的任何表示（需求、设计、配置数据、测试数据等）。</li><li>在测试过程中，错误可以掩盖（隐藏）其他错误。因为 inspection 是一个静态的过程，你不必关心错误之间的相互作用。</li><li>除了搜索程序缺陷外，检查还可以考虑程序更广泛的质量属性，如符合标准、可移植性和可维护性。</li></ul><p>它们已被证明是发现程序错误的一种有效技术。</p><h2 id="stages-of-testing" tabindex="-1"><a class="header-anchor" href="#stages-of-testing" aria-hidden="true">#</a> Stages of Testing</h2><ol><li>开发测试「Development testing」，在开发过程中对系统进行测试以发现错误和缺陷。</li><li>发布测试「Release testing」，其中一个单独的测试团队在向用户发布之前测试系统的完整版本。</li><li>用户测试「User testing」，即系统的用户或潜在用户参与到系统的测试中。</li></ol><img src="https://pic.hanjiaming.com.cn/2022/12/15/ca6891e3a6a25.png" alt="1671038771185.png" style="zoom:50%;"><p>Choosing Unit Test Cases</p><ul><li>测试用例应该表明，当按预期使用时，你所测试的代码单元做了它应该做的事。</li><li>如果代码单元中存在缺陷，应该由测试用例来揭示。</li><li>这导致两种类型的单元测试用例： <ul><li>其中第一项应反映程序的正常运行，应显示代码单元按预期工作。</li><li>另一种测试用例应该是基于测试经验的，即哪里出现了常见问题。它应该使用异常的输入来检查这些输入是否被正确处理，并且不会使程序崩溃。</li></ul></li></ul><h2 id="testing-strategies" tabindex="-1"><a class="header-anchor" href="#testing-strategies" aria-hidden="true">#</a> Testing Strategies</h2><ul><li>分区测试「Partition testing」，即确定具有共同特征并应以相同方式处理的输入组。 <ul><li>你应该从这些组别中选择测试。</li></ul></li><li>基于指南的测试「Guideline-based testing」，你使用测试指南来选择测试用例。 <ul><li>这些准则反映了以前的经验，即程序员在开发代码单元时经常犯的各种错误。</li></ul></li></ul><h3 id="partition-testing" tabindex="-1"><a class="header-anchor" href="#partition-testing" aria-hidden="true">#</a> Partition Testing</h3><ul><li>输入数据和输出结果通常属于不同的类，其中类的所有成员都是相关的。</li><li>这些类中的每一个都是一个等价分区或域，其中程序对每个类成员的行为是等价的。</li><li>应从每个分区选择测试案例。</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2022/12/15/0b381cfb6366f.png" alt="1671039324530.png" tabindex="0" loading="lazy"><figcaption>1671039324530.png</figcaption></figure><h3 id="testing-guidelines" tabindex="-1"><a class="header-anchor" href="#testing-guidelines" aria-hidden="true">#</a> Testing Guidelines</h3><ul><li>Software with sequences <ul><li>用只有一个值的序列测试软件</li><li>在不同的测试中使用不同大小的序列</li><li>派生测试以便访问序列的第一个、中间和最后一个元素</li></ul></li><li>General software <ul><li>选择迫使系统产生所有错误信息的输入方式</li><li>设计导致输入缓冲器溢出的输入</li><li>无数次重复相同的输入或一系列的输入</li><li>强制计算结果太大或太小。</li></ul></li></ul><h2 id="component-testing" tabindex="-1"><a class="header-anchor" href="#component-testing" aria-hidden="true">#</a> Component Testing</h2><ul><li>软件组件通常是复合单元，因为它们是由几个相互作用的对象组成的。 <ul><li>例如，在气象站系统中，重新配置组件包括处理重新配置的每个方面的对象。</li></ul></li><li>你通过定义的组件接口访问这些对象的功能。</li><li>因此，测试组件的重点应该是<strong>显示组件接口的行为符合其规范。</strong></li></ul><h2 id="interface-testing" tabindex="-1"><a class="header-anchor" href="#interface-testing" aria-hidden="true">#</a> Interface Testing</h2><p>目标是检测由于接口错误或对接口的无效假设而造成的故障。</p><h3 id="interface-types" tabindex="-1"><a class="header-anchor" href="#interface-types" aria-hidden="true">#</a> Interface types</h3><ul><li>Parameter interfaces. Data passed from one method or procedure to another.</li><li>Shared memory interfaces. Block of memory is shared between procedures or functions.</li><li>Procedural interfaces. Sub-system encapsulates a set of procedures to be called by other sub-systems.</li><li>Message passing interfaces. Sub-systems request services from other sub-systems.</li></ul><h3 id="interface-errors" tabindex="-1"><a class="header-anchor" href="#interface-errors" aria-hidden="true">#</a> Interface Errors</h3><ul><li>Interface misuse：一个调用组件调用另一个组件，并在使用其接口时出现错误，例如参数的顺序错误。</li><li>Interface misunderstanding：一个调用组件嵌入了关于被调用组件行为的假设，这些假设是不正确的。</li><li>Timing errors：被调用组件和调用组件以不同的速度运行，并且会访问过时的信息。</li></ul><h3 id="interface-testing-guidelines" tabindex="-1"><a class="header-anchor" href="#interface-testing-guidelines" aria-hidden="true">#</a> Interface Testing Guidelines</h3><ul><li>设计测试，使调用过程的参数处于其范围的两端。</li><li>始终用空指针测试指针参数。</li><li>设计导致组件失败的测试。</li><li>在消息传递系统中使用压力测试。</li><li>在共享内存系统中，改变组件被激活的顺序。</li></ul><h2 id="system-testing" tabindex="-1"><a class="header-anchor" href="#system-testing" aria-hidden="true">#</a> System Testing</h2><p>涉及到整合组件以创建系统的一个版本，然后测试整合后的系统。</p><ul><li>检查组件是否兼容，是否正确互动，并在正确的时间通过其接口传输正确的数据。</li><li>为确定系统交互而开发的用例可以作为系统测试的基础。</li><li>与用例相关的 sequence diagrams 记录了正在测试的组件和交互。</li></ul><p>系统测试显然与组件测试重叠，但有两个重要区别</p><ul><li>The complete system is tested.</li><li>System testing is a collective rather than an individual process.</li></ul><h2 id="testing-policies" tabindex="-1"><a class="header-anchor" href="#testing-policies" aria-hidden="true">#</a> Testing Policies</h2><p>详尽的系统测试是不可能的，所以可以制定定义所需系统测试覆盖率的测试策略。</p><div class="hint-container info"><p class="hint-container-title">测试政策示例</p><ul><li>所有通过菜单访问的系统功能都应进行测试。</li><li>必须对通过同一菜单访问的功能组合（如文本格式化）进行测试。</li><li>在提供用户输入的地方，所有的功能都必须用正确和错误的输入进行测试。</li></ul></div><h2 id="test-driven-development" tabindex="-1"><a class="header-anchor" href="#test-driven-development" aria-hidden="true">#</a> Test-Driven Development</h2><p>测试驱动开发（TDD）是一种程序开发的方法，其中你将测试和代码开发交错进行。</p><ul><li>测试是在代码之前编写的，&quot;通过 &quot;测试是开发的关键动力。</li><li>你逐步开发代码，并对该<strong>增量</strong>进行测试。<strong>在你开发的代码通过测试之前，你不会进入下一个增量。</strong></li></ul><p><strong>TDD</strong>是作为<strong>敏捷方法</strong>的一部分被引入的，比如极限编程。然而，它也<strong>可以</strong>用于计划驱动的开发过程中。</p><p>Benefits of Test-Driven Development</p><ul><li>Code coverage: All code written has at least one test.</li><li>Regression testing: 回归测试套件「Regression Test Suite」是随着程序的开发而逐步开发的。</li><li>Simplified debugging: 当一个测试失败时，问题出在哪里应该是很明显的。新写的代码需要被检查和修改。</li><li>System documentation: 测试本身是一种文档形式，描述了代码应该做什么。</li></ul><div class="hint-container tip"><p class="hint-container-title">Regression Testing</p><ul><li>回归测试是对系统的测试，以检查变化是否 &quot;破坏 &quot;了以前的工作代码。</li><li>在人工测试过程中，回归测试是昂贵的。但是，<strong>在自动化测试中，它是简单而直接的</strong>。每次对程序进行修改时，所有的测试都会重新运行。</li><li>在提交更改之前，测试必须“成功”运行。</li></ul></div><h2 id="release-testing" tabindex="-1"><a class="header-anchor" href="#release-testing" aria-hidden="true">#</a> Release Testing</h2><ul><li>发布测试是<strong>对系统的特定版本进行测试</strong>的过程，其目的是供<strong>开发团队以外</strong>的人使用。</li><li>发布测试过程的主要目标是使系统的供应商相信它足够好，可以使用。 <ul><li>因此，发布测试必须表明系统提供其指定的功能、性能和可靠性，并且在正常使用中不会出现故障。</li></ul></li><li>发布测试通常是一个黑箱测试「black-box」过程，测试只来自于系统规范。</li></ul><p>Release testing is a form of system testing.</p><ul><li>基于需求的测试包括检查每个需求并为其开发一个或多个测试。</li><li>场景测试使用典型场景来开发系统的测试用例。</li></ul><p>Important differences:</p><ul><li>一个没有参与系统开发的独立团队，应该负责发布测试。</li><li>开发团队的系统测试应着重于发现系统中的错误（defect testing）。</li><li>发布测试的目的是检查系统是否满足其要求，是否足以供外部使用（validation testing）。</li></ul><h2 id="requirements-based-testing" tabindex="-1"><a class="header-anchor" href="#requirements-based-testing" aria-hidden="true">#</a> Requirements-Based Testing</h2><img src="https://pic.hanjiaming.com.cn/2022/12/15/108404af1f9da.png" alt="1671071999321.png" style="zoom:50%;"><h2 id="features-tested-by-scenario" tabindex="-1"><a class="header-anchor" href="#features-tested-by-scenario" aria-hidden="true">#</a> Features Tested by Scenario</h2><ul><li>通过登录系统进行身份验证。</li><li>Home visit scheduling.</li><li>将指定的病人记录下载并上传到一台笔记本电脑</li><li>...</li></ul><h2 id="performance-testing" tabindex="-1"><a class="header-anchor" href="#performance-testing" aria-hidden="true">#</a> Performance Testing</h2><ul><li>发布测试的一部分可能涉及测试系统的新兴属性，如性能和可靠性。</li><li>测试应该反映系统的使用概况。</li><li>性能测试通常涉及规划一系列的测试，在这些测试中，负载被稳步增加，直到系统性能变得不可接受。</li><li>压力测试是性能测试的一种形式，系统被故意超载，以测试其故障行为。</li></ul><h2 id="user-testing" tabindex="-1"><a class="header-anchor" href="#user-testing" aria-hidden="true">#</a> User Testing</h2><ul><li>用户或客户测试是测试过程中的一个阶段，用户或客户对系统测试提供意见和建议。</li><li>用户测试是必不可少的，即使已经进行了全面的系统和发布测试。</li><li>原因是来自用户工作环境的影响对系统的可靠性、性能、可用性和稳健性有很大影响。这些在测试环境中是无法复制的。</li></ul><h3 id="types-of-user-testing" tabindex="-1"><a class="header-anchor" href="#types-of-user-testing" aria-hidden="true">#</a> Types of User Testing</h3><ul><li>Alpha testing <ul><li>软件的用户与开发团队合作，在开发者的现场测试软件。</li><li>在开发软件产品或定制软件时使用</li></ul></li><li>Beta testing <ul><li>向用户提供软件的发行版，使他们能够对软件进行试验。</li><li>大多用于在许多不同场合使用的软件产品。</li></ul></li><li>Acceptance testing <ul><li>客户对系统进行测试，以决定它是否可以从系统开发商那里接受并部署在客户环境中。</li><li>定制系统开发的一个固有部分。</li></ul></li></ul><h3 id="the-acceptance-testing-process" tabindex="-1"><a class="header-anchor" href="#the-acceptance-testing-process" aria-hidden="true">#</a> The Acceptance Testing Process</h3><p>敏捷方法和验收测试</p><ul><li>在敏捷方法中，用户/客户是开发团队的一部分，负责对系统的可接受性进行决策。</li><li>没有单独的验收测试过程。</li><li>这里的主要问题是嵌入式用户是否 &quot;典型&quot;，是否能代表所有系统利益相关者的利益。</li></ul><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><ul><li>测试只能显示程序中存在的错误。它不能证明没有剩余的错误。</li><li>开发测试是软件开发团队的责任。在系统发布给客户之前，<strong>应该由一个单独的团队负责测试。</strong></li><li>开发测试包括单元测试，即测试单个对象和方法的组件测试，即测试相关的对象组和系统测试，即测试部分或整个系统。</li><li>开发测试包括单元测试，即测试单个对象和方法的组件测试，即测试相关的对象组和系统测试，即测试部分或整个系统。</li><li>在测试软件时，你应该尝试 &quot;打破 &quot;软件，利用经验和准则来选择在其他系统中有效发现缺陷的测试案例类型。</li><li>只要有可能，你就应该编写自动测试。这些测试被嵌入到一个程序中，可以在每次对系统进行改变时运行。</li><li>测试优先开发是一种开发方法，即在要测试的代码之前编写测试。</li><li>场景测试包括发明一个典型的使用场景，并使用它来推导出测试案例。</li><li>验收测试是一个用户测试过程，目的是决定软件是否足够好，可以在其运行环境中部署和使用。</li></ul>',75),n=[s];function r(o,d){return e(),l("div",null,n)}const c=i(a,[["render",r],["__file","Program-Testing.html.vue"]]);export{c as default};
