import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as t}from"./app-0f162cc3.js";const e={},o=t(`<h1 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h1><p>类型转换分为</p><ul><li>显式转换</li><li>隐式转换</li></ul><p>大多数情况下，<strong>运算符和函数会自动将赋予它们的值转换为正确的类型</strong>。</p><p>比如，<code>alert</code> 会</p><ul><li>自动将任何值都转换为字符串以进行显示。</li><li>算术运算符会将值转换为数字。</li></ul><p>在某些情况下，我们需要将值显式地转换为我们期望的类型。</p><p>在本章中，我们不会讨论 object 类型。目前，我们将只学习原始类型。</p><h2 id="字符串转换" tabindex="-1"><a class="header-anchor" href="#字符串转换" aria-hidden="true">#</a> 字符串转换</h2><p>当我们需要一个字符串形式的值时，就会进行字符串转换。</p><p>比如，<code>alert(value)</code> 将 <code>value</code> 转换为字符串类型，然后显示这个值。我们也可以显式地调用 <code>String(value)</code> 来将 <code>value</code> 转换为字符串类型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// boolean</span>

value <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 现在，值是一个字符串形式的 &quot;true&quot;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，<code>false</code> 变成 <code>&quot;false&quot;</code>，<code>null</code> 变成 <code>&quot;null&quot;</code> 等。</p><h2 id="数字型转换" tabindex="-1"><a class="header-anchor" href="#数字型转换" aria-hidden="true">#</a> 数字型转换</h2><p>在算术函数和表达式中，会自动进行 number 类型转换。比如，当把除法 <code>/</code> 用于非 number 类型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;6&quot;</span> <span class="token operator">/</span> <span class="token string">&quot;2&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3, string 类型的值被自动转换成 number 类型后进行计算</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们也可以使用 <code>Number(value)</code> 显式地将这个 <code>value</code> 转换为 number 类型。</p><p>当我们从 string 类型源（如文本表单）中读取一个值，但期望输入一个数字时，通常需要进行显式转换。</p><p>如果该字符串不是一个有效的数字，转换的结果会是 <code>NaN</code>。例如：</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>let age = Number(&quot;an arbitrary string instead of a number&quot;);
alert(age); 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>number 类型转换规则：</p><table><thead><tr><th>值</th><th>变成……</th></tr></thead><tbody><tr><td><code>undefined</code></td><td><code>NaN</code></td></tr><tr><td><code>null</code></td><td><code>0</code></td></tr><tr><td><code>true 和 false</code></td><td><code>1</code> and <code>0</code></td></tr><tr><td><code>string</code></td><td>去掉首尾空格后的纯数字字符串中含有的数字。<br>如果剩余字符串为空，即<code>&quot;&quot;</code>，则转换结果为 <code>0</code>。<br>否则，将会从剩余字符串中“读取”数字。当类型转换出现 error 时返回 <code>NaN</code>。</td></tr></tbody></table><p>例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;   123   &quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 123</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;123z&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// NaN（从字符串“读取”数字，读到 &quot;z&quot; 时出现错误）</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 1</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>大多数数学运算符也执行这种转换，我们将在下一节中进行介绍。</p><h2 id="布尔型转换" tabindex="-1"><a class="header-anchor" href="#布尔型转换" aria-hidden="true">#</a> 布尔型转换</h2><p>通过调用 Boolean(value) 显式地进行转换。</p><p>转换规则如下：</p><ul><li>直观上为“空”的值 会被转换成 <code>false</code><ul><li><code>0</code></li><li>空字符串 <code>&quot;&quot;</code></li><li><code>null</code><ul><li><code>undefined</code></li><li><code>NaN</code></li></ul></li></ul></li><li>其他值变成 <code>true</code>。</li></ul><p>比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>

<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 空白，也是 true（任何非空字符串都是 true）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>有三种常用的类型转换：转换为 string 类型、转换为 number 类型和转换为 boolean 类型。</p><p><strong>字符串转换</strong> —— 转换发生在输出内容的时候，也可以通过 <code>String(value)</code> 进行显式转换。原始类型值的 string 类型转换通常是很明显的。</p><p><strong>数字型转换</strong> —— 转换发生在进行算术操作时，也可以通过 <code>Number(value)</code> 进行显式转换。</p><p>数字型转换遵循以下规则：</p><table><thead><tr><th>值</th><th>变成……</th></tr></thead><tbody><tr><td><code>undefined</code></td><td><code>NaN</code></td></tr><tr><td><code>null</code></td><td><code>0</code></td></tr><tr><td><code>true / false</code></td><td><code>1 / 0</code></td></tr><tr><td><code>string</code></td><td>“按原样读取”字符串，两端的空白会被忽略。空字符串变成 <code>0</code>。转换出错则输出 <code>NaN</code>。</td></tr></tbody></table><p><strong>布尔型转换</strong> —— 转换发生在进行逻辑操作时，也可以通过 <code>Boolean(value)</code> 进行显式转换。</p><p>布尔型转换遵循以下规则：</p><table><thead><tr><th>值</th><th>变成……</th></tr></thead><tbody><tr><td><code>0</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>, <code>&quot;&quot;</code></td><td><code>false</code></td></tr><tr><td>其他值</td><td><code>true</code></td></tr></tbody></table><p>上述的大多数规则都容易理解和记忆。人们通常会犯错误的值得注意的例子有以下几个：</p><ul><li>对 <code>undefined</code> 进行数字型转换时，输出结果为 <code>NaN</code>，而非 <code>0</code>。</li><li>对 <code>&quot;0&quot;</code> 和只有空格的字符串（比如：<code>&quot; &quot;</code>）进行布尔型转换时，输出结果为 <code>true</code>。</li></ul><p>我们在本小节没有讲 object 类型的转换。在我们学习完更多关于 JavaScript 的基础知识后，我们会在专门介绍 object 的章节中详细讲解 object 类型转换。</p>`,43),c=[o];function p(l,u){return a(),s("div",null,c)}const r=n(e,[["render",p],["__file","type-convert.html.vue"]]);export{r as default};
