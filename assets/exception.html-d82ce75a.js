import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-ca6d1798.js";const t={},p=e(`<h1 id="java-异常和处理" tabindex="-1"><a class="header-anchor" href="#java-异常和处理" aria-hidden="true">#</a> Java 异常和处理</h1><p>Java 异常分为 Error 和 Exception。后者是非致命的。又可以分成必检异常和免检异常。</p><ul><li>异常是一种对象。</li><li>异常是从方法中抛出的，方法的调用者可以捕获并处理异常。</li></ul><h2 id="抛出异常" tabindex="-1"><a class="header-anchor" href="#抛出异常" aria-hidden="true">#</a> 抛出异常</h2><p>异常由方法抛出</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuotientWithException</span><span class="token punctuation">{</span>
  
  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">quotient</span><span class="token punctuation">(</span><span class="token keyword">int</span> number1<span class="token punctuation">,</span> <span class="token keyword">int</span> number2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>number2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token string">&quot;Divisor cannot be zero&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> number1 <span class="token operator">/</span> number2<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于可能抛出必检异常的方法</p><ul><li>要么方法自己 catch</li><li>要么在方法头声明抛出，表明交给调用者处理</li></ul><div class="hint-container tip"><p class="hint-container-title">声明和抛出</p><ul><li>如果方法声明异常，用throws</li><li>如果抛出异常，用throw</li></ul></div><h2 id="捕获异常" tabindex="-1"><a class="header-anchor" href="#捕获异常" aria-hidden="true">#</a> 捕获异常</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">quotient</span><span class="token punctuation">(</span>number1<span class="token punctuation">,</span> number2<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number1 <span class="token operator">+</span> <span class="token string">&quot; / &quot;</span> <span class="token operator">+</span> number2 <span class="token operator">+</span> <span class="token string">&quot; is &quot;</span> 
                     <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Exception: an integer &quot;</span> <span class="token operator">+</span> 
                     <span class="token string">&quot;cannot be divided by zero &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>catch() 中可写 Exception1|E2|E3， 表明捕捉任意之一异常。</li><li>catch 父类异常也可捕获子类异常</li></ul><h3 id="从异常中捕获信息" tabindex="-1"><a class="header-anchor" href="#从异常中捕获信息" aria-hidden="true">#</a> 从异常中捕获信息</h3><p>在 catch 后的处理块种 使用<code>printStackTrace()</code> 可以打印跟踪信息</p><h2 id="异常的类型" tabindex="-1"><a class="header-anchor" href="#异常的类型" aria-hidden="true">#</a> 异常的类型</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/06/30/7e70e41e18629.png" alt="1656583864594.png" tabindex="0" loading="lazy"><figcaption>1656583864594.png</figcaption></figure><p>异常是对象。异常的根类是 <code>java.lang.Throwable</code>。所有异常类都直接或间接的继承自Throwable</p><ul><li>RuntimeException 免检异常</li><li>对于 Error 无能为力，为免检异常</li><li>Exception 必检异常</li></ul><div class="hint-container warning"><p class="hint-container-title">父类与子类声明异常</p><p>父类的方法无声明异常时，子类重写方法不可声明异常</p></div><h2 id="常见异常类" tabindex="-1"><a class="header-anchor" href="#常见异常类" aria-hidden="true">#</a> 常见异常类</h2><p>通过继承<code>java.lang.Exception</code> 来自定义异常类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InvalidRadiusException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
  <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>

  <span class="token doc-comment comment">/** Construct an exception */</span>
  <span class="token keyword">public</span> <span class="token class-name">InvalidRadiusException</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">&quot;Invalid radius &quot;</span> <span class="token operator">+</span> radius<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token doc-comment comment">/** Return the radius */</span>
  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> radius<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),i=[p];function c(o,l){return s(),a("div",null,i)}const d=n(t,[["render",c],["__file","exception.html.vue"]]);export{d as default};
