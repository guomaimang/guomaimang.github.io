import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e as l}from"./app-4ef9fb52.js";const i={},t=l(`<h1 id="数据的垂直分表" tabindex="-1"><a class="header-anchor" href="#数据的垂直分表" aria-hidden="true">#</a> 数据的垂直分表</h1><h2 id="垂直分表的出现背景" tabindex="-1"><a class="header-anchor" href="#垂直分表的出现背景" aria-hidden="true">#</a> 垂直分表的出现背景</h2><ul><li><strong>银行工作经验</strong>：曾在银行工作，核心业务表通常有上百个字段，当时认为这是习以为常的事情。</li><li><strong>现状反思</strong>：现在认为当时的做法存在问题，在大厂应用中必须进行垂直分表，否则系统处理将成为灾难。</li></ul><h2 id="水平分表-vs-垂直分表" tabindex="-1"><a class="header-anchor" href="#水平分表-vs-垂直分表" aria-hidden="true">#</a> 水平分表 vs 垂直分表</h2><p><strong>水平分表</strong>：</p><ul><li>以行为单位对数据进行切分。</li><li>分片算法：范围法、哈希法。</li><li>解决数据量大的存储问题。</li><li>表结构相同，数据存储在不同数据库的不同表中。</li></ul><p><strong>垂直分表</strong>：</p><ul><li>将一张大表按列切分成两张以上的小表分别存储。</li><li>优化SQL查询，通过主键关联完成数据查询。</li></ul><img src="https://pic.hanjiaming.com.cn/2024/12/18/f41b6228e3d6c.png" alt="1734518643080.png" style="zoom:33%;"><h2 id="mysql-innodb-存储引擎机制" tabindex="-1"><a class="header-anchor" href="#mysql-innodb-存储引擎机制" aria-hidden="true">#</a> MySQL InnoDB 存储引擎机制</h2><img src="https://pic.hanjiaming.com.cn/2024/12/18/9d08a366b4ed6.png" alt="1734518695903.png" style="zoom:50%;"><ul><li><strong>数据存储结构</strong>：每一行数据称为“行”，管理数据的基本单位称为“页”，每页默认大小为16K。</li><li><strong>压缩页</strong>：对页的数据进行压缩，存储空间比逻辑占用更小，但带来压缩和解压缩的效率问题。</li><li><strong>设计优化</strong>：尽可能多存储行数据，减少跨页检索，提高数据检索效率。</li></ul><img src="https://pic.hanjiaming.com.cn/2024/12/18/54c356dc211f8.png" alt="1734518952266.png" style="zoom:25%;"><h2 id="垂直分表的实际案例" tabindex="-1"><a class="header-anchor" href="#垂直分表的实际案例" aria-hidden="true">#</a> 垂直分表的实际案例</h2><p><strong>商品表拆分</strong></p><ul><li>假设商品表有100个字段，拆分为商品基本信息表和商品详情信息表。</li><li>不拆分时，商品完整信息占用1K字节，16K的页最多存储16条数据, 需要625 万页。</li><li>拆分后，基本信息表每行64个字节，1亿条数据需要39万页，数据扫描范围缩小16倍，提高执行效率。</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 商品表 <span class="token keyword">WHERE</span> 商品标题<span class="token operator">=</span><span class="token string">&#39;AD钙奶&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> 商品基本信息表 a<span class="token punctuation">,</span> 商品详情表 b <span class="token keyword">WHERE</span> a<span class="token punctuation">.</span>商品id<span class="token operator">=</span>b<span class="token punctuation">.</span>商品id <span class="token operator">and</span> a<span class="token punctuation">.</span>商品标题<span class="token operator">=</span><span class="token string">&#39;AD钙奶&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="垂直分表的依据" tabindex="-1"><a class="header-anchor" href="#垂直分表的依据" aria-hidden="true">#</a> 垂直分表的依据</h2><p>通过将重要字段单独剥离出一张小表，让每一页能够容纳更多的行，进而缩小数据扫描的范围，达到提高执行效率的目的。</p><ul><li><p><strong>条件</strong>：</p><ul><li><p>单表数据总量可能超过千万。</p></li><li><p>字段超过20个，且包含了超长的 Varchar、CLOB、BLOB 等字段</p></li></ul></li><li><p><strong>字段分类</strong>：</p><ul><li><strong>小表字段</strong>：查询排序时使用的字段（如分类编号、商品ID、品牌编号、逻辑删除标志）、高频访问的小字段（如商品名称、子标题、价格）。</li><li><strong>大表字段</strong>：低频访问字段（如商品的配送信息、售后声明、最后更新时间）、大字段（如商品图文详情、图片二进制数据、JSON原数据）。</li></ul></li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li><strong>垂直分表的目的</strong>：通过将重要字段单独剥离在小表中，让每页容纳更多数据，缩小数据扫描范围，提高执行效率。</li><li><strong>大字段处理</strong>：大字段对存储和检索性能影响大，必要时为大字段单独建表。</li></ul><p>实践中的注意事项</p><ul><li><strong>不需要垂直分表的情况</strong>：日志表等关键字段不多且数据总量小的表。</li><li><strong>满足条件</strong>：单表数据量大且字段多时，才考虑垂直分表。</li></ul>`,24),e=[t];function o(r,p){return s(),a("div",null,e)}const h=n(i,[["render",o],["__file","mysql-vertical-table.html.vue"]]);export{h as default};
