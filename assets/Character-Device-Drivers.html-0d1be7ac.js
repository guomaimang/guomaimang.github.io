import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-3b7bc918.js";const t={},p=e(`<h1 id="character-device-driver" tabindex="-1"><a class="header-anchor" href="#character-device-driver" aria-hidden="true">#</a> Character Device Driver</h1><p>在Unix中，有两个通用接口「 generic interfaces」与字符设备驱动开发有关。</p><p>用户程序：设备被视为特殊文件，用户只能通过文件操作系统调用（如打开、关闭、读、写等）访问设备，就像访问普通文件一样。</p><p>内核：为所有设备驱动程序提供通用接口和内核例程「generic interface and kernel routines」，以实现功能，并将功能注册到内核数据结构（如char/block设备驱动程序表）。</p><h2 id="interface-for-user-programs" tabindex="-1"><a class="header-anchor" href="#interface-for-user-programs" aria-hidden="true">#</a> Interface for User Programs</h2><p>设备被当作文件对待：用户程序通过文件操作系统调用访问设备。</p><p>每个文件都有一个inode，每个设备驱动都有一个主要号码。</p><p>当在用户程序中使用设备驱动程序时，我们需要创建一个特殊的文件，将其 major number (driver) 和 an inode 相关联，即 <code>mknod /dev/lab1 c 251 0</code></p><h2 id="设备驱动开发-内核" tabindex="-1"><a class="header-anchor" href="#设备驱动开发-内核" aria-hidden="true">#</a> 设备驱动开发（内核）</h2><p>Two tasks</p><ol><li>在通用接口的基础上实现功能</li><li>将设备驱动注册到内核数据结构中（char/block 设备驱动表）。</li></ol><p>The major number is the ID of a device driver.</p><h2 id="char设备驱动的通用接口" tabindex="-1"><a class="header-anchor" href="#char设备驱动的通用接口" aria-hidden="true">#</a> Char设备驱动的通用接口</h2><p>在&lt;linux/fs.h&gt;中定义了一个名为file_operations的数据结构。它基本上是一个函数指针的数组。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token class-name">file_operations</span><span class="token punctuation">{</span>
	<span class="token keyword">struct</span> <span class="token class-name">module</span> <span class="token operator">*</span> owner<span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>open<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>read<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token class-name">ssize_t</span> <span class="token punctuation">(</span><span class="token operator">*</span>write<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">,</span> 		<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token class-name">size_t</span><span class="token punctuation">,</span> <span class="token class-name">loff_t</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>release<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">inode</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了开发一个char驱动，我们需要在上述通用接口的基础上为设备实现相应的功能。</p><h2 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> &quot;Hello World&quot;</h2><p>Header files include the prototypes of kernel routines and data structures needed in the program. 「头文件包括程序中需要的内核例程和数据结构的原型。」</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/config.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/module.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/kernel.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/init.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fs.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/string.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;asm/uaccess.h&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Use &quot;static&quot;,变量的有效范围在包含它的文件中是有限的，因此我们可以避免名称污染。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEVICE_NAME</span> <span class="token string">&quot;comp309_char_lab1&quot;</span> </span>

<span class="token keyword">static</span> <span class="token keyword">char</span> msg<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Hello World!!!\\n&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">static</span> <span class="token keyword">int</span> major<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/10/26/39f1de5668d9b.png" alt="1666717092130.png" tabindex="0" loading="lazy"><figcaption>1666717092130.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/10/26/8096370ec6601.png" alt="CleanShot 2022-10-26 at 00.58.57@2x.png" tabindex="0" loading="lazy"><figcaption>CleanShot 2022-10-26 at 00.58.57@2x.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/10/26/639dc39a5d8a1.png" alt="1666719437623.png" tabindex="0" loading="lazy"><figcaption>1666719437623.png</figcaption></figure><h2 id="kernel-user-memory-space" tabindex="-1"><a class="header-anchor" href="#kernel-user-memory-space" aria-hidden="true">#</a> Kernel/User Memory Space</h2><p>在Unix中，内核虚拟内存地址空间和用户虚拟内存地址空间是分开的。只有内核才能访问的资源也称为“内核域”「kernel land」，而用户可以访问的资源也称为“用户域”「user land」。</p><img src="https://pic.hanjiaming.com.cn/2022/10/26/df06748f872cb.png" alt="1666717491269.png" style="zoom:33%;"><h2 id="register-unregister" tabindex="-1"><a class="header-anchor" href="#register-unregister" aria-hidden="true">#</a> Register/Unregister</h2><p>Register/Unregister a Character Device Driver</p><p><strong>Register</strong>: inform the kernel that we have a set of generic interface functions implemented for a certain kind of device</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">register_chrdev</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> major<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">file_operations</span> <span class="token operator">*</span>fops<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>major: 如果它是0，系统将自动分配一个未使用的主编号，并返回它；如果它大于0，这个函数将尝试保留这个编号作为字符设备的主编号，成功后返回0。</li><li>name: 一个指向该字符设备驱动程序名称的 char 指针。</li><li>fops: 一个指向file_operations结构的指针，通用接口函数「generic interface functions」的指针存放在这里。</li></ul><p><strong>Unregister</strong>: 通知内核，指定的字符设备驱动应该被删除。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">unregister_chrdev</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> major<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>major: major number of the character device.</li><li>name: a char pointer to the name of this character device driver.</li></ul><h2 id="compile-and-load-unload" tabindex="-1"><a class="header-anchor" href="#compile-and-load-unload" aria-hidden="true">#</a> Compile and Load/Unload</h2><p>Linux为设备驱动管理提供了一个动态模块加载/卸载方法。</p><p>Linux provides a dynamic module load/unload method for device driver management.</p><p>Compile:</p><ul><li>在 Makefile 和 KConfig 中添加模块依赖关系</li><li>Run command &quot;make menuconfig&quot; to set up the module as &quot;dynamically load/unload&quot;</li><li>Run command &quot;make&quot;</li></ul><p>Load/Unload:</p><ul><li><code>insmod xxx.ko</code></li><li><code>rmmod xxx</code></li></ul><p>where xxx is the module name.</p><h2 id="test" tabindex="-1"><a class="header-anchor" href="#test" aria-hidden="true">#</a> Test</h2><p>To the user land, 设备被视为文件，因此我们需要使用 &quot;mknod &quot;命令为设备驱动程序创建一个文件，例如</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>mknod <span class="token operator">/</span>dev<span class="token operator">/</span>lab1 c <span class="token number">251</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>User programs access devices through file operation system calls 「用户程序通过文件操作系统调用访问设备」例如, e.g.</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> fd<span class="token punctuation">;</span>
fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/lab1&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// Application Program</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/types.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/stat.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;linux/fcntl.h&gt;</span> </span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> fd<span class="token punctuation">,</span> count<span class="token punctuation">,</span> I<span class="token punctuation">;</span>
	<span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;/dev/lab1&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span> count <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;count-%d\\n&quot;</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span> 		buf<span class="token punctuation">[</span>count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%s&quot;</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><ul><li>Two generic interfaces are provided for using devices in Unix <ul><li>In the kernel, a generic interface is provided.</li><li>For user programs, devices are treated as files.</li></ul></li><li>要开发一个设备驱动程序，基本上我们需要完成两项任务。 <ul><li>在通用接口的基础上实现功能</li><li>Register the device driver into the kernel data structure (the char/block device driver table)</li></ul></li></ul><p>我们提供了一个简单的设备驱动程序 &quot;Hello&quot;，作为理解字符设备驱动程序内部的一个例子。</p>`,52),o=[p];function c(i,l){return s(),a("div",null,o)}const d=n(t,[["render",c],["__file","Character-Device-Drivers.html.vue"]]);export{d as default};
