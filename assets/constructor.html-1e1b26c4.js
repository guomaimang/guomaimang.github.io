const n=JSON.parse('{"key":"v-5e33a5c4","path":"/note/cs/programming/javascript/object/constructor.html","title":"构造器","lang":"zh-CN","frontmatter":{"article":false,"date":"2022-04-29T00:00:00.000Z","author":"javascriptInfo, Hirsun","description":"构造器 现在我们讨论的不是类，而是对象。之后我们会讨论类这个东西。 我们需要一种可以创建相同或者相似类型对象的操作。 这可以通过函数来实现。 构造函数 构造函数在技术上是常规函数。不过有两个约定（自发形成的）： 它们的命名以大写字母开头。 它们只能由 \\"new\\" 操作符来执行。 如： function User(name) { this.name = name; this.isAdmin = false; } let user = new User(\\"Jack\\"); alert(user.name); // Jack alert(user.isAdmin); // false","head":[["meta",{"property":"og:url","content":"https://guomaimang.github.io/note/cs/programming/javascript/object/constructor.html"}],["meta",{"property":"og:site_name","content":"HAN Jiaming | Hirsun | 韩佳明"}],["meta",{"property":"og:title","content":"构造器"}],["meta",{"property":"og:description","content":"构造器 现在我们讨论的不是类，而是对象。之后我们会讨论类这个东西。 我们需要一种可以创建相同或者相似类型对象的操作。 这可以通过函数来实现。 构造函数 构造函数在技术上是常规函数。不过有两个约定（自发形成的）： 它们的命名以大写字母开头。 它们只能由 \\"new\\" 操作符来执行。 如： function User(name) { this.name = name; this.isAdmin = false; } let user = new User(\\"Jack\\"); alert(user.name); // Jack alert(user.isAdmin); // false"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-15T05:33:29.000Z"}],["meta",{"property":"article:author","content":"javascriptInfo, Hirsun"}],["meta",{"property":"article:published_time","content":"2022-04-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-15T05:33:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"构造器\\",\\"description\\":\\"构造器 现在我们讨论的不是类，而是对象。之后我们会讨论类这个东西。 我们需要一种可以创建相同或者相似类型对象的操作。 这可以通过函数来实现。 构造函数 构造函数在技术上是常规函数。不过有两个约定（自发形成的）： 它们的命名以大写字母开头。 它们只能由 \\\\\\"new\\\\\\" 操作符来执行。 如： function User(name) { this.name = name; this.isAdmin = false; } let user = new User(\\\\\\"Jack\\\\\\"); alert(user.name); // Jack alert(user.isAdmin); // false\\"}"]]},"headers":[{"level":2,"title":"构造函数","slug":"构造函数","link":"#构造函数","children":[]},{"level":2,"title":"new function()","slug":"new-function","link":"#new-function","children":[]},{"level":2,"title":"构造器的 return","slug":"构造器的-return","link":"#构造器的-return","children":[]},{"level":2,"title":"省略括号","slug":"省略括号","link":"#省略括号","children":[]},{"level":2,"title":"构造器中的方法","slug":"构造器中的方法","link":"#构造器中的方法","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1726378409000,"updatedTime":1726378409000,"contributors":[{"name":"hanjiaming","email":"47519540+guomaimang@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":7.85,"words":785},"filePathRelative":"note/cs/programming/javascript/object/constructor.md","localizedDate":"2022年4月29日","excerpt":"<h1> 构造器</h1>\\n<p>现在我们讨论的不是类，而是对象。之后我们会讨论类这个东西。</p>\\n<p>我们需要一种可以创建相同或者相似类型对象的操作。</p>\\n<p>这可以通过函数来实现。</p>\\n<h2> 构造函数</h2>\\n<p>构造函数在技术上是常规函数。不过有两个约定（自发形成的）：</p>\\n<ol>\\n<li>它们的命名以大写字母开头。</li>\\n<li>它们只能由 <code>\\"new\\"</code> 操作符来执行。</li>\\n</ol>\\n<p>如：</p>\\n<div class=\\"language-javascript line-numbers-mode\\" data-ext=\\"js\\"><pre class=\\"language-javascript\\"><code><span class=\\"token keyword\\">function</span> <span class=\\"token function\\">User</span><span class=\\"token punctuation\\">(</span><span class=\\"token parameter\\">name</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>name <span class=\\"token operator\\">=</span> name<span class=\\"token punctuation\\">;</span>\\n  <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>isAdmin <span class=\\"token operator\\">=</span> <span class=\\"token boolean\\">false</span><span class=\\"token punctuation\\">;</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token keyword\\">let</span> user <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">User</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Jack\\"</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n<span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span>user<span class=\\"token punctuation\\">.</span>name<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// Jack</span>\\n<span class=\\"token function\\">alert</span><span class=\\"token punctuation\\">(</span>user<span class=\\"token punctuation\\">.</span>isAdmin<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span> <span class=\\"token comment\\">// false</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
