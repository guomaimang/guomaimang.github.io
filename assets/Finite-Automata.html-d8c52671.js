import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as t,e as n}from"./app-743150fd.js";const e={},l=n('<h1 id="finite-automata" tabindex="-1"><a class="header-anchor" href="#finite-automata" aria-hidden="true">#</a> Finite Automata</h1><figure><img src="https://pic.hanjiaming.com.cn/2022/11/09/43541d03d3dac.png" alt="1667964609923.png" tabindex="0" loading="lazy"><figcaption>1667964609923.png</figcaption></figure><p>通过放入有限自动机模型来实施正则表达式识别算法。</p><img src="https://pic.hanjiaming.com.cn/2022/11/09/3384a5d47d374.png" alt="1667964754178.png" style="zoom:33%;"><h2 id="非确定性有限自动机-nfa" tabindex="-1"><a class="header-anchor" href="#非确定性有限自动机-nfa" aria-hidden="true">#</a> 非确定性有限自动机(NFA)</h2><h3 id="nondeterministic-finite-automata" tabindex="-1"><a class="header-anchor" href="#nondeterministic-finite-automata" aria-hidden="true">#</a> Nondeterministic Finite Automata</h3><p>非确定性有限自动机 (NFA) 由 5 个组件组成: (Σ, 𝑆, 𝑆<sub>0</sub>, 𝐹, move).</p><ul><li>Σ is the input alphabet</li><li>𝑆 is the <strong>set of states</strong></li><li>𝑆<sub>0</sub> is the start state</li><li>𝐹 ⊆ 𝑆 is the set of accepting states「接受状态的集合」</li><li>Move 是将 <em>状态-符号对</em> 映射到 <em>状态集</em> 的 <strong>转换函数</strong>。</li></ul><p><img src="https://pic.hanjiaming.com.cn/2022/11/09/3b19e7fcc60f1.png" alt="1667966458326.png" style="zoom:33%;"><img src="https://pic.hanjiaming.com.cn/2022/11/09/91d0050e0fa27.png" alt="1667966494550.png" style="zoom:40%;"></p><img src="https://pic.hanjiaming.com.cn/2022/11/09/8b5df04a0d5ad.png" alt="1667966648091.png" style="zoom:33%;"><img src="https://pic.hanjiaming.com.cn/2022/11/09/59aad3621d09a.png" alt="1667966677835.png" style="zoom:33%;"><p>基于 NFA 的识别（决策）难以实施</p><ul><li>在一个给定的状态下，可以从一个输入有多个转换</li><li>Can have 𝜀-transitions</li><li>易于从正则表达式中形成</li><li>难以实现识别（决策）算法</li></ul><p>另一种有限自动机：Deterministic Finite Automata (DFA)「确定性有限自动机 (DFA)」</p><h3 id="regular-expression-to-nfa" tabindex="-1"><a class="header-anchor" href="#regular-expression-to-nfa" aria-hidden="true">#</a> Regular Expression to NFA</h3><p>每个正则表达式都可以转换为 NFA，遵循以下基本规则：</p><figure><img src="https://pic.hanjiaming.com.cn/2022/11/09/23aea445d2cf6.png" alt="1667970474594.png" tabindex="0" loading="lazy"><figcaption>1667970474594.png</figcaption></figure><p>Example: regular expression to NFA</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ol><li>拆开连接</li><li>逐步拆开外层表示</li><li>最后表示内层</li></ol></div><figure><img src="https://pic.hanjiaming.com.cn/2022/11/09/f781bc4485835.png" alt="1667970719358.png" tabindex="0" loading="lazy"><figcaption>1667970719358.png</figcaption></figure><h2 id="确定性有限自动机-dfa" tabindex="-1"><a class="header-anchor" href="#确定性有限自动机-dfa" aria-hidden="true">#</a> 确定性有限自动机(DFA)</h2><h3 id="deterministic-finite-automata" tabindex="-1"><a class="header-anchor" href="#deterministic-finite-automata" aria-hidden="true">#</a> Deterministic Finite Automata</h3><p>每个状态下每个输入有一个过渡。</p><p>DFA 是 NFA 的一个特例：</p><ul><li>One transition per input per state</li><li>No 𝜀-transitions</li></ul><img src="https://pic.hanjiaming.com.cn/2022/11/09/860cbb5e7a92a.png" alt="1667966795659.png" style="zoom:33%;"><ul><li>NFA: 容易生成字符串。</li><li><strong>DFA: 易于生成和识别字符串。</strong></li><li>NFA：给定一个输入符号，可以进入几个状态中的任何一个。</li><li><strong>DFA：给定一个输入符号，只能进入一个确定性的状态。</strong></li><li>NFA：由于 𝜀 - 转换，当没有输入时可能会进入另一个状态。</li><li><strong>DFA：没有输入时哪里都不去；没有任何𝜀 - 过渡。</strong></li></ul><img src="https://pic.hanjiaming.com.cn/2022/11/09/3148b86ca60c6.png" alt="1667969094735.png" style="zoom:50%;"><h3 id="table-implementation" tabindex="-1"><a class="header-anchor" href="#table-implementation" aria-hidden="true">#</a> Table Implementation</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/11/09/7d5ebf647443f.png" alt="1667969268659.png" tabindex="0" loading="lazy"><figcaption>1667969268659.png</figcaption></figure><h3 id="algorithm-simulating-a-dfa" tabindex="-1"><a class="header-anchor" href="#algorithm-simulating-a-dfa" aria-hidden="true">#</a> Algorithm: Simulating a DFA</h3><ul><li>输入：输入字符串𝑥，以文件末尾的字符eof为终点。 <ul><li>DFA 𝐷，开始状态为𝑠<sub>0</sub>，接受<strong>状态集为𝐹</strong>。</li></ul></li><li>The answer “yes” if 𝐷 accepts 𝑥, “no” otherwise.</li><li>Method：将以下算法应用于输入字符串𝑥。 <ul><li>move(𝑠, 𝑐) 给出了从状态𝑠过渡到输入𝑐的状态。</li><li>nextchar 返回输入字符串𝑥的下一个字符。</li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2022/11/09/137cde0b120f5.png" alt="1667970005187.png" style="zoom:50%;"><h3 id="every-nfa-can-be-converted-to-a-dfa" tabindex="-1"><a class="header-anchor" href="#every-nfa-can-be-converted-to-a-dfa" aria-hidden="true">#</a> Every NFA can be converted to a DFA</h3>',34),o=[l];function r(s,c){return a(),t("div",null,o)}const g=i(e,[["render",r],["__file","Finite-Automata.html.vue"]]);export{g as default};
