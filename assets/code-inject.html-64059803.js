import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as t,e as a}from"./app-d8c979a2.js";const n={},s=a(`<h1 id="injection-attacks" tabindex="-1"><a class="header-anchor" href="#injection-attacks" aria-hidden="true">#</a> Injection Attacks</h1><h2 id="what-is-injection-attack" tabindex="-1"><a class="header-anchor" href="#what-is-injection-attack" aria-hidden="true">#</a> What is Injection Attack?</h2><ul><li>Attackers can inject into a website some malicious contents that may be evaluated as commands</li><li>How to achieve that?–by crafting inputs with special characters</li><li><strong>Fundamental reason: the blurred boundary between data and code</strong></li><li><strong>General Defense: Apply Rigorous Whitelist Validations</strong></li><li>Many different kinds of injection <ul><li>SQL Injection</li><li>OS Command Injection</li><li>File-based XSS Injection</li><li>CSS Injection</li></ul></li></ul><h2 id="sql-injection" tabindex="-1"><a class="header-anchor" href="#sql-injection" aria-hidden="true">#</a> SQL Injection</h2><ul><li>Database holds a lot of sensitive data <ul><li>For example, user data, password, names, email, credit card numbers</li><li>Attractive target: sell for profit</li></ul></li><li>SQL Injection is a type of attack to inject SQL statements via specially crafted user inputs</li></ul><h3 id="an-example-vulnerability" tabindex="-1"><a class="header-anchor" href="#an-example-vulnerability" aria-hidden="true">#</a> An Example Vulnerability</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>catID <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>catID<span class="token punctuation">;</span> <span class="token comment">// 1; DROP TABLE products--;</span>
query <span class="token operator">=</span> <span class="token identifier"><span class="token punctuation">\`</span>SELECT * FROM products WHERE catid = \${catID}<span class="token punctuation">\`</span></span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>The problem is that: user inputs (i.e., req.body.catID) are put into final SQL statement directly (without validation or sanitization</p><p>Consequences: malicious user inputs could lead to unexpected SQL statements that will compromise Confidentiality「妥协机密性」 (like Information Leakage) or Integrity (like Modifying/Deleting DB Data)</p><h3 id="some-sample-sql-injection-attacks" tabindex="-1"><a class="header-anchor" href="#some-sample-sql-injection-attacks" aria-hidden="true">#</a> Some Sample SQL Injection Attacks</h3><p>Given a vulnerability shown in previous, attackers can:</p><ul><li>Get all products: by using &quot;1 OR 1=1&quot;</li><li>query == &quot;SELECT * FROM products WHERE catid=1 OR 1=1&quot;;</li></ul><p>To steal users data (via UNION SELECT): Brute-force the number of columns in use by the original table by using:</p><ul><li>0 UNION SELECT null, null (appending “,null” until no error)</li><li>e.g.,SELECT * FROM products WHERE catid = 0 UNION SELECT null, null, null, null</li><li>Or guess table and column names (No need to guess for open-source proj.)</li><li>e.g., SELECT * FROM products WHERE catid = 0 UNION SELECT null, null, email, null FROM users</li></ul><h3 id="other-sql-injection-attacks" tabindex="-1"><a class="header-anchor" href="#other-sql-injection-attacks" aria-hidden="true">#</a> Other SQL Injection Attacks</h3><ul><li>Attackers can do a lot more than those demonstrated, include: <ul><li>Commenting the statement using–after the injection point</li><li>E.g., removing the output number limit below</li><li>SELECT * FROM products WHERE pid = 0 UNION SELECT 1, 1, email, 1 FROM users ;--LIMIT</li></ul></li><li>Escaping from original quotes <code>\\&#39; or \\&quot;</code> -》 <code>with magic_quotes_gpc (&lt;PHP5.3) auto escape ” and ’ to become \\” and \\&#39;</code></li><li>Not secure method to defend injection for appended query string</li><li>Destroying tables using DROP TABLE users</li><li>Exposing database schema -&gt; e.g., mysql: SELECT * FROM information_schema.tables</li><li>Dumping all data into a single file for easy download</li></ul><h3 id="defending-sql-injection" tabindex="-1"><a class="header-anchor" href="#defending-sql-injection" aria-hidden="true">#</a> Defending SQL Injection</h3><h4 id="use-prepared-statements-properly-for-every-sql-call" tabindex="-1"><a class="header-anchor" href="#use-prepared-statements-properly-for-every-sql-call" aria-hidden="true">#</a> Use Prepared Statements properly for every SQL call</h4><h4 id="defense-in-depth-strategy" tabindex="-1"><a class="header-anchor" href="#defense-in-depth-strategy" aria-hidden="true">#</a> Defense-in-Depth Strategy</h4><p>Apart from applying the specific SQL injection defense, we can also take:</p><ul><li>Least-privilege approach</li><li>For a database that has its own access control -&gt; No more-than-needed permissions (READ/WRITE only for specific tables)</li><li>Do not install unnecessary packages/extensions</li><li>Compartmentalization / Separation of Privilege <ul><li>For a database that has its own access control, Separate databases of different sensitivity, accessible by different DB users</li><li>For SQLite, Create a separate database for sensitive table like users, shopTransactions</li><li>Promote Privacy, Always encrypt or apply one-way hash functions for sensitive data</li></ul></li><li>Upgrade to the latest DB version</li></ul><h2 id="os-command-injection-attack" tabindex="-1"><a class="header-anchor" href="#os-command-injection-attack" aria-hidden="true">#</a> OS Command Injection Attack</h2><p>Example Vulnerability:</p><p>If you’re to write a DNS lookup application, Intuitively, you want to use the nslookup command</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>const domain = req.query.domain;
const command = \`nslookup \${domain}\`;
exec(command, (error, output) =&gt; {res.send(output);}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Again, req.query.domain is not properly escaped or validated</p><p>Execute any commands using the privilege of the web server</p><h2 id="file-based-xss-injection" tabindex="-1"><a class="header-anchor" href="#file-based-xss-injection" aria-hidden="true">#</a> File-based XSS Injection</h2><h3 id="cause" tabindex="-1"><a class="header-anchor" href="#cause" aria-hidden="true">#</a> Cause</h3><p>An application is vulnerable if it allows file upload yet does not check the MIME-type at server, (File + file name) are the attack vectors</p><p>Browsers may disregard the Content-type header and detect the MIME-type themselves by sniffing the contents</p><ul><li>MIME Sniffing or Content type sniffing</li><li>Try to determine the effective file type (it varies across browsers)</li></ul><p>Consequence: User-uploaded file can be parsed as HTML (or JavaScript!)</p><p>Problems were fixed in the latest browser versions, but there could be new vulnerabilities of this kind found in future</p><div class="hint-container info"><p class="hint-container-title">MIME</p><p>MIME（Multipurpose Internet Mail Extensions，多用途互联网邮件扩展）类型是一种标准，用来表示文件的类型和格式。浏览器和服务器通过MIME类型来决定如何处理和显示文件。例如，text/html表示HTML文件，image/png表示PNG图片文件。</p></div><h3 id="defending-file-based-xss-injection" tabindex="-1"><a class="header-anchor" href="#defending-file-based-xss-injection" aria-hidden="true">#</a> Defending File-based XSS Injection</h3><ol><li>As a user, please upgrade to the latest versions of your browser for the</li><li>As a developer, take a Defense-in-Depth strategy <ol><li>Validate the MIME-type at server side -&gt; Note that validating file.mimetype is insufficient, uploading a file that ends with .jpg will pass the validation</li><li>Host user-uploaded content in a separate origin <ol><li>User-supplied file is executed in another origin</li><li>Even for users of outdated browsers, these files cannot launch XSS</li><li>Example: Google uses a separate domain for Gmail attachment</li></ol></li><li>Apply an extra header X-Content-Type-Options: nosniff for IE <ol><li>Create a file called .htaccess in the folder for file uploads</li><li>Put the following apache script to insert the header for all files in the folder header set X-Content-Type-Options nosnif</li></ol></li></ol></li></ol><h2 id="css-injection" tabindex="-1"><a class="header-anchor" href="#css-injection" aria-hidden="true">#</a> CSS Injection</h2><p><strong>Cause: Forcing browsers to parse HTML as CSS</strong></p><h3 id="example-vulnerability" tabindex="-1"><a class="header-anchor" href="#example-vulnerability" aria-hidden="true">#</a> Example Vulnerability</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> Send an email with subject {}*{font-family:’
→ Seems to be an un-terminating CSS rule
- When received, the HTML code will look like:

&lt;html&gt;&lt;body&gt;
…&lt;td&gt;Subject: {}*{font-family:&#39;&lt;/td&gt;...
&lt;form action=&quot;http://gmail.com/forwardemail&quot; method=&quot;POST&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;nonce&quot; value=&quot;SD9fsjdf35HE4f&quot;&gt;
&lt;input type=&quot;submit&quot; value=&quot;Forward&quot;&gt;
...
&lt;/form&gt;
…&lt;/body&gt;&lt;/html&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Victim「受害者」 visits a malicious page (e.g. by clicking a link in the email):</p><figure><img src="https://pic.hanjiaming.com.cn/2025/04/09/ce838a2ad97ef.png" alt="1744172699831.png" tabindex="0" loading="lazy"><figcaption>1744172699831.png</figcaption></figure><h3 id="defending-css-injection" tabindex="-1"><a class="header-anchor" href="#defending-css-injection" aria-hidden="true">#</a> Defending CSS Injection</h3><p>As a user</p><ul><li>to protect yourself, upgrade to the latest versions of your browser</li><li>This problem had been fixed by most modern browsers</li></ul><p>As a developer:</p><ul><li><strong>ALWAYS apply whitelist validation on users’ input whenever possible!!</strong></li><li>Blacklist output sanitization is subject to future unexpected flaws</li></ul>`,48),l=[s];function o(r,d){return i(),t("div",null,l)}const p=e(n,[["render",o],["__file","code-inject.html.vue"]]);export{p as default};
