import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as t,e as o}from"./app-d8c979a2.js";const a={},n=o('<h1 id="memory-in-os" tabindex="-1"><a class="header-anchor" href="#memory-in-os" aria-hidden="true">#</a> Memory in OS</h1><p>A program <strong>must be brought from disk into main memory</strong> and <strong>loaded within a process for it to be run</strong>.</p><ul><li>Executable code (compiled) or source code (interpreted).</li><li>Recall that <strong>a process is a program in execution.</strong></li></ul><p><strong>Main memory/registers are storage that CPU can directly access.</strong></p><ul><li>A register can be accessed in one CPU clock cycle.</li><li>A main memory access can take many cycles.</li><li>Cache sits between main memory and CPU registers to improve memory access time.</li></ul><h2 id="address-binding-to-memory" tabindex="-1"><a class="header-anchor" href="#address-binding-to-memory" aria-hidden="true">#</a> Address Binding to Memory</h2><p>绑定地址是指在<strong>程序运行时</strong>将<strong>编译后</strong>的<strong>程序代码中的地址转化为内存地址</strong>的过程。</p><p>Address binding of instructions and data to memory can <strong>happen</strong> at <strong>three</strong> different stages.</p><p>编译时间</p><ul><li>如果内存位置提前知道，可以生成绝对代码。</li><li>如果起始位置发生变化，必须重新编译代码。</li></ul><p>加载时间</p><ul><li>如果内存位置在编译时不知道，<strong>必须生成可重定位的代码</strong>。</li><li>地址在<strong>程序加载后定义</strong>。</li></ul><p>The logical and physical addresses are the same in both compile-time and load-time address-binding schemes, but the logical and physical addresses differ in run-time address-binding scheme.</p><p>执行或运行时间</p><ul><li>如果进程在执行过程中可以从一个内存段移动到另一个，必须推迟到运行时间进行绑定。</li><li>需要硬件支持<strong>动态地址映射</strong>（base and limit registers）。</li></ul><p>Only the translation from virtual to physical address needs to be changed when a program moves around.</p><figure><img src="https://pic.hanjiaming.com.cn/2022/03/14/b1e63bb98b997.png" alt="CleanShot 2022-03-14 at 16.18.49@2x.png" tabindex="0" loading="lazy"><figcaption>CleanShot 2022-03-14 at 16.18.49@2x.png</figcaption></figure><h2 id="logical-and-physical-address" tabindex="-1"><a class="header-anchor" href="#logical-and-physical-address" aria-hidden="true">#</a> Logical and Physical Address</h2><p>内存管理技术需要支持运行时的地址绑定。这是因为程序在执行过程中可能会四处移动。</p><p>内存管理的关键思想是逻辑地址和物理地址的分离。</p><p>逻辑地址是由CPU生成的地址，例如，一条指令指的是存储在某个特定地址的整数。当它与物理地址不同时，这也被称为虚拟地址。</p><p>物理地址是被主存储器发送的地址。</p><h2 id="memory-management-unit" tabindex="-1"><a class="header-anchor" href="#memory-management-unit" aria-hidden="true">#</a> Memory Management Unit</h2><p>每个虚拟地址<strong>必须被映射或翻译成运行时绑定方案中的物理地址</strong>，这在获取<strong>指令</strong>和获取<strong>每个操作数</strong>时发生一次。</p><p>这种转换必须是<strong>非常快速和有效</strong>的，所以它必须由<strong>硬件</strong>完成。<br> 将虚拟地址映射到物理地址的硬件设备被称为内存管理单元或MMU。</p><p>User process only deals with logical addresses. It <strong>never sees the real physical addresses</strong>.</p><p>In the simplest MMU solution, the value in a <strong>special relocation register</strong> is added to every logical address generated by a user process to form the physical address when it is sent to memory. <strong>The relocation register is like the base register</strong>.「在最简单的MMU解决方案中，一个特殊的重定位寄存器中的值被添加到每个由用户进程产生的逻辑地址中，当它被发送到内存时，形成物理地址。重定位寄存器就像基础寄存器一样。」</p><figure><img src="https://pic.hanjiaming.com.cn/2022/03/14/b1e63bb98b997.png" alt="CleanShot 2022-03-14 at 16.18.49@2x.png" tabindex="0" loading="lazy"><figcaption>CleanShot 2022-03-14 at 16.18.49@2x.png</figcaption></figure><h2 id="memory-allocation" tabindex="-1"><a class="header-anchor" href="#memory-allocation" aria-hidden="true">#</a> Memory Allocation</h2><p>Main memory is usually divided into two partitions.</p><ul><li>Resident OS is usually stored <strong>in low memory</strong>, together with <strong>interrupt vector and interrupt handlers</strong>.</li><li>User processes are stored in <strong>high memory</strong>.</li></ul><p>Memory allocation is concerned with「被涉及到」 <strong>where a user process is actually placed when it is swapped/moved into main memory.</strong></p><img src="https://pic.hanjiaming.com.cn/2022/03/14/00a913fe33b55.png" alt="1647249842197.png" style="zoom:50%;"><p>We assume that the whole process will be stored in the main memory for it to be executed.</p><h3 id="contiguous-allocation" tabindex="-1"><a class="header-anchor" href="#contiguous-allocation" aria-hidden="true">#</a> Contiguous Allocation</h3><p><strong>Contiguous allocation</strong>: allocate a single block of memory of size sufficient to hold the process. 「连续分配：分配一个大小的单个内存块，足以保持该过程。」</p><p>The most straightforward solution is to allocate a single block of memory to hold a process. This is called contiguous allocation.</p><ul><li>One single block to hold one process (single partition).</li><li>Multiple blocks to hold multiple processes (multiple partition).</li></ul><p>A pair of registers are used to protect user processes from accidentally stepping into each other and changing operating system code and data.</p><ul><li>The relocation register contains the value of smallest physical address for the process.</li><li>The limit register contains the range (size) of logical address space.</li><li>Each logical address must be less than the limit register.</li><li>MMU maps logical address dynamically into physical address by adding it to the relocation register.</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2022/03/14/72fa1db79299d.png" alt="1647250278330.png" tabindex="0" loading="lazy"><figcaption>1647250278330.png</figcaption></figure><p><strong>Non-contiguous allocation</strong>: <strong>chop up the process and allocate multiple blocks of memory</strong> to hold the process. The two major schemes are <strong>paging</strong> and <strong>segmentation</strong>.</p><h4 id="multiple-fixed-partition-method" tabindex="-1"><a class="header-anchor" href="#multiple-fixed-partition-method" aria-hidden="true">#</a> Multiple fixed partition method</h4><p>四十年前，最早的、经典的操作系统之一IBM MVS就使用了这个方法。</p><ul><li>Called MFT: <strong>M</strong>ultiprogramming with a <strong>F</strong>ixed number of <strong>T</strong>asks.</li><li>Divide the memory into several partitions.</li><li>When a partition is free, a job is selected to be loaded into the partition.</li><li>Only at most n jobs can be executed if there are n partitions.</li><li>Very simple to manage.</li><li>如果有许多小工作，就不太有效，因为许多分区只被使用到非常小的程度，总的可用内存仍然相当大。</li></ul><h4 id="multiple-variable-partition-method" tabindex="-1"><a class="header-anchor" href="#multiple-variable-partition-method" aria-hidden="true">#</a> Multiple variable partition method</h4><p>Commonly used in <strong>IBM MVS</strong>.</p><ul><li>Called MVT: <strong>M</strong>ultiprogramming with a <strong>V</strong>ariable number of <strong>T</strong>asks.</li><li>A block of available memory is called a <strong>hole</strong>.</li><li>不同大小的孔散布在整个存储器中。「Holes of various size are scattered throughout the memory. 」</li><li><strong>当一个进程到达时，它被从一个足够大的洞中分配内存，以容纳它。</strong>「When a process arrives, it is allocated memory from a hole large enough to accommodate it. 」</li><li>OS maintains information about <strong>allocated partitions</strong> and <strong>free partitions</strong> (i.e. holes), often <strong>in the form of linked lists</strong>.</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2022/03/14/5c37061bdf300.png" alt="1647251902894.png" tabindex="0" loading="lazy"><figcaption>1647251902894.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/03/14/2648aee2ad1fe.png" alt="1647252039959.png" tabindex="0" loading="lazy"><figcaption>1647252039959.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/03/14/de655d2a0d4d0.png" alt="1647252084644.png" tabindex="0" loading="lazy"><figcaption>1647252084644.png</figcaption></figure>',51),s=[n];function r(l,g){return i(),t("div",null,s)}const p=e(a,[["render",r],["__file","Memory-in-os.html.vue"]]);export{p as default};
