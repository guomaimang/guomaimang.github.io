import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,a as n,b as s,d as e,e as c}from"./app-47a9f5de.js";const l={},r=c(`<h1 id="unix-file-system" tabindex="-1"><a class="header-anchor" href="#unix-file-system" aria-hidden="true">#</a> Unix File System</h1><ul><li>File system provides abstractions of naming, storage, and access of files.</li><li>A file is a container of some information: data, program.</li></ul><p>在 Unix 中，设备（磁盘、磁带、CD ROM、屏幕、键盘、打印机、鼠标等）也被视为文件，以便为应用程序提供一个统一的、独立于设备的接口。</p><h2 id="how-to-handle-devices" tabindex="-1"><a class="header-anchor" href="#how-to-handle-devices" aria-hidden="true">#</a> How to handle devices</h2><p>操作系统向程序员提供 system calls，以执行对设备的控制和I/O。这些系统调用由 device drivers 处理，它隐藏了设备操作的细节，并保护设备不被非法使用。</p><p>一些操作系统为每种类型的支持设备提供了特定的系统调用。<strong>在Unix中，磁盘文件和其他设备的命名和访问方式与数据文件相同。</strong></p><ul><li>Unix 提供统一的设备接口（称为 file descriptors）</li><li>Allow uniform access to most devices through file system calls: <code>open</code>, <code>close</code>,<code> read</code>, <code>write</code>, etc.</li></ul><h2 id="types-of-files" tabindex="-1"><a class="header-anchor" href="#types-of-files" aria-hidden="true">#</a> Types of files</h2><ul><li>Regular file：磁盘上的普通数据文件—包含组织成线性数组的数据字节</li><li>Special file：代表一个设备的文件—位于<code>/dev</code>目录中 <ul><li>Block special file：以块或块的形式传输信息的设备，就像磁盘、CD ROM 一样</li><li>Character special file: 以必须顺序访问的字节流传输信息的设备，例如键盘、打印机</li><li>FIFO special file: 用于进程间通信 (e.g. pipe).</li></ul></li><li>Directories: provided to allow names (not physical locations) of files to be <ul><li>用户给出一个文件名，Unix将其转换为物理文件的位置--通过目录完成。</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">普通文件和目录文件的区别</p><ul><li>Contents: data vs file info</li><li>Operations: what can be done and who can do them</li></ul></div><p>对于每个文件，你可以看到在用户和组主之前有十个字符。第一个字符告诉我们该文件的类型。</p><img src="https://pic.hanjiaming.com.cn/2022/10/22/aa2970de59c07.png" alt="1666413290222.png" style="zoom:33%;"><ul><li>l 指的是软链或符号链接，硬链还是一般文件。</li></ul><p>接下来的9个字符代表用户、组和所有的访问权分配。</p><img src="https://pic.hanjiaming.com.cn/2022/10/22/53b88adf3e04d.png" alt="1666413413633.png" style="zoom:33%;"><h2 id="hierarchical-file-organization" tabindex="-1"><a class="header-anchor" href="#hierarchical-file-organization" aria-hidden="true">#</a> Hierarchical file organization</h2><p>Unix文件系统有一个分层的树状结构，内部节点是目录，叶子节点是文件。</p><ul><li>绝对的或完全限定的路径名唯一地指定了一个文件，例如，/dirA/My1.dat不同于/dirA/dirB/My1.dat。</li><li>我们也可以使用相对路径名，它从当前目录而不是根目录开始，例如，./My2.dat（如果当前工作目录是dirB）。</li></ul><img src="https://pic.hanjiaming.com.cn/2022/10/22/3335a8d95dd2e.png" alt="1666413817343.png" style="zoom:33%;"><h2 id="current-working-directory" tabindex="-1"><a class="header-anchor" href="#current-working-directory" aria-hidden="true">#</a> Current working directory</h2><p>在任何时候，每个进程都有一个相关的目录，称为当前工作目录（cwd）。</p><p><code>pwd</code> prints the name of the cwd.</p><p>The C library function getcwd returns the pathname of the current working directory</p><ul><li><code>char *getcwd(char *buf, size_t size)</code>,</li><li>size指定路径名的最大长度。如果超过最大长度，则返回NULL，并将errono设置为ERANGE。</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;errno.h&gt;</span> </span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">char</span> cwd<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span>cwd<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cwd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;Current working dir: %s\\n&quot;</span><span class="token punctuation">,</span> cwd<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token keyword">else</span> <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">&quot;getcwd() error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="file-representation" tabindex="-1"><a class="header-anchor" href="#file-representation" aria-hidden="true">#</a> File Representation</h2><p>有关文件系统结构的信息同时存储在 disk and main memory.</p><h3 id="i-node" tabindex="-1"><a class="header-anchor" href="#i-node" aria-hidden="true">#</a> i-node</h3><ul><li>Unix 使用称为 i-node 的逻辑结构来存储有关磁盘上文件的信息—文件系统中的每个文件都由一个 i-node 表示</li><li>i-nodes are stored at the front of each region of disk that contains a Unix file system.</li></ul><div class="hint-container info"><p class="hint-container-title">文件存储</p><p>文件储存在硬盘上，硬盘的最小存储单位叫做&quot;扇区&quot;（Sector）。</p><p>操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个&quot;块&quot;（block）。这种由多个扇区组成的&quot;块&quot;，是文件存取的最小单位。&quot;块&quot;的大小，最常见的是4KB，即连续八个 sector组成一个 block。</p><p>文件数据都储存在&quot;块&quot;中，那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种储存文件元信息的区域就叫做inode，中文译名为&quot;<strong>索引节点</strong>&quot;。</p><p>每一个文件都有对应的inode，里面包含了与该文件有关的一些信息。</p></div><p>inode包含文件的元信息，具体来说有以下内容：</p><ul><li>文件的字节数</li><li>文件拥有者的User ID</li><li>文件的Group ID</li><li>文件的读、写、执行权限</li><li>文件的时间戳，共有三个： <ul><li>ctime指inode上一次变动的时间</li><li>mtime指文件内容上一次变动的时间</li><li>atime指文件上一次打开的时间。</li></ul></li><li>链接数，即有多少文件名指向这个inode</li><li>文件数据block的位置</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2022/10/22/c5ad5888df03e.png" alt="1666426736828.png" tabindex="0" loading="lazy"><figcaption>1666426736828.png</figcaption></figure><ul><li>12 direct pointer can point to 12 x 8KB = 96KB of file content.</li><li>单间接指针指向一个直接指针块。一个块可以包含8KB/4bytes = 2K指针 = 2048个指针。2048个直接指针可以指向2048 x 8KB = 16MB的文件内容。</li><li>双间接指针指向 2048 个单间接指针，即 2048 x 16 MB = 32 GB 的文件内容。</li><li>同样，三重间接指针指向 64 TB 的文件内容。</li><li>所以一个 i-node 最多可以指向64TB+32GB+16MB+96KB的文件内容。</li></ul><p>可以用stat命令，查看某个文件的inode信息：<code>stat example.txt</code></p><figure><img src="https://pic.hanjiaming.com.cn/2022/10/22/4d29030027f53.png" alt="1666415253328.png" tabindex="0" loading="lazy"><figcaption>1666415253328.png</figcaption></figure><p>总之，除了文件名以外的所有文件信息，都存在inode之中。</p><h3 id="i-node-size" tabindex="-1"><a class="header-anchor" href="#i-node-size" aria-hidden="true">#</a> i-node size</h3><p>inode也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是数据区，存放文件数据；另一个是inode区（inode table），存放inode所包含的信息。</p><p>每个inode节点的大小，一般是128字节或256字节。inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode。假定在一块1GB的硬盘中，每个inode节点的大小为128字节，每1KB就设置一个inode，那么inode table的大小就会达到128MB，占整块硬盘的12.8%。</p><p>查看每个硬盘分区的inode总数和已经使用的数量，可以使用df命令: <code>df -i</code></p><figure><img src="https://pic.hanjiaming.com.cn/2022/10/22/3d755bfc1047e.png" alt="1666418369201.png" tabindex="0" loading="lazy"><figcaption>1666418369201.png</figcaption></figure><ul><li>目录文件的读权限（r）和写权限（w），都是针对目录文件本身</li><li>由于目录文件内只有文件名和inode号码，所以如果只有读权限，只能获取文件名，无法获取其他信息</li><li>其他信息都储存在inode节点中，而读取inode节点内的信息需要目录文件的执行权限（x）</li></ul><h3 id="inode-号码" tabindex="-1"><a class="header-anchor" href="#inode-号码" aria-hidden="true">#</a> inode 号码</h3><p>每个inode都有一个号码，操作系统用inode号码来识别不同的文件。Unix/Linux系统内部不使用文件名，而使用inode号码来识别文件。对于系统来说，文件名只是inode号码便于识别的别称或者绰号。</p><p>表面上，用户通过文件名，打开文件。实际上，系统内部这个过程分成三步：</p><ul><li>首先，系统找到这个文件名对应的inode号码；</li><li>其次，通过inode号码，获取inode信息；</li><li>最后，根据inode信息，找到文件数据所在的block，读出数据。</li></ul><p>使用ls -i命令，可以看到文件名对应的inode号码：<code>ls -i example.txt</code></p><figure><img src="https://pic.hanjiaming.com.cn/2022/10/22/ec27d651cd7ae.png" alt="1666419041956.png" tabindex="0" loading="lazy"><figcaption>1666419041956.png</figcaption></figure><h3 id="目录文件" tabindex="-1"><a class="header-anchor" href="#目录文件" aria-hidden="true">#</a> 目录文件</h3><p>目录（directory）也是一种文件.</p><p>目录文件的结构非常简单，就是一系列目录项（dirent）的列表。每个目录项，由两部分组成：</p><ul><li>所包含文件的文件名</li><li>以及该文件名对应的inode号码。</li></ul><p>ls -i 命令列出整个目录文件，即文件名和inode号码：<code>ls -i /etc</code></p><figure><img src="https://pic.hanjiaming.com.cn/2022/10/22/ff48f54ad8f5c.png" alt="1666419329366.png" tabindex="0" loading="lazy"><figcaption>1666419329366.png</figcaption></figure><h3 id="硬链接" tabindex="-1"><a class="header-anchor" href="#硬链接" aria-hidden="true">#</a> 硬链接</h3><p>Unix/Linux系统允许，多个文件名指向同一个inode号码。</p><p>这意味着</p><ul><li>可以用不同的文件名访问同样的内容；</li><li>删除一个文件名，不影响另一个文件名的访问。</li></ul><p>这种情况就被称为&quot;硬链接&quot;（hard link）：<code>ln 源文件 目标文件</code></p><figure><img src="https://pic.hanjiaming.com.cn/2022/10/22/b54fcb9d49a87.png" alt="1666419982918.png" tabindex="0" loading="lazy"><figcaption>1666419982918.png</figcaption></figure><p>运行上面这条命令以后，源文件与目标文件的inode号码相同，都指向同一个inode。inode信息中有一项叫做&quot;链接数&quot;，记录指向该inode的文件名总数，这时就会增加1。</p><p>反过来，删除一个文件名，就会使得inode节点中的&quot;链接数&quot;减1。当这个值减到0，表明没有文件名指向这个inode，系统就会回收这个inode号码，以及其所对应block区域。</p><p>这里顺便说一下目录文件的&quot;链接数&quot;。创建目录时，默认会生成两个目录项：&quot;.&quot;和&quot;..&quot;。前者的inode号码就是当前目录的inode号码，等同于当前目录的&quot;硬链接&quot;；后者的inode号码就是当前目录的父目录的inode号码，等同于父目录的&quot;硬链接&quot;。所以，任何一个目录的&quot;硬链接&quot;总数，总是等于2加上它的子目录总数（含隐藏目录）。</p><h3 id="软链接" tabindex="-1"><a class="header-anchor" href="#软链接" aria-hidden="true">#</a> 软链接</h3><p>文件A和文件B的inode号码虽然不一样，但是文件A的内容是文件B的路径。因此，无论打开哪一个文件，最终读取的都是文件B。这时，文件A就称为文件B的&quot;软链接&quot;（soft link）或者&quot;<strong>符号链接（symbolic link）</strong>&quot;。</p><p><code>ln -s</code>命令可以创建软链接: <code>ln -s 源文文件或目录 目标文件或目录</code></p><figure><img src="https://pic.hanjiaming.com.cn/2022/10/22/2f629ecf2843d.png" alt="1666426525215.png" tabindex="0" loading="lazy"><figcaption>1666426525215.png</figcaption></figure><h3 id="inode的特殊作用" tabindex="-1"><a class="header-anchor" href="#inode的特殊作用" aria-hidden="true">#</a> inode的特殊作用</h3><p>由于inode号码与文件名分离，这种机制导致了一些Unix/Linux系统特有的现象。</p><ul><li>有时，文件名包含特殊字符，无法正常删除。这时，直接删除inode节点，就能起到删除文件的作用。 <ul><li>用INODE直接删除文件: <code>find . -inum INODE_NUM -delete</code></li></ul></li><li>移动文件或重命名文件，只是改变文件名，不影响inode号码。</li><li>打开一个文件以后，系统就以inode号码来识别这个文件，不再考虑文件名。因此，通常来说，系统无法从inode号码得知文件名。</li></ul><p>第3点使得软件更新变得简单，可以在不关闭软件的情况下进行更新，不需要重启。因为系统通过inode号码，识别运行中的文件，不通过文件名。更新的时候，新版文件以同样的文件名，生成一个新的inode，不会影响到运行中的文件。等到下一次运行这个软件的时候，文件名就自动指向新版文件，旧版文件的inode则被回收。</p><h2 id="access-file-in-c" tabindex="-1"><a class="header-anchor" href="#access-file-in-c" aria-hidden="true">#</a> Access File in C</h2><p>在C语言程序中，文件可以通过 file descriptors 或 file pointers 访问，which provide logical names (handles) for performing device-independent I/O.</p><ul><li>The Unix file system calls use file descriptors (via open, read, write, close, and ioctl).</li><li>The ANSI C I/O library uses file pointers (via fopen, fscanf, fprintf, fread, fwrite, fclose, etc.).</li></ul><p>File descriptors (<em>in unistd.h</em>) for standard input, standard output, and standard error <em>files</em> are STDIN_FILENO, STDOUT_FILENO, and STDERR_FILENO; While file pointers (<em>in stdio.h</em>) are stdin, stdout, and stderr;</p><h3 id="file-descriptor" tabindex="-1"><a class="header-anchor" href="#file-descriptor" aria-hidden="true">#</a> File descriptor</h3><h4 id="system-file-table" tabindex="-1"><a class="header-anchor" href="#system-file-table" aria-hidden="true">#</a> System File Table</h4><p>SFT条目包含关于一个文件是否被打开读/写、权限、锁、读/写偏移等信息。SFT 中的多个条目可能指向同一个物理文件。</p><img src="https://pic.hanjiaming.com.cn/2022/10/22/75e471699f8d5.png" alt="1666427298266.png" style="zoom:33%;"><p>三个文件自动打开：</p><ul><li>STDIN_FILENO: standard input</li><li>STDOUT_FILENO: standard output</li><li>STDERR_FILENO: standard error</li></ul><p>Corresponding to constants 0, 1, 2 in unistd.h</p><p>当新文件被打开时，它被分配到最低的可用FD。</p><p>访问文件进行I/O是一个三步骤的过程，无论是普通文件还是设备。</p><ol><li>Open the file for I/O</li><li>Read and write to the file</li><li>Close the file when finished with I/O</li></ol><h4 id="file-descriptor-read" tabindex="-1"><a class="header-anchor" href="#file-descriptor-read" aria-hidden="true">#</a> File descriptor: Read</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// Open a file</span>
<span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token class-name">mode_t</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>pathname : 文件的绝对或相对路径</li><li>flags : 必须包括以下访问模式之一 O_RDONLY, O_WRONLY, O_RDWR, 或更多，使用<code>|</code> 表示 <ul><li>O_CREAT: 如果路径名不存在，则作为一个普通文件创建；必须添加访问权限模式参数（例如0644）。</li><li>O_APPEND：文件以追加模式打开。</li></ul></li><li>mode_t mode: 访问权限模式参数</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// Returns the opened file&#39;s file descriptor or –1 if an error occurred (the errno is set accordingly)</span>

<span class="token comment">// fd : file descriptor to read from</span>
<span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;someFile&quot;</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// buffer : pointer to an array</span>
<span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// count  = 4*sizeof(char) : number of bytes to read</span>
<span class="token comment">// Returns number of bytes read or –1 if an error occurred</span>
<span class="token keyword">int</span> bytes <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="file-descriptor-write" tabindex="-1"><a class="header-anchor" href="#file-descriptor-write" aria-hidden="true">#</a> File descriptor: Write</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>bytes <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;someFile&quot;</span><span class="token punctuation">,</span> O_WRONLY<span class="token operator">|</span>O_CREAT<span class="token punctuation">,</span> <span class="token number">0644</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Returns number of bytes written or –1 if an error occurred</span>
<span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> bytes <span class="token operator">=</span> <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="file-descriptor-close" tabindex="-1"><a class="header-anchor" href="#file-descriptor-close" aria-hidden="true">#</a> File descriptor: Close</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>return_val <span class="token operator">=</span> <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>Closes an open file descriptor</li><li>Returns 0 on success, -1 on error</li></ul><h3 id="file-pointers" tabindex="-1"><a class="header-anchor" href="#file-pointers" aria-hidden="true">#</a> File pointers</h3><ul><li>一个文件指针指向一个数据结构FILE，在进程的用户区称为文件结构。</li><li>A file structure contains a buffer and a file descriptor (so a file pointer is a handle to a handle)</li></ul><p>下面的代码段打开文件/home/ann/my.dat进行输出，然后写一个字符串到文件。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
FILE <span class="token operator">*</span>myfp<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>myfp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">&quot;/home/ann/my.dat&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;w&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
	<span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">&quot;Could not fopen file\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">else</span>
	<span class="token function">fprintf</span><span class="token punctuation">(</span>myfp<span class="token punctuation">,</span> <span class="token string">&quot;This is a test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件指针（通过FILE数据类型）被用于C库中的以下高级I/O函数中。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">scanf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="fopen-and-fclose" tabindex="-1"><a class="header-anchor" href="#fopen-and-fclose" aria-hidden="true">#</a> fopen() and fclose()</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// Path: char*, absolute or relative path</span>
FILE <span class="token operator">*</span>file_stream <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>r: open file for reading
r+ : open file for reading and writing
w: overwrite file or create file for writing
w+ :open for reading and writing; overwrites file 
a: open file for appending (writing at end of file) 
a+ : open file for appending and reading
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>fclose(file_stream)</code>: Closes the opened file represented <code>by file_stream</code></p><h4 id="printf" tabindex="-1"><a class="header-anchor" href="#printf" aria-hidden="true">#</a> printf()</h4><img src="https://pic.hanjiaming.com.cn/2022/10/22/a19d8d9c8e8ed.png" alt="1666430299417.png" style="zoom:33%;"><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>%d,%i – decimal integer
%u – unsigned decimal integer
%o – unsigned octal integer
%x,%X – unsigned hexadecimal integer 
%c – character
%s – string or character array
%f – float
%e,%E – double (scientific notation) 
%g,%G – double or float
%% – outputs a % character
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="scanf" tabindex="-1"><a class="header-anchor" href="#scanf" aria-hidden="true">#</a> scanf()</h4><p><code>scanf(formatted_string, ...)</code> : 与 printf 类似的语法，只有格式化的字符串代表您正在读取的数据。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 前导空格是要求 scanf 忽略任何空格（包括换行符）字符。</span>
<span class="token function">scanf</span><span class="token punctuation">(</span> <span class="token string">&quot;%d %c %s&quot;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>int_var<span class="token punctuation">,</span> <span class="token operator">&amp;</span>char_var<span class="token punctuation">,</span> string_var<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>刷新输入缓冲区中的 &#39;\\n&#39; 的其他方法包括</p><ul><li>在调用 scanf() 后使用 getchar()</li><li>使用 <code>%*c</code></li><li>但最好是使用 fgets() 来获取一行，而不是使用 scanf</li></ul></div><h4 id="printf-和-scanf-系列" tabindex="-1"><a class="header-anchor" href="#printf-和-scanf-系列" aria-hidden="true">#</a> printf() 和 scanf() 系列</h4><ul><li>Prints to a file stream instead of <code>stdout</code>: <code>fprintf(file_stream, formatted_string, ...)</code></li><li>Reads from a file stream instead of <code>stdin</code>: <code>fscanf(file_stream, formatted_string, ...)</code></li><li>Prints to a character array instead of <code>stdout</code> : <code>sprintf(char_array, formatted_string, ...)</code></li><li>Reads from a string instead of <code>stdin</code>: <code>sscanf(char_array, formatted_string, ...)</code></li></ul><h2 id="i-o-redirection" tabindex="-1"><a class="header-anchor" href="#i-o-redirection" aria-hidden="true">#</a> I/O redirection</h2><img src="https://pic.hanjiaming.com.cn/2022/10/22/d430bdaa45517.png" alt="1666433014689.png" style="zoom:67%;"><p>回顾一下：为了访问一个文件，一个进程使用一个 file descriptor，它是 process file descriptor table 中的一个索引，而这个索引又指向系统文件表中的一个条目。</p><img src="https://pic.hanjiaming.com.cn/2022/10/22/8fd3e30e0ec5f.png" alt="1666431775699.png" style="zoom:33%;"><p>重定向是指进程修改其文件描述符表项，使其指向系统文件表中的一个不同的条目。考虑一下cat命令，它从一个文件中读取数据并输出到stdout。下面的命令将stdout重定向到my.file : <code>cat test &gt; my.file</code></p><img src="https://pic.hanjiaming.com.cn/2022/10/22/8f1a47c9feb05.png" alt="1666431832344.png" style="zoom:33%;"><h3 id="realization-using-dup" tabindex="-1"><a class="header-anchor" href="#realization-using-dup" aria-hidden="true">#</a> Realization using dup()</h3><h2 id="pipe" tabindex="-1"><a class="header-anchor" href="#pipe" aria-hidden="true">#</a> pipe</h2><p>系统调用pipe()返回两个文件描述符，我们可以通过它们访问管道的输入/输出（一种I/O机制）。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">pipe</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// Return: 0 success; -1 error</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://pic.hanjiaming.com.cn/2022/10/22/fc94934ba9cda.png" alt="1666432477819.png" style="zoom:33%;"><h3 id="dup" tabindex="-1"><a class="header-anchor" href="#dup" aria-hidden="true">#</a> dup()</h3><p><code>int dup(int oldfd)</code>将给定的文件描述符复制到文件描述符表中最低编号的未使用的文件描述符。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;fcntl.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;unistd.h&gt;</span></span>
<span class="token keyword">char</span><span class="token operator">*</span> cmd<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;/bin/ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-l&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> O_WRONLY <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span> <span class="token number">0600</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//fd will be 3; a file will be opened in write mode</span>
	<span class="token keyword">int</span> fd2 <span class="token operator">=</span> <span class="token function">dup</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//duplicate the fd-th pointer to entry 4, the lowest available entry</span>
	<span class="token function">close</span><span class="token punctuation">(</span>STDOUT_FILENO<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">dup</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//duplicate the fd-th pointer into entry 1</span>
	<span class="token function">execvp</span><span class="token punctuation">(</span>cmd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//the old process image is replaced by the new process image for ls</span>
	<span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//close file descriptor 3 in the parent process.</span>
	<span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="https://pic.hanjiaming.com.cn/2022/10/23/4db55bb062cd4.png" alt="1666498785493.png" style="zoom:33%;"><img src="https://pic.hanjiaming.com.cn/2022/10/23/b9dde1caea8d6.png" alt="1666498808600.png" style="zoom:33%;"><img src="https://pic.hanjiaming.com.cn/2022/10/23/9ed8528c0daad.png" alt="1666498860013.png" style="zoom:33%;"><img src="https://pic.hanjiaming.com.cn/2022/10/23/3112715309d11.png" alt="1666498884479.png" style="zoom:33%;"><img src="https://pic.hanjiaming.com.cn/2022/10/23/24442f95f7d1b.png" alt="1666498915860.png" style="zoom:33%;"><div class="hint-container note"><p class="hint-container-title">exec 是否保留文件描述符？</p><p>是的，许多程序（包括你的 shell）都依赖于这个特性。如果不是这样，您的程序将在没有打开标准输入/输出/错误文件描述符的情况下启动！当shell运行一个程序时，它<code>fork</code>是<code>dup2</code>打开的tty文件描述符为0、1、2，然后<code>execve</code>是你的新程序。</p></div><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> Ref.</h2>`,135),d={href:"https://www.ruanyifeng.com/blog/2011/12/inode.html",target:"_blank",rel:"noopener noreferrer"},u=n("li",null,"03-COMP3438-2022fall@HKPU",-1),k={href:"https://stackoverflow.com/questions/22241000/does-exec-preserve-file-descriptors",target:"_blank",rel:"noopener noreferrer"};function f(h,m){const a=t("ExternalLinkIcon");return o(),p("div",null,[r,n("ul",null,[n("li",null,[n("a",d,[s("https://www.ruanyifeng.com/blog/2011/12/inode.html"),e(a)])]),u,n("li",null,[n("a",k,[s("https://stackoverflow.com/questions/22241000/does-exec-preserve-file-descriptors"),e(a)])])])])}const b=i(l,[["render",f],["__file","File-System.html.vue"]]);export{b as default};
