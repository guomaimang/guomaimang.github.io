const e=JSON.parse('{"key":"v-2af9f9dd","path":"/note/cs/os/asm/Y86-64-processer-arch.html","title":"Y86-64处理器架构简介","lang":"zh-CN","frontmatter":{"article":false,"date":"2021-05-01T00:00:00.000Z","description":"Y86-64处理器架构简介 ISA(指令集架构) 指令集架构（英语：Instruction Set Architecture，缩写为ISA），又称指令集或指令集体系，是计算机体系结构中与程序设计有关的部分，包含了基本数据类型，指令集，寄存器，寻址模式，存储体系，中断，异常处理以及外部I/O。指令集架构包含一系列的opcode即操作码（机器语言），以及由特定处理器执行的基本命令。 不同的处理器“家族”——例如Intel IA-32和x86-64、IBM/Freescale Power和ARM处理器家族——有不同的指令集架构。[1] 指令集体系与微架构（一套用于执行指令集的微处理器设计方法）不同。使用不同微架构的电脑可以共享一种指令集。例如，Intel的Pentium和AMD的AMD Athlon，两者几乎采用相同版本的x86指令集体系，但是两者在内部设计上有本质的区别。 维基百科","head":[["meta",{"property":"og:url","content":"https://guomaimang.github.io/note/cs/os/asm/Y86-64-processer-arch.html"}],["meta",{"property":"og:site_name","content":"HAN Jiaming | Hirsun | 韩佳明"}],["meta",{"property":"og:title","content":"Y86-64处理器架构简介"}],["meta",{"property":"og:description","content":"Y86-64处理器架构简介 ISA(指令集架构) 指令集架构（英语：Instruction Set Architecture，缩写为ISA），又称指令集或指令集体系，是计算机体系结构中与程序设计有关的部分，包含了基本数据类型，指令集，寄存器，寻址模式，存储体系，中断，异常处理以及外部I/O。指令集架构包含一系列的opcode即操作码（机器语言），以及由特定处理器执行的基本命令。 不同的处理器“家族”——例如Intel IA-32和x86-64、IBM/Freescale Power和ARM处理器家族——有不同的指令集架构。[1] 指令集体系与微架构（一套用于执行指令集的微处理器设计方法）不同。使用不同微架构的电脑可以共享一种指令集。例如，Intel的Pentium和AMD的AMD Athlon，两者几乎采用相同版本的x86指令集体系，但是两者在内部设计上有本质的区别。 维基百科"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-15T05:33:29.000Z"}],["meta",{"property":"article:author","content":"Hirsun (HAN Jiaming)"}],["meta",{"property":"article:published_time","content":"2021-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-15T05:33:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Y86-64处理器架构简介\\",\\"description\\":\\"Y86-64处理器架构简介 ISA(指令集架构) 指令集架构（英语：Instruction Set Architecture，缩写为ISA），又称指令集或指令集体系，是计算机体系结构中与程序设计有关的部分，包含了基本数据类型，指令集，寄存器，寻址模式，存储体系，中断，异常处理以及外部I/O。指令集架构包含一系列的opcode即操作码（机器语言），以及由特定处理器执行的基本命令。 不同的处理器“家族”——例如Intel IA-32和x86-64、IBM/Freescale Power和ARM处理器家族——有不同的指令集架构。[1] 指令集体系与微架构（一套用于执行指令集的微处理器设计方法）不同。使用不同微架构的电脑可以共享一种指令集。例如，Intel的Pentium和AMD的AMD Athlon，两者几乎采用相同版本的x86指令集体系，但是两者在内部设计上有本质的区别。 维基百科\\"}"]]},"headers":[{"level":2,"title":"ISA(指令集架构)","slug":"isa-指令集架构","link":"#isa-指令集架构","children":[{"level":3,"title":"Designing an ISA","slug":"designing-an-isa","link":"#designing-an-isa","children":[]}]},{"level":2,"title":"Circuits","slug":"circuits","link":"#circuits","children":[{"level":3,"title":"Digital circuits","slug":"digital-circuits","link":"#digital-circuits","children":[]},{"level":3,"title":"Combinational circuits","slug":"combinational-circuits","link":"#combinational-circuits","children":[]},{"level":3,"title":"Storage elements","slug":"storage-elements","link":"#storage-elements","children":[]}]},{"level":2,"title":"Y86-64 processor","slug":"y86-64-processor","link":"#y86-64-processor","children":[{"level":3,"title":"state","slug":"state","link":"#state","children":[]},{"level":3,"title":"Instruction set","slug":"instruction-set","link":"#instruction-set","children":[]},{"level":3,"title":"Encoding registers","slug":"encoding-registers","link":"#encoding-registers","children":[]},{"level":3,"title":"Instruction examples","slug":"instruction-examples","link":"#instruction-examples","children":[]},{"level":3,"title":"Standard stages to execute one instruction","slug":"standard-stages-to-execute-one-instruction","link":"#standard-stages-to-execute-one-instruction","children":[]}]},{"level":2,"title":"补充材料","slug":"补充材料","link":"#补充材料","children":[{"level":3,"title":"Y86-64 instruction set","slug":"y86-64-instruction-set","link":"#y86-64-instruction-set","children":[]},{"level":3,"title":"补充一些指令的stage","slug":"补充一些指令的stage","link":"#补充一些指令的stage","children":[]},{"level":3,"title":"x86/x64 指令长度","slug":"x86-x64-指令长度","link":"#x86-x64-指令长度","children":[]},{"level":3,"title":"做题笔记","slug":"做题笔记","link":"#做题笔记","children":[]}]},{"level":2,"title":"引用材料","slug":"引用材料","link":"#引用材料","children":[]}],"git":{"createdTime":1726378409000,"updatedTime":1726378409000,"contributors":[{"name":"hanjiaming","email":"47519540+guomaimang@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":26.32,"words":2632},"filePathRelative":"note/cs/os/asm/Y86-64-processer-arch.md","localizedDate":"2021年5月1日","excerpt":"<h1> Y86-64处理器架构简介</h1>\\n<img src=\\"https://pic.hanjiaming.com.cn/2021/04/06/d920281841490.png\\" alt=\\"image.png\\" title=\\"image.png\\">\\n<h2> ISA(指令集架构)</h2>\\n<blockquote>\\n<p><strong>指令集架构</strong>（英语：Instruction Set Architecture，缩写为ISA），又称<strong>指令集</strong>或<strong>指令集体系</strong>，是<a href=\\"https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">计算机体系结构</a>中与<a href=\\"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BA%8F%E8%A8%AD%E8%A8%88\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">程序设计</a>有关的部分，包含了<a href=\\"https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%9E%8B%E5%88%A5\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">基本数据类型</a>，指令集，<a href=\\"https://zh.wikipedia.org/wiki/%E5%AF%84%E5%AD%98%E5%99%A8\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">寄存器</a>，<a href=\\"https://zh.wikipedia.org/wiki/%E5%AF%BB%E5%9D%80%E6%A8%A1%E5%BC%8F\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">寻址模式</a>，<a href=\\"https://zh.wikipedia.org/w/index.php?title=%E5%AD%98%E5%82%A8%E4%BD%93%E7%B3%BB&amp;action=edit&amp;redlink=1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">存储体系</a>，<a href=\\"https://zh.wikipedia.org/wiki/%E4%B8%AD%E6%96%B7\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">中断</a>，<a href=\\"https://zh.wikipedia.org/wiki/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">异常处理</a>以及外部<a href=\\"https://zh.wikipedia.org/wiki/I/O\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">I/O</a>。指令集架构包含一系列的<a href=\\"https://zh.wikipedia.org/w/index.php?title=Opcode&amp;action=edit&amp;redlink=1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">opcode</a>即操作码（<a href=\\"https://zh.wikipedia.org/wiki/%E6%A9%9F%E5%99%A8%E8%AA%9E%E8%A8%80\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">机器语言</a>），以及由特定处理器执行的基本命令。</p>\\n<p>不同的处理器“家族”——例如<a href=\\"https://zh.wikipedia.org/wiki/Intel\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Intel</a> <a href=\\"https://zh.wikipedia.org/wiki/IA-32\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">IA-32</a>和<a href=\\"https://zh.wikipedia.org/wiki/X86-64\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">x86-64</a>、<a href=\\"https://zh.wikipedia.org/wiki/IBM\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">IBM</a>/Freescale Power和<a href=\\"https://zh.wikipedia.org/wiki/ARM\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ARM</a>处理器家族——有不同的指令集架构。[<a href=\\"https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%A7%8B#cite_note-1\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">1]</a></p>\\n<p>指令集体系与<a href=\\"https://zh.wikipedia.org/wiki/%E5%BE%AE%E6%9E%B6%E6%A7%8B\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">微架构</a>（一套用于执行指令集的微处理器设计方法）不同。使用不同微架构的电脑可以共享一种指令集。例如，<a href=\\"https://zh.wikipedia.org/wiki/%E8%8B%B1%E7%89%B9%E7%88%BE\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Intel</a>的<a href=\\"https://zh.wikipedia.org/wiki/%E5%A5%94%E9%A8%B0\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Pentium</a>和<a href=\\"https://zh.wikipedia.org/wiki/%E8%B6%85%E5%BE%AE%E5%8D%8A%E5%AF%BC%E4%BD%93\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">AMD</a>的<a href=\\"https://zh.wikipedia.org/wiki/AMD_Athlon\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">AMD Athlon</a>，两者几乎采用相同版本的<a href=\\"https://zh.wikipedia.org/wiki/X86\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">x86</a>指令集体系，但是两者在内部设计上有本质的区别。</p>\\n<p>维基百科</p>\\n</blockquote>","autoDesc":true}');export{e as data};
