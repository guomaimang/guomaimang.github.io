import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as n,e as s}from"./app-24a29e85.js";const o={},c=s(`<h1 id="交互" tabindex="-1"><a class="header-anchor" href="#交互" aria-hidden="true">#</a> 交互</h1><p>由于我们将使用浏览器作为我们的演示环境，让我们看几个与用户交互的函数：<code>alert</code>，<code>prompt</code> 和<code>confirm</code>。</p><h2 id="alert" tabindex="-1"><a class="header-anchor" href="#alert" aria-hidden="true">#</a> alert</h2><p>这个我们前面已经看到过了。它会显示一条信息，并等待用户按下 &quot;OK&quot;。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>弹出的这个带有信息的小窗口被称为 <strong>模态窗</strong>。&quot;modal&quot; 意味着用户不能与页面的其他部分（例如点击其他按钮等）进行交互，直到他们处理完窗口。在上面示例这种情况下 —— 直到用户点击“确定”按钮。</p><h2 id="prompt" tabindex="-1"><a class="header-anchor" href="#prompt" aria-hidden="true">#</a> prompt</h2><p><code>prompt</code> 函数接收两个参数：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">default</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>浏览器会显示一个带有文本消息的模态窗口，还有 input 框和确定/取消按钮。</p><p><code>title</code> : 显示给用户的文本</p><p><code>default</code> : 可选的第二个参数，指定 input 框的初始值。上述语法中 <code>default</code> 周围的方括号表示该参数是可选的，不是必需的。</p><p>访问者可以在提示输入栏中输入一些内容，然后按“确定”键。然后我们在 <code>result</code> 中获取该文本。或者他们可以按取消键或按 <code>key:Esc</code> 键取消输入，然后我们得到 <code>null</code> 作为 <code>result</code>，除非设置了default 值。</p><h2 id="confirm" tabindex="-1"><a class="header-anchor" href="#confirm" aria-hidden="true">#</a> confirm</h2><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span>question<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>confirm</code> 函数显示一个带有 <code>question</code> 以及确定和取消两个按钮的模态窗口。</p><p>点击确定返回 <code>true</code>，点击取消返回 <code>false</code>。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们学习了与用户交互的 3 个浏览器的特定函数：</p><p><code>alert</code> : 显示信息。</p><p><code>prompt</code> : 显示信息要求用户输入文本。点击确定返回文本，点击取消或按下 <code>key:Esc</code> 键返回 <code>null</code>。</p><p><code>confirm</code> : 显示信息等待用户点击确定或取消。点击确定返回 <code>true</code>，点击取消或按下 <code>key:Esc</code> 键返回 <code>false</code>。</p><p>这些方法都是模态的：它们暂停脚本的执行，并且不允许用户与该页面的其余部分进行交互，直到窗口被解除。</p><p>上述所有方法共有两个限制：</p><ol><li>模态窗口的确切位置由浏览器决定。通常在页面中心。</li><li>窗口的确切外观也取决于浏览器。一般地，我们不能修改它。</li></ol>`,27),t=[c];function p(d,r){return a(),n("div",null,t)}const u=e(o,[["render",p],["__file","alert.html.vue"]]);export{u as default};
