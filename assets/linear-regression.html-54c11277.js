import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as l,c as i,a as s,b as n,d as o,e as a}from"./app-9673d752.js";const c={},u=a(`<h1 id="linear-regression" tabindex="-1"><a class="header-anchor" href="#linear-regression" aria-hidden="true">#</a> Linear Regression</h1><h2 id="一元回归" tabindex="-1"><a class="header-anchor" href="#一元回归" aria-hidden="true">#</a> 一元回归</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression

reg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>
reg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_bmi<span class="token punctuation">,</span> y<span class="token punctuation">)</span>

predictions <span class="token operator">=</span> reg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_bmi<span class="token punctuation">)</span>

plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X_bmi<span class="token punctuation">,</span> y<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>X_bmi<span class="token punctuation">,</span> predictions<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">&quot;Blood Glucose (mg/dl)&quot;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">&quot;Body Mass Index&quot;</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/06/16/5de63d821660e.png" alt="1655354075672.png" tabindex="0" loading="lazy"><figcaption>1655354075672.png</figcaption></figure>`,4),r={class:"hint-container details"},m=a('<summary>一元一次回归机制</summary><img src="https://pic.hanjiaming.com.cn/2022/06/16/eeb1c932035bb.png" alt="1655365836468.png" style="zoom:33%;"><p>How do we choose a and b?</p><ul><li>Define an error function for any given line</li><li>Choose the line that minimizes the error function</li></ul><p>Error function = loss function = cost function</p><p>对于一元一次回归方程参数的求解，我们可以使用 普通最小二乘法 来计算 cost</p><img src="https://pic.hanjiaming.com.cn/2022/06/16/f66fc16011f8d.png" alt="1655365986521.png" style="zoom:67%;"><p>Ordinary Least Squares (OLS): minimize RSS， 「普通最小二乘法（OLS）：最小化RSS」</p><img src="https://pic.hanjiaming.com.cn/2022/06/16/9e1b3e03325ad.png" alt="1655366497544.png" style="zoom:33%;"><p>回归直线应满足的条件是：全部观测值与对应的回归估计值的误差平方和最小，即：</p><img src="https://pic.hanjiaming.com.cn/2022/06/16/ec0009b13b450.png" alt="1655367227609.png" style="zoom:50%;"><p>其实就是一个用积分求最小值的过程。</p>',12),d={href:"https://zhuanlan.zhihu.com/p/36910496",target:"_blank",rel:"noopener noreferrer"},k=a(`<h2 id="多元回归" tabindex="-1"><a class="header-anchor" href="#多元回归" aria-hidden="true">#</a> 多元回归</h2><p>Linear regression in higher dimensions</p><img src="https://pic.hanjiaming.com.cn/2022/06/16/0447ee730b6a2.png" alt="1655367891087.png" style="zoom:50%;"><p>如何定义 cost function 以及求解 cost function的最小值，将在后续章节解释。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LinearRegression

X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>
reg_all <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>
reg_all<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>

y_pred <span class="token operator">=</span> reg_all<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="cross-validation" tabindex="-1"><a class="header-anchor" href="#cross-validation" aria-hidden="true">#</a> Cross validation</h2><p>不同的训练数据和测试数据的拆分方式会影响拟合的结果</p><ul><li>模型性能取决于我们拆分数据的方式</li><li>不代表模型泛化到看不见的数据的能力</li></ul><p>可以通过拆分数据成为不同块然后组合。最终的结果是这 k 次验证的均值。</p><figure><img src="https://pic.hanjiaming.com.cn/2022/07/07/94d4a7fba4c8f.png" alt="1657125373744.png" tabindex="0" loading="lazy"><figcaption>1657125373744.png</figcaption></figure><p>交叉验证和模型性能：More folds = More computationally expensive</p><ul><li>5 folds = 5-fold CV</li><li>10 folds = 10-fold CV</li><li>k folds = k-fold CV</li></ul><p>实际生产中，10折交叉验证方法最为常见。</p><p>Cross-validation in scikit-learn：</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> cross_val_score<span class="token punctuation">,</span> KFold
kf <span class="token operator">=</span> KFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">)</span>
reg <span class="token operator">=</span> LinearRegression<span class="token punctuation">(</span><span class="token punctuation">)</span>
cv_results <span class="token operator">=</span> cross_val_score<span class="token punctuation">(</span>reg<span class="token punctuation">,</span> X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> cv<span class="token operator">=</span>kf<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>cv_results<span class="token punctuation">)</span>
<span class="token punctuation">[</span><span class="token number">0.70262578</span><span class="token punctuation">,</span> <span class="token number">0.7659624</span><span class="token punctuation">,</span> <span class="token number">0.75188205</span><span class="token punctuation">,</span> <span class="token number">0.76914482</span><span class="token punctuation">,</span> <span class="token number">0.72551151</span><span class="token punctuation">,</span> <span class="token number">0.73608277</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>cv_results<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>cv_results<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">0.7418682216666667</span> <span class="token number">0.023330243960652888</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span>cv_results<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.025</span><span class="token punctuation">,</span> <span class="token number">0.975</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.7054865</span><span class="token punctuation">,</span> <span class="token number">0.76874702</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>scikit-learn 的交叉验证指标假定分数越高越好，因此可以将 MSE 更改为负数以抵消这种情况。</p></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>尽管 cross_val_score 已经包含了拆分、拟合、预测和评分四个过程，但在 KFold 之前依然可以先通过 train_test_split 把数据拆分一下。这样 cross_val_score 将把 train_test_split 后的 训练数据集 再拆分成 训练 和 测试集。</p></div><details class="hint-container details"><summary>Leave-One-Out Cross-Validation</summary><p>假定数据集D中包含m个样本，若令k=m，则得到了交叉验证法的一个特例：留一法（Leave-One-Out，简称LOO）。</p><p>留一法交叉验证（Leave-One-Out Cross-Validation，LOO-CV）是贝叶斯模型比较重常见的一种方法。</p><blockquote><p>顾名思义，就是使 k 等于数据集中数据的个数，每次只使用一个作为测试集，剩下的全部作为训练集，</p></blockquote><p>留一法交叉验证，它是k折交叉验证的一种特例，因为它可以看做是当k等于样本量n时的n折交叉验证。这意味着每一个数据点都被用来测试，而所有剩下的（n-1）个数据点为相应的测试集。</p><p>留一法使用的训练集与初始数据集相比只少了一个样本，这就使得在绝大多数情况下，留一法中被实际评估的模型与期望评估的用D训练出的模型很相似。因此，留一法的评估结果<strong>往往</strong>被认为比较准确。</p><p>然而，留一法也有其缺陷：在数据集比较大时，训练m个模型的计算开销可能是难以忍受的（例如数据集包含1百万个样本，则需训练1百万个模型），而这还是在未考虑算法调参的情况下。另外，留一法的估计结果也未必永远比其他评估方法准确；“没有免费的午餐”定理对实验评估方法同样适用。</p></details><h2 id="regularized-regression" tabindex="-1"><a class="header-anchor" href="#regularized-regression" aria-hidden="true">#</a> Regularized regression</h2><h3 id="ridge-regression" tabindex="-1"><a class="header-anchor" href="#ridge-regression" aria-hidden="true">#</a> Ridge regression</h3>`,21),h=s("ul",null,[s("li",null,[n("Loss function = OLS loss function + "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"α"),s("mo",null,"∗"),s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("msubsup",null,[s("mi",null,"a"),s("mi",null,"i"),s("mn",null,"2")])]),s("annotation",{encoding:"application/x-tex"},"\\alpha * \\sum_{i=1}^{n} a_{i}^{2}")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4653em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.1138em","vertical-align":"-0.2997em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8141em"}},[s("span",{style:{top:"-2.4413em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])]),s("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mtight"},"2")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2587em"}},[s("span")])])])])])])])])]),s("li",null,"岭惩罚大的正或负系数"),s("li",null,[n("α: parameter we need to choose "),s("ul",null,[s("li",null,"Picking α is similar to picking k in KNN"),s("li",null,[n("α controls model complexity "),s("ul",null,[s("li",null,"α = 0 = OLS (Can lead to overfitting)"),s("li",null,"Very high α: (Can lead to underfitting)")])])])]),s("li",null,"超参数：用于优化模型参数的变量")],-1),g=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># Import Ridge</span>
<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Ridge
alphas <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">,</span> <span class="token number">1000.0</span><span class="token punctuation">,</span> <span class="token number">10000.0</span><span class="token punctuation">]</span>
ridge_scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> alpha <span class="token keyword">in</span> alphas<span class="token punctuation">:</span>
  
  <span class="token comment"># Create a Ridge regression model</span>
  ridge <span class="token operator">=</span> Ridge<span class="token punctuation">(</span>alpha <span class="token operator">=</span> alpha<span class="token punctuation">)</span>
  
  <span class="token comment"># Fit the data</span>
  ridge<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
  
  <span class="token comment"># predict</span>
  <span class="token comment"># y_pred = ridge.predict(X_test)</span>
  
  <span class="token comment"># Obtain R-squared</span>
  score <span class="token operator">=</span> ridge<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span>
  ridge_scores<span class="token punctuation">.</span>append<span class="token punctuation">(</span>score<span class="token punctuation">)</span>
  
<span class="token keyword">print</span><span class="token punctuation">(</span>ridge_scores<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="lasso-regression" tabindex="-1"><a class="header-anchor" href="#lasso-regression" aria-hidden="true">#</a> Lasso regression</h3>`,2),v=s("p",null,[n("Loss function = OLS loss function + "),s("span",{class:"katex"},[s("span",{class:"katex-mathml"},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("semantics",null,[s("mrow",null,[s("mi",null,"α"),s("mo",null,"∗"),s("msubsup",null,[s("mo",null,"∑"),s("mrow",null,[s("mi",null,"i"),s("mo",null,"="),s("mn",null,"1")]),s("mi",null,"n")]),s("mrow",null,[s("mo",{fence:"true"},"∣"),s("msub",null,[s("mi",null,"a"),s("mi",null,"i")]),s("mo",{fence:"true"},"∣")])]),s("annotation",{encoding:"application/x-tex"},"\\alpha * \\sum_{i=1}^{n}\\left|a_{i}\\right|")])])]),s("span",{class:"katex-html","aria-hidden":"true"},[s("span",{class:"base"},[s("span",{class:"strut",style:{height:"0.4653em"}}),s("span",{class:"mord mathnormal",style:{"margin-right":"0.0037em"}},"α"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),s("span",{class:"mbin"},"∗"),s("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),s("span",{class:"base"},[s("span",{class:"strut",style:{height:"1.104em","vertical-align":"-0.2997em"}}),s("span",{class:"mop"},[s("span",{class:"mop op-symbol small-op",style:{position:"relative",top:"0em"}},"∑"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.8043em"}},[s("span",{style:{top:"-2.4003em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i"),s("span",{class:"mrel mtight"},"="),s("span",{class:"mord mtight"},"1")])])]),s("span",{style:{top:"-3.2029em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"n")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.2997em"}},[s("span")])])])])]),s("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),s("span",{class:"minner"},[s("span",{class:"mopen delimcenter",style:{top:"0em"}},"∣"),s("span",{class:"mord"},[s("span",{class:"mord mathnormal"},"a"),s("span",{class:"msupsub"},[s("span",{class:"vlist-t vlist-t2"},[s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.3117em"}},[s("span",{style:{top:"-2.55em","margin-left":"0em","margin-right":"0.05em"}},[s("span",{class:"pstrut",style:{height:"2.7em"}}),s("span",{class:"sizing reset-size6 size3 mtight"},[s("span",{class:"mord mtight"},[s("span",{class:"mord mathnormal mtight"},"i")])])])]),s("span",{class:"vlist-s"},"​")]),s("span",{class:"vlist-r"},[s("span",{class:"vlist",style:{height:"0.15em"}},[s("span")])])])])]),s("span",{class:"mclose delimcenter",style:{top:"0em"}},"∣")])])])])],-1),b=a(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Lasso
scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">for</span> alpha <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0.01</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
  lasso <span class="token operator">=</span> Lasso<span class="token punctuation">(</span>alpha<span class="token operator">=</span>alpha<span class="token punctuation">)</span>
  lasso<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>
  lasso_pred <span class="token operator">=</span> lasso<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span>
  scores<span class="token punctuation">.</span>append<span class="token punctuation">(</span>lasso<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Lasso regression for feature selection</p><ul><li>Lasso can select important features of a dataset</li><li>Shrinks the coe)cients of less important features to zero</li><li>Features not shrunk to zero are selected by lasso</li></ul><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Lasso
X <span class="token operator">=</span> diabetes_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">&quot;glucose&quot;</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values
y <span class="token operator">=</span> diabetes_df<span class="token punctuation">[</span><span class="token string">&quot;glucose&quot;</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values
names <span class="token operator">=</span> diabetes_df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">&quot;glucose&quot;</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>columns
lasso <span class="token operator">=</span> Lasso<span class="token punctuation">(</span>alpha<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>
lasso_coef <span class="token operator">=</span> lasso<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">.</span>coef_
plt<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>names<span class="token punctuation">,</span> lasso_coef<span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>rotation<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span>
plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2022/07/22/669cede63bdc5.png" alt="1658473369993.png" tabindex="0" loading="lazy"><figcaption>1658473369993.png</figcaption></figure>`,5);function y(_,f){const t=p("ExternalLinkIcon");return l(),i("div",null,[u,s("details",r,[m,s("p",null,[n("Ref. "),s("a",d,[n("https://zhuanlan.zhihu.com/p/36910496"),o(t)])])]),k,h,g,v,b])}const z=e(c,[["render",y],["__file","linear-regression.html.vue"]]);export{z as default};
