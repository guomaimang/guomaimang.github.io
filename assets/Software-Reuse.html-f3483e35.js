import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,e as a}from"./app-44b7245c.js";const r={},n=a('<h1 id="software-reuse" tabindex="-1"><a class="header-anchor" href="#software-reuse" aria-hidden="true">#</a> Software Reuse</h1><p>在过去的20年中，已经有一个重大的转变，即转向基于系统化软件重用的设计过程。</p><p>基于重复使用的软件工程</p><ul><li>系统再利用：完整的系统，其中可能包括几个应用程序，可以被重新使用。</li><li>应用程序重用：一个应用程序可以通过不加改变地合并到其他应用程序或通过开发应用程序系列来重用。</li><li>组件重用：从子系统到单个对象的应用程序组件都可以重用。</li><li>对象和函数重用：可以重用实现单个定义良好的对象或函数的小规模软件组件。</li></ul><p>软件重用的好处和问题</p><ul><li>Benefits <ul><li>加速开发</li><li>有效利用专家</li><li>增加可靠性</li><li>降低开发成本</li><li>减少了过程风险</li><li>遵守标准</li></ul></li><li>Problems <ul><li>创建、维护和使用一个组件库</li><li>寻找、理解和调整可重用的组件</li><li>增加的维护成本</li><li>Not-invented-here syndrome</li></ul></li></ul><p>The Reuse Landscape：从简单的功能到完整的应用系统，在一系列的层次上都可以进行重用。重用范围涵盖了可能的重用技术的范围。</p><h2 id="some-approaches" tabindex="-1"><a class="header-anchor" href="#some-approaches" aria-hidden="true">#</a> Some Approaches</h2><ul><li>Application frameworks：抽象类和具体类的集合被调整和扩展以创建应用系统。</li><li>Application system integration：两个或更多的应用系统被整合以提供扩展功能</li><li>Architectural patterns：支持常见类型的应用系统的标准软件架构被用作应用程序的基础。</li><li>Component-based software engineering：系统是通过整合符合组件模型标准的组件（对象的集合）而开发的。</li><li>Design patterns：在各个应用中出现的通用抽象被表示为设计模式，显示了抽象和具体的对象和互动。</li><li>Model-driven engineering：软件被表示为领域模型和独立于实现的模型，代码由这些模型生成。</li><li>Program libraries：实现常用抽象的类和函数库可供重复使用。</li><li>Service-oriented systems：通过连接共享服务来开发系统，这些服务可能由外部提供。</li><li>Software product lines：一个应用类型围绕着一个共同的架构被概括，这样它就可以为不同的客户进行调整。</li></ul><h2 id="reuse-planning-factors" tabindex="-1"><a class="header-anchor" href="#reuse-planning-factors" aria-hidden="true">#</a> Reuse Planning Factors</h2><ul><li>软件的开发计划。</li><li>预期的软件寿命。</li><li>开发团队的背景、技能和经验。</li><li>软件的关键性和它的非功能要求。</li><li>应用领域。</li><li>软件的执行平台。</li></ul><h2 id="application-frameworks" tabindex="-1"><a class="header-anchor" href="#application-frameworks" aria-hidden="true">#</a> Application Frameworks</h2><p>一个应用程序框架是一个通用的结构，它被扩展以创建一个更具体的子系统或应用程序。</p><ul><li>&quot;一组集成的软件工件（如类、对象和组件），它们相互协作，为一系列相关的应用提供可重复使用的架构。&quot;</li><li>框架被实现为抽象和具体对象类的集合。类可以直接重复使用，并且可以使用继承和多态性等功能进行扩展。</li><li>框架提供对通用功能的支持，这些功能可能会在所有类似类型的应用程序中使用</li><li>框架支持 design reuse，因为它们为应用程序提供了一个骨架结构，以及系统中特定类的重用。</li></ul><h2 id="web-application-frameworks" tabindex="-1"><a class="header-anchor" href="#web-application-frameworks" aria-hidden="true">#</a> Web Application Frameworks</h2><p>现在所有常用的网络编程语言都可以使用WAF。</p><ul><li>E.g., Spring for Java, Django for Python, and Angular for JavaScript.</li><li>支持动态网站的建设，作为网络应用的前端。</li><li>The architecture of a WAF is usually based on the Model-View- Controller composite pattern.</li></ul><p>Features</p><ul><li>安全性：WAFs 可能包含帮助实现用户身份验证（登录）和访问的类。</li><li>动态网页：提供的类可帮助您定义网页模板并从系统数据库动态填充这些模板。</li><li>数据库支持：框架可以提供类，为不同的数据库提供抽象接口。</li><li>会话管理：创建和管理会话（用户与系统的一些交互）的类通常是 WAF 的一部分。</li><li>用户交互：大多数 Web 框架现在都提供 AJAX 支持（Holdener，2008 年），这允许创建更具交互性的网页。</li></ul><h2 id="extending-frameworks" tabindex="-1"><a class="header-anchor" href="#extending-frameworks" aria-hidden="true">#</a> Extending Frameworks</h2><ul><li>框架是通用的，并被扩展以创建一个更具体的应用或子系统。它们为系统提供了一个骨架架构。</li><li>Extending the framework involves <ul><li>增加继承框架中抽象类操作的具体类。</li><li>添加（回调「callback」）方法，这些方法在响应被框架识别的事件时被调用。</li></ul></li><li>框架的一个问题是其复杂性，这意味着需要很长的时间来有效地使用它们。</li></ul>',21),o=[n];function t(s,c){return e(),l("div",null,o)}const p=i(r,[["render",t],["__file","Software-Reuse.html.vue"]]);export{p as default};
