import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as t,e as n}from"./app-4a3e2d8d.js";const a={},r=n(`<h1 id="client-side-implementations" tabindex="-1"><a class="header-anchor" href="#client-side-implementations" aria-hidden="true">#</a> Client-side Implementations</h1><p>HTTP is a</p><ul><li>text-based</li><li>application-layer protocol</li></ul><p>that defines how content is requested from a client application and served by a web server.</p><ul><li>Work on top of IP (IPv4/IPv6) and TCP (before HTTP/3)</li><li><strong>Latest standard is HTTP/3, defined in ( over UDP)</strong></li><li>Specifications of HTTP Request and Response Headers</li></ul><h2 id="client-server-model" tabindex="-1"><a class="header-anchor" href="#client-server-model" aria-hidden="true">#</a> Client-Server Model</h2><ul><li>Popular servers: Apache, <strong>Nginx</strong>, Node.js, IIS, Google AppEngine</li><li>Popular clients/agents: Chrome, Firefox, Safari</li></ul><p>(Demo) Using telnet/netcat to make a simple (text-based) request</p><figure><img src="https://pic.hanjiaming.com.cn/2025/04/06/fd2ce10e61289.png" alt="1743920520192.png" tabindex="0" loading="lazy"><figcaption>1743920520192.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2025/04/06/8ee298c7c0946.png" alt="1743920554298.png" tabindex="0" loading="lazy"><figcaption>1743920554298.png</figcaption></figure><div class="hint-container note"><p class="hint-container-title">Surfing the Web using netcat</p><figure><img src="https://pic.hanjiaming.com.cn/2025/04/06/11db6e6390b14.png" alt="1743920763232.png" tabindex="0" loading="lazy"><figcaption>1743920763232.png</figcaption></figure></div><h2 id="typical-http" tabindex="-1"><a class="header-anchor" href="#typical-http" aria-hidden="true">#</a> Typical HTTP</h2><figure><img src="https://pic.hanjiaming.com.cn/2025/04/06/8a69e7546afa0.png" alt="1743920997110.png" tabindex="0" loading="lazy"><figcaption>1743920997110.png</figcaption></figure><p>Specifications:</p><ul><li>Version: HTTP/1.0, HTTP/1.1, HTTP/2.0</li><li>Method: GET, POST, PUT, HEAD, DELETE, TRACE, OPTIONS, CONNECT, etc...</li><li>Parameters: query string vs. body</li><li>Headers: hostname, content-length, content-type</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2025/04/06/b2a2559a147f7.png" alt="1743921503897.png" tabindex="0" loading="lazy"><figcaption>1743921503897.png</figcaption></figure><h2 id="html-forms" tabindex="-1"><a class="header-anchor" href="#html-forms" aria-hidden="true">#</a> HTML Forms</h2><p>The prevalent「普遍的」 approach to solicit information from users</p><p>A <code>&lt;form&gt;</code> tag that comprises different form controls, e.g., <code>&lt;input&gt;</code>,<code> &lt;select&gt;</code>, see a typical example below:</p><p>A typical <code>&lt;form&gt;</code> takes at least two attributes:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;form method=&quot;POST&quot; action=&quot;process.php&quot;&gt;
  &lt;!-- included here are some form controls --&gt;
&lt;/form&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>method=&quot;POST&quot; or method=&quot;GET&quot; (default: GET)</li><li>POST is used if a request is going to incur permanent change on server data; while GET is used for retrieving data</li><li>action=&quot;process.php&quot; (default: the current URL) <ul><li>the value takes a URL that will accept the form request</li></ul></li><li>onsubmit=&quot;return false&quot; is optional <ul><li>onsubmit is triggered when the submit button is clicked.</li><li>return false; -&gt; prevents default behaviour, stop propagation (bubble-up), and callbacks</li><li>Often used when the form is submitted over AJAX (cancel the form submit event) (to be discussed in later slides)</li></ul></li><li>enctype=&quot;multipart/form-data&quot; is optional <ul><li>Default encoding is application/x-www-form-urlencodedd</li><li>When<code> &lt;input type=&quot;file&quot;/&gt;</code> is used for file upload</li></ul></li></ul><h3 id="form-controls-1-4-most-common-controls" tabindex="-1"><a class="header-anchor" href="#form-controls-1-4-most-common-controls" aria-hidden="true">#</a> Form Controls (1/4: Most Common Controls)</h3><img src="https://pic.hanjiaming.com.cn/2025/04/06/7a5e6af8dd19b.png" alt="预览 2025-04-06 14.51.39.png" style="zoom:50%;"><h3 id="form-controls-2-4-offering-choices" tabindex="-1"><a class="header-anchor" href="#form-controls-2-4-offering-choices" aria-hidden="true">#</a> Form Controls (2/4: Offering Choices)</h3><img src="https://pic.hanjiaming.com.cn/2025/04/06/006f32af604dd.png" alt="1743922350022.png" style="zoom:50%;"><h3 id="form-controls-3-4-more-controls" tabindex="-1"><a class="header-anchor" href="#form-controls-3-4-more-controls" aria-hidden="true">#</a> Form Controls (3/4: More Controls)</h3><img src="https://pic.hanjiaming.com.cn/2025/04/06/41c50f292bae2.png" alt="1743922402888.png" style="zoom:50%;"><h3 id="form-controls" tabindex="-1"><a class="header-anchor" href="#form-controls" aria-hidden="true">#</a> Form Controls</h3><p>In a nutshell, introduced</p><ul><li>Tags with more semantic information: Built-in support of client-side validations</li><li>New CSS pseudo-class: :valid, :invalid, :required and :optional<br> (keyword for a selected element dependent on its content or external factors)</li></ul><img src="https://pic.hanjiaming.com.cn/2025/04/06/3503b47ba2704.png" alt="1743923274768.png" style="zoom:50%;"><h2 id="regular-expressions" tabindex="-1"><a class="header-anchor" href="#regular-expressions" aria-hidden="true">#</a> Regular Expressions</h2><p>A language to recognize string patterns.</p><p>Refer to a for reference What you must know:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>^ - start of string; 
$ - end of string (IMPORTANT to validations!)

+ - one or more times; 
? - 0 or 1 times; 
* - 0 or more times;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Examples:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Float (\\d includes digits only, the char inside &quot;[]&quot; defines a character set): ^[\\d\\.]+$

Alphanumeric (\\w includes letters, digits, underscore): ^[\\w\\-, ]+$

Email (apparently &#39;\\&#39; is the escape character here [&quot;{}&quot; stats the no. of pattern to match]):
^[\\w\\-\\/][\\w\\&#39;\\-\\/\\.]*@[\\w\\-]+(\\.[\\w\\-]+)*(\\.[\\w]{2,6})$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Short Regular Expression Test</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>For the regex ^[\\d\\.]+$:

Matching Strings:
✅ 4.3
✅ 192.168.0.1
Non-Matching Strings:
❌ 42a.4 (contains a non-digit/non-dot character &#39;a&#39;)
For the regex [+-]?([0-9]*[\\.])?[0-9]+:

Matching Strings:
✅ 4.3 (valid decimal number)
Non-Matching Strings:
❌ 42a.4 (contains &#39;a&#39;)
❌ 192.168.0.1 (multiple dots, invalid for a single number)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Extra:
wildcard character (dot &quot;.&quot;)
[^abcd]: Not character a,b,c,d; [\\W] NON-alphanumeric
(123|456) match 123 or 456; bracket &quot;creates&quot; a matching group (&quot;string&quot;)

Write a regex to check for a 10 digit number that start with 1 (e.g., SID): ^1\\d{9}$
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="client-side-restrictions" tabindex="-1"><a class="header-anchor" href="#client-side-restrictions" aria-hidden="true">#</a> Client-side Restrictions</h2><ul><li>To inform the users early on for input errors <ul><li>To create a more interactive and responsive UI experience</li><li>Otherwise, input errors are prompted only after form submissions (round-trip delay)</li></ul></li><li>To imply a specific pattern that a user is expected to follow <ul><li>To help users enter/choose the valid data that we need</li><li>Yet, these restrictions can be bypassed by Parameter Tampering Attacks!! Don&#39;t count on them for security!!</li><li>Reason: A user has full control of any client-side code downloaded to his browser using Developer Tools (and other extensions: ChroPath, TamperMonkey)</li></ul></li></ul><p>Hence, you need input validations implemented on BOTH</p><ul><li>server-side <strong>for security enforcement</strong> , and</li><li>client-side for <strong>better user experience</strong>.</li></ul><h3 id="form-validations-with-javascript-1-4" tabindex="-1"><a class="header-anchor" href="#form-validations-with-javascript-1-4" aria-hidden="true">#</a> Form Validations with Javascript (1/4)</h3><ul><li>Strategy: Write your code in HTML5 for new browsers; Fallback to Javascript for legacy ones</li><li></li></ul>`,47),s=[r];function o(l,d){return i(),t("div",null,s)}const m=e(a,[["render",o],["__file","client-side.html.vue"]]);export{m as default};
