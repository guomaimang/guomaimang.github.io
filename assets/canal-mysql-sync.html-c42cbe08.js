import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as l,e as n}from"./app-0983f945.js";const r={},t=n('<h1 id="用-canal-实现异构数据库同步" tabindex="-1"><a class="header-anchor" href="#用-canal-实现异构数据库同步" aria-hidden="true">#</a> 用 Canal 实现异构数据库同步</h1><h2 id="什么是异构数据" tabindex="-1"><a class="header-anchor" href="#什么是异构数据" aria-hidden="true">#</a> 什么是异构数据</h2><figure><img src="https://pic.hanjiaming.com.cn/2024/12/23/14cca414a328f.png" alt="1734957498605.png" tabindex="0" loading="lazy"><figcaption>1734957498605.png</figcaption></figure><ul><li><strong>定义</strong>：异构数据指的是结构不同的数据。</li><li><strong>例子</strong>：在实际工作中，数据主要存储在 MySQL 中，但 MySQL 在进行全文检索时性能不佳，这时通常会使用 Elasticsearch 或 Solr 这样的全文检索引擎。</li></ul><p>异构数据的实际应用场景 -&gt; <strong>电商平台</strong>：</p><ul><li>商户通过后台系统添加商品到 MySQL 数据库。</li><li>为了让消费者能够查询到商品，需要将数据同步到 Elasticsearch 中。</li><li>MySQL 和 Elasticsearch 的数据存储结构不同，因此称为异构数据。</li></ul><h2 id="异构数据带来的组织结构问题" tabindex="-1"><a class="header-anchor" href="#异构数据带来的组织结构问题" aria-hidden="true">#</a> 异构数据带来的组织结构问题</h2><p>团队分工：</p><ul><li>商品管理由团队 A 负责，数据查询由团队 B 负责。</li><li>团队 B 负责 Elasticsearch 的数据维护和管理。</li></ul><p>传统的同步方式及其问题: 在 Java 代码中进行修改，在新增 MySQL 数据时，同时调用团队 B 提供的接口进行 Elasticsearch 数据同步。</p><p>问题：</p><ul><li><strong>强耦合</strong>：团队 A 需要了解团队 B 的接口参数、传输规则和响应，增加了团队 A 的工作量。</li><li><strong>扩展困难</strong>：如果新增团队 C 负责 MongoDB 的数据维护，团队 A 需要额外对接团队 C 的接口，增加了工作复杂度和协调难度。</li></ul><p><strong>解决方案目标</strong></p><ul><li><strong>数据准实时同步</strong>：在几百毫秒或几秒钟内完成数据同步。</li><li><strong>组织结构解耦</strong>：减少团队 A 调用其他团队接口的工作量。</li></ul><h2 id="解决方案工具-canal" tabindex="-1"><a class="header-anchor" href="#解决方案工具-canal" aria-hidden="true">#</a> 解决方案工具：Canal</h2><p><strong>Canal 简介</strong>：</p><ul><li>由阿里巴巴开源，用于监听数据库增量日志并进行数据订阅消费。</li><li>支持 <strong>MySQL</strong> 和 MariaDB。</li></ul><p><strong>Canal 的工作原理</strong>：</p><figure><img src="https://pic.hanjiaming.com.cn/2024/12/23/d347a6da17f18.png" alt="1734957920776.png" tabindex="0" loading="lazy"><figcaption>1734957920776.png</figcaption></figure><ul><li>MySQL 主从同步通过 binlog（Binary Log）实现。</li><li>binlog 记录 SQL 语句，MySQL 从库通过 relay log 重放这些 SQL 语句实现数据同步。</li><li>Canal 作为一个“假”从库，监听主库的 binlog，并触发指定的 Java 代码进行数据同步。</li></ul><h3 id="局限性与进一步解决方案-消息队列-mq" tabindex="-1"><a class="header-anchor" href="#局限性与进一步解决方案-消息队列-mq" aria-hidden="true">#</a> 局限性与进一步解决方案：消息队列（MQ）</h3><p><strong>Canal 的局限性</strong>：仅解决数据监听问题，未解决团队之间的解耦问题。</p><p><strong>引入消息队列（MQ）</strong>：</p><ul><li><strong>MQ 的作用</strong>：消息的订阅和发布。</li><li><strong>架构图</strong>： <ul><li>团队 A 负责将数据变化转换为消息并发送到 MQ。</li><li>团队 B 和其他团队订阅 MQ 消息队列，根据消息类型和内容进行相应的数据处理。</li></ul></li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/12/23/43f238e023eae.png" alt="1734966151612.png" tabindex="0" loading="lazy"><figcaption>1734966151612.png</figcaption></figure><h3 id="完整的异构数据迁移过程" tabindex="-1"><a class="header-anchor" href="#完整的异构数据迁移过程" aria-hidden="true">#</a> 完整的异构数据迁移过程</h3><ol><li><strong>数据变化监听</strong>：团队 A 在 MySQL 上配置 Canal 监听商品库的数据变化。</li><li><strong>消息生成与发送</strong>：数据变化时，Canal 生成相应的消息（新增、修改、删除）并发送到 MQ。</li><li><strong>消息订阅与处理</strong>： <ul><li>团队 B 订阅 MQ 消息队列，接收消息后进行 Elasticsearch 数据同步。</li><li>新增团队（如团队 C）只需订阅相同的消息队列，无需与团队 A 直接对接。</li></ul></li></ol><h3 id="通过-mq-实现团队间解耦" tabindex="-1"><a class="header-anchor" href="#通过-mq-实现团队间解耦" aria-hidden="true">#</a> 通过 MQ 实现团队间解耦</h3><ul><li>团队 A 只需将数据变化放入 MQ，不再关心其他团队的 API 接口。</li><li>新增团队只需订阅消息队列，独立处理数据同步逻辑。</li><li>实现了真正的解耦，提高了开发效率和系统扩展性。</li></ul><h2 id="结论" tabindex="-1"><a class="header-anchor" href="#结论" aria-hidden="true">#</a> 结论</h2><p><strong>异构数据迁移</strong>：</p><ul><li>通过 Canal 和 MQ 的结合，实现了异构数据的准实时同步和团队间的解耦。</li><li>这种架构设计解决了传统方式中的强耦合和扩展困难问题，提高了系统的灵活性和可维护性。</li></ul>',32),e=[t];function s(o,g){return i(),l("div",null,e)}const d=a(r,[["render",s],["__file","canal-mysql-sync.html.vue"]]);export{d as default};
