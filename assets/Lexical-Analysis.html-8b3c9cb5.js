import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,e as n}from"./app-1a186aa2.js";const t={},l=n(`<h1 id="lexical-analysis" tabindex="-1"><a class="header-anchor" href="#lexical-analysis" aria-hidden="true">#</a> Lexical Analysis</h1><figure><img src="https://pic.hanjiaming.com.cn/2022/11/08/a93b990def1ef.png" alt="1667899031764.png" tabindex="0" loading="lazy"><figcaption>1667899031764.png</figcaption></figure><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><ul><li>Why we need lexical analysis? Its input and output.</li><li>How to specify「指定」 tokens: Regular Expression <ul><li>Regular Expression -&gt; Lex (software tool)</li><li>Regular Expression -&gt; Finite Automata</li></ul></li></ul><h2 id="为何需要词法分析" tabindex="-1"><a class="header-anchor" href="#为何需要词法分析" aria-hidden="true">#</a> 为何需要词法分析</h2><p>为什么我们需要词汇分析？给定一个程序，如何将这些字符分组为有意义的 &quot;单词&quot;？</p><figure><img src="https://pic.hanjiaming.com.cn/2022/11/08/1d8b2c782d051.png" alt="1667900649348.png" tabindex="0" loading="lazy"><figcaption>1667900649348.png</figcaption></figure><p>如何从字符串中识别 &quot;if&quot;&quot;else &quot;是关键词；&quot;i&quot;&quot;j&quot;&quot;z &quot;是变量；等等？</p><p>In lexical analysis, a source program is read from left-to-right and grouped into tokens. A token is a sequence of characters with a collective meaning.「在词法分析中，源程序被从左到右阅读，并被分组为 token 。token 是一串具有集体意义的字符。」</p><img src="https://pic.hanjiaming.com.cn/2022/11/08/6b24f04af6a58.png" alt="1667901338203.png" style="zoom:50%;"><h2 id="what-is-a-token" tabindex="-1"><a class="header-anchor" href="#what-is-a-token" aria-hidden="true">#</a> What is a token</h2><ul><li>A syntactic <strong>category</strong><ul><li>In English: a noun, a verb, an adjective, ...</li><li>In a programming language: an identifier, an integer value, a keyword, a white space, ...</li></ul></li></ul><p>Tokens correspond to sets of strings with a collective meaning「标记对应于具有集体意义的字符串集」</p><ul><li>identifier: strings of letters and digits, starting with a letter</li><li>Integer value: a non-empty string of digits</li><li>Keyword: else, if, where, ...</li></ul><p>For example,</p><img src="https://pic.hanjiaming.com.cn/2022/11/08/74a377ef0f2dd.png" alt="1667901674086.png" style="zoom:50%;"><figure><img src="https://pic.hanjiaming.com.cn/2022/11/08/fc7b8a9d097ee.png" alt="1667901730584.png" tabindex="0" loading="lazy"><figcaption>1667901730584.png</figcaption></figure><h2 id="what-are-tokens-for" tabindex="-1"><a class="header-anchor" href="#what-are-tokens-for" aria-hidden="true">#</a> What are tokens for</h2><p>根据句法作用对程序子串进行分类。「Classify program substrings according to their syntactic role.」</p><p>As the output of lexical analysis, tokens are the input to the parser (syntax analysis)</p><ul><li>Parser relies on token distinctions「解析器依赖于标记的区分」 <ul><li>e.g., a keyword is treated differently than an identifier.</li></ul></li></ul><h2 id="how-to-recognize" tabindex="-1"><a class="header-anchor" href="#how-to-recognize" aria-hidden="true">#</a> How to recognize</h2><ul><li>首先，使用正则表达式（模式）指定标记</li><li>第二，基于正则表达式，有两种方法来实现词法分析器。 <ul><li>Method 1: use Lex, a software tool</li><li>Method 2: use finite automata (write your own program)「使用有限自动机（自己写程序）」</li></ul></li></ul><h2 id="specifying-tokens" tabindex="-1"><a class="header-anchor" href="#specifying-tokens" aria-hidden="true">#</a> Specifying tokens</h2><ul><li>一个标记由一个模式指定：一套描述标记形成的规则。</li><li>词汇分析器使用该模式来识别词素：输入中与该模式相匹配的字符序列。一旦匹配，相应的标记就会被识别。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Example: 
标识符的规则（模式）：字母后跟字母和数字
Abc1 和 A1 By 匹配规则（模式），因此它们是标识符标记；
1 A 与规则（模式）不匹配，因此因此它不是标识符标记；
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="implementation" tabindex="-1"><a class="header-anchor" href="#implementation" aria-hidden="true">#</a> Implementation</h2><p>在获得正则表达式后，我们有两种方法来实现词法分析器「lexical analyzer」。</p><p>Use tools: lex (for C), flex (for C/C++), jlex (for Java)</p><ul><li>使用正则表达式指定标记</li><li>Tool generates source code for the lexical analysis</li></ul><p>使用正则表达式和有限自动机</p><ul><li>写代码表达对token的识别</li><li>Table drivern</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2022/11/09/5f57355d91742.png" alt="1667964145652.png" tabindex="0" loading="lazy"><figcaption>1667964145652.png</figcaption></figure>`,33),o=[l];function r(s,c){return e(),a("div",null,o)}const h=i(t,[["render",r],["__file","Lexical-Analysis.html.vue"]]);export{h as default};
