import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as r,e as l}from"./app-4a3e2d8d.js";const e={},h=l('<h1 id="齐毅架构设计感悟分享" tabindex="-1"><a class="header-anchor" href="#齐毅架构设计感悟分享" aria-hidden="true">#</a> 齐毅架构设计感悟分享</h1><h2 id="没有场景的架构设计都是不切实际的" tabindex="-1"><a class="header-anchor" href="#没有场景的架构设计都是不切实际的" aria-hidden="true">#</a> 没有场景的架构设计都是不切实际的</h2><h3 id="核心观点" tabindex="-1"><a class="header-anchor" href="#核心观点" aria-hidden="true">#</a> 核心观点</h3><ol><li>架构设计必须解决具体问题。</li><li>发现问题的复杂性是根本，这些包含在用户关键需求中</li><li>架构师在没有询问具体需求前给出的架构是不可信的。</li></ol><h3 id="具体案例" tabindex="-1"><a class="header-anchor" href="#具体案例" aria-hidden="true">#</a> 具体案例</h3><ol><li>老旧系统的更新 <ul><li><strong>背景</strong>: 亚信为联通开发的系统已经使用12年，架构陈旧。</li><li><strong>核心复杂度</strong>: 技术落后，如何通过有效和可控的方式将老技术更新为现有主流技术的新架构。</li></ul></li><li>资产管理平台的报表问题 <ul><li><strong>背景</strong>: 某银行通过外包公司开发的资产管理平台报表结果错误。</li><li><strong>核心复杂度</strong>: 研发团队对业务不熟悉，无法有效维护系统。</li><li><strong>解决方案</strong>: 强化业务培训，加强代码的合规、测试力度及覆盖度。</li></ul></li><li>万能表单应用 <ul><li><strong>背景</strong>: 允许用户自定义表单项和业务规则逻辑。</li><li><strong>核心复杂度</strong>: 系统的灵活性。</li><li><strong>解决方案</strong>: 引入规则引擎或微内核机制进行系统架构设计。</li></ul></li></ol><h2 id="架构设计中的解耦" tabindex="-1"><a class="header-anchor" href="#架构设计中的解耦" aria-hidden="true">#</a> 架构设计中的解耦</h2><h3 id="核心观点-1" tabindex="-1"><a class="header-anchor" href="#核心观点-1" aria-hidden="true">#</a> 核心观点</h3><ol><li>解耦是架构设计中无时无刻不需要考虑的问题。</li><li>解耦不仅在技术层面，也涉及团队职责和开发联调的友好性。</li></ol><h3 id="具体案例-异构数据同步" tabindex="-1"><a class="header-anchor" href="#具体案例-异构数据同步" aria-hidden="true">#</a> 具体案例: 异构数据同步</h3><ul><li><strong>问题</strong>: 两个团队之间的数据同步，团队A调用团队B的ES接口，产生耦合。</li><li><strong>解决方案</strong>: 利用阿里的Canal监听原始数据库，将数据变更消息发往MQ队列，通过MQ解决团队间和程序间的解耦问题。</li></ul><h2 id="尊重架构的演化规律" tabindex="-1"><a class="header-anchor" href="#尊重架构的演化规律" aria-hidden="true">#</a> 尊重架构的演化规律</h2><p>尊重 爬-&gt;走-&gt;跑-&gt;跳 的自然规律，好架构一定是演化而的</p><h3 id="核心观点-2" tabindex="-1"><a class="header-anchor" href="#核心观点-2" aria-hidden="true">#</a> 核心观点</h3><ol><li>好架构是演化而来的，不存在万金油架构。</li><li>架构设计应随着公司的业务发展和规模变化而调整。</li></ol><h3 id="具体案例-宜信项目架构演化" tabindex="-1"><a class="header-anchor" href="#具体案例-宜信项目架构演化" aria-hidden="true">#</a> 具体案例: 宜信项目架构演化</h3><ul><li><strong>早期</strong>: 单体架构，快速构建。</li><li><strong>业务发展</strong>: 增加F5负载均衡器，挂载Nginx或VIP方案，强化用户认证和验签。</li><li><strong>进一步发展</strong>: 数据库动静分离、多机缓存、异步传输，优化数据库层面。</li></ul><h2 id="避免炫技" tabindex="-1"><a class="header-anchor" href="#避免炫技" aria-hidden="true">#</a> 避免炫技</h2><h3 id="核心观点-3" tabindex="-1"><a class="header-anchor" href="#核心观点-3" aria-hidden="true">#</a> 核心观点</h3><ol><li>架构设计不应为了炫技而复杂化，否则公司会为之买单。</li><li>项目经理和架构师不应利用职务之便验证个人想法。</li></ol><h3 id="具体案例-工单系统设计" tabindex="-1"><a class="header-anchor" href="#具体案例-工单系统设计" aria-hidden="true">#</a> 具体案例: 工单系统设计</h3><ul><li><strong>背景</strong>: 企业合作部需要一个工单系统。</li><li><strong>问题</strong>: 新招聘的架构师为了彰显能力，设计了复杂的架构（MQ、微服务、注册中心、配置中心）。</li><li><strong>结果</strong>: 设计成本高，业务量低，不合适。最终采用单点开发，增加进程监控，保证基本可用。</li></ul><h2 id="善于聆听" tabindex="-1"><a class="header-anchor" href="#善于聆听" aria-hidden="true">#</a> 善于聆听</h2><h3 id="核心观点-4" tabindex="-1"><a class="header-anchor" href="#核心观点-4" aria-hidden="true">#</a> 核心观点</h3><ol><li>好的架构师是善于聆听的高手，能揣测客户背后的需求。</li><li>与客户交流时要学会说人话，避免专业术语。</li></ol><h3 id="具体案例-顶级管钱部门项目" tabindex="-1"><a class="header-anchor" href="#具体案例-顶级管钱部门项目" aria-hidden="true">#</a> 具体案例: 顶级管钱部门项目</h3><ul><li><strong>背景</strong>: 项目开发过程中遇到上层阻挠。</li><li><strong>问题</strong>: 领导希望在系统中体现职责权限功能。</li><li><strong>解决方案</strong>: 揣测领导需求，开发相关功能，顺利推进项目。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>架构设计的核心在于解决具体问题</li><li>解耦是设计中无时无刻不需要考虑的问题。</li><li>好的架构是演化而来的，架构设计应避免炫技，善于聆听客户需求。</li><li>通过实际案例，分享了在架构设计中的经验和教训，强调了架构师的综合能力和沟通技巧。</li></ul>',29),n=[h];function t(d,s){return a(),r("div",null,n)}const g=i(e,[["render",t],["__file","sharing1.html.vue"]]);export{g as default};
