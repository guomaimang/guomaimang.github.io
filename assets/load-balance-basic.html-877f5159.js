import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as a,e as n}from"./app-0983f945.js";const r={},t=n('<h1 id="负载均衡器基础知识" tabindex="-1"><a class="header-anchor" href="#负载均衡器基础知识" aria-hidden="true">#</a> 负载均衡器基础知识</h1><p>在多台服务器前构建出一个负载均衡的设备，简称的负载均衡器。</p><p>可以让用户的请求按照某种方式将请求分配给不同服务器进行处理。</p><img src="https://pic.hanjiaming.com.cn/2024/12/23/ca50d4fa9f92b.png" alt="1734953491570.png" style="zoom:33%;"><p>这解决了三个问题</p><ul><li>高可用性</li><li>使每一台设备压力平均分配</li><li>支持故障发现与转移</li></ul><h2 id="tomcat" tabindex="-1"><a class="header-anchor" href="#tomcat" aria-hidden="true">#</a> Tomcat</h2><ul><li>提供Web应用的服务器。</li><li>单台Tomcat无法提供高可用服务，因为它可能会宕机。</li><li>通过在前面加一个负载均衡器，连接多台Tomcat，可实现高可用性。</li></ul><h2 id="负载均衡器的作用" tabindex="-1"><a class="header-anchor" href="#负载均衡器的作用" aria-hidden="true">#</a> 负载均衡器的作用</h2><ul><li>高可用性：一台Tomcat宕机时，其他Tomcat可以顶上。</li><li>压力均衡：让后端节点设备的压力保持相对平均。</li><li>故障发现与故障转移 <ul><li>通过监控后端节点状态（如定时发送心跳包）。</li><li>如果节点无法正常返回数据，负载均衡器会将其摘除。</li></ul></li></ul><h2 id="负载均衡器的分类" tabindex="-1"><a class="header-anchor" href="#负载均衡器的分类" aria-hidden="true">#</a> 负载均衡器的分类</h2><h3 id="按软硬件分类" tabindex="-1"><a class="header-anchor" href="#按软硬件分类" aria-hidden="true">#</a> 按软硬件分类</h3><img src="https://pic.hanjiaming.com.cn/2024/12/23/b2cf80dfd7e57.png" alt="1734953652458.png" style="zoom:20%;"><ul><li><strong>硬件负载均衡器</strong>: <ul><li>专用设备，如F5公司的负载均衡器。</li><li>性能优越，满足企业级应用要求。</li><li>成本较高，价格从十几万到上百万不等。</li><li>适合预算充裕的大公司。</li></ul></li><li><strong>软件负载均衡器</strong>: <ul><li>运行在服务器或PC机上的软件。</li><li>成本较低，适合中小型公司。</li><li>在Java领域应用广泛。</li></ul></li></ul><h3 id="按网络层面分类" tabindex="-1"><a class="header-anchor" href="#按网络层面分类" aria-hidden="true">#</a> 按网络层面分类</h3><img src="https://pic.hanjiaming.com.cn/2024/12/23/9ecb892c3f544.png" alt="1734953858993.png" style="zoom:25%;"><ul><li><strong>四层代理</strong>: <ul><li>基于传输层（TCP协议）。</li><li>典型代表：Linux系统中的LVS（虚拟Linux服务器）。</li></ul></li><li><strong>七层代理</strong>: <ul><li>基于应用层（如HTTP、FTP、SMTP协议）。</li><li>典型代表：Nginx。</li></ul></li></ul><h2 id="osi七层模型" tabindex="-1"><a class="header-anchor" href="#osi七层模型" aria-hidden="true">#</a> OSI七层模型</h2><figure><img src="https://pic.hanjiaming.com.cn/2024/12/23/b2d665ef47b2a.png" alt="1734953884562.png" tabindex="0" loading="lazy"><figcaption>1734953884562.png</figcaption></figure><ul><li><strong>物理层</strong>: 最底层。</li><li><strong>数据链路层</strong>:</li><li><strong>网络层</strong>:</li><li><strong>传输层</strong>: 四层代理所在层（TCP协议）。</li><li><strong>会话层</strong>:</li><li><strong>表示层</strong>:</li><li><strong>应用层</strong>: 七层代理所在层（HTTP、FTP、SMTP等协议）。</li></ul><h2 id="四层代理与七层代理的对比" tabindex="-1"><a class="header-anchor" href="#四层代理与七层代理的对比" aria-hidden="true">#</a> 四层代理与七层代理的对比</h2><figure><img src="https://pic.hanjiaming.com.cn/2024/12/23/36a821339927d.png" alt="1734953988363.png" tabindex="0" loading="lazy"><figcaption>1734953988363.png</figcaption></figure><ul><li><strong>功能性</strong>: <ul><li>四层代理（如LVS）：支持基本的TCP代理和轮询负载均衡。</li><li>七层代理（如Nginx）：支持多种负载均衡策略（轮询、权重、IP哈希、URL哈希等），并提供资源压缩和附加处理功能。</li></ul></li><li><strong>执行效率</strong>: <ul><li>四层代理：效率更高，类似于汇编语言的效率。</li><li>七层代理：相对较低。</li></ul></li><li><strong>作用协议</strong>: <ul><li>四层代理：TCP或UDP协议。</li><li>七层代理：HTTP、FTP、SMTP等应用协议。</li></ul></li><li><strong>应用场景</strong>: <ul><li>四层代理：实时应用集群、大规模消息分发、军事应用、集群内部数据分发。</li><li>七层代理：企业级开发、外部应用程序、APP后端应用。</li></ul></li></ul><h2 id="nginx-负载均衡策略" tabindex="-1"><a class="header-anchor" href="#nginx-负载均衡策略" aria-hidden="true">#</a> Nginx 负载均衡策略</h2><img src="https://pic.hanjiaming.com.cn/2024/12/23/5e757ca69f766.png" alt="1734954007302.png" style="zoom:33%;"><ul><li><strong>轮询策略</strong>: <ul><li>类似排排坐吃果果，依次将请求分发到不同节点。</li></ul></li><li><strong>权重策略</strong>: <ul><li>根据节点性能设置权重，性能高的节点分配更多请求。</li><li>例如，八核服务器权重30，32核服务器权重70。</li></ul></li><li><strong>IP哈希策略</strong>: <ul><li>根据用户IP计算哈希值，将请求固定分配到某个节点。</li><li>缺点：无法保证负载均衡。</li></ul></li><li><strong>URL哈希策略</strong>: <ul><li>根据用户请求的URL计算哈希值，将请求固定分配到某个节点。</li><li>缺点：同样无法保证负载均衡。</li></ul></li><li><strong>Fair策略</strong>: <ul><li>需要第三方模块支持。</li><li>根据服务器的响应情况（如延迟）动态分配请求。</li></ul></li></ul><h2 id="负载均衡器的实际应用" tabindex="-1"><a class="header-anchor" href="#负载均衡器的实际应用" aria-hidden="true">#</a> 负载均衡器的实际应用</h2><ul><li><strong>硬件负载均衡器</strong>: 适合大公司，用于高性能和高可靠性要求的场景。</li><li><strong>软件负载均衡器</strong>: 适合中小型公司，用于成本较低且灵活的场景。</li><li><strong>四层代理</strong>: 用于高效传输的实时应用集群和内部数据分发。</li><li><strong>七层代理</strong>: 用于企业级开发和外部应用程序的负载均衡。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>负载均衡器在现代Web应用中起着至关重要的作用，通过合理选择和配置，可以实现高可用性、均衡压力、故障发现与转移等关键功能。</p><p>根据企业的需求和预算，可以选择硬件或软件负载均衡器，并根据具体应用场景选择四层代理或七层代理，以达到最佳的负载均衡效果。</p>',31),o=[t];function e(s,g){return l(),a("div",null,o)}const d=i(r,[["render",e],["__file","load-balance-basic.html.vue"]]);export{d as default};
