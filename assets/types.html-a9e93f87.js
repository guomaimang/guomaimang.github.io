import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as c,c as p,a as n,b as e,d as i,e as a}from"./app-9673d752.js";const l={},d=a(`<h1 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h1><p>在 javascript 中有 8 种基本的数据类型（译注：7 种原始类型和 1 种引用类型）。</p><p><strong>变量是动态类型的，它们可以存储任何类型的数据</strong>。例如，一个变量可以在前一刻是个字符串，下一刻就存储一个数字：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 没有错误</span>
<span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
message <span class="token operator">=</span> <span class="token number">123456</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>允许这种操作的编程语言，例如 javascript，被称为“动态类型”（dynamically typed）的编程语言。</p><ul><li>原始类型 <ul><li>number</li><li>bigint</li><li>string</li><li>boolean</li><li>null</li><li>undefined</li><li>symbol</li></ul></li><li>引用类型 <ul><li>object <ul><li>function 调用器（方便理解，之后说明）</li></ul></li></ul></li></ul><h2 id="number-类型" tabindex="-1"><a class="header-anchor" href="#number-类型" aria-hidden="true">#</a> Number 类型</h2><p><em>number</em> 类型代表<strong>整数</strong>和<strong>浮点数</strong>。数字可以有很多操作，比如，乘法 <code>*</code>、除法 <code>/</code>、加法 <code>+</code>、减法 <code>-</code> 等等。</p><p>除了常规的数字，还包括所谓的“特殊数值（&quot;special numeric values&quot;）”也属于这种类型：<code>Infinity</code>、<code>-Infinity</code> 和 <code>NaN</code>。</p>`,9),u=n("code",null,"Infinity",-1),r={href:"https://en.wikipedia.org/wiki/Infinity",target:"_blank",rel:"noopener noreferrer"},m=a(`<p>我们可以通过除以 0 来得到它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或者在代码中直接使用它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">Infinity</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Infinity</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,4),k=a(`<li><p><code>NaN</code> 代表一个计算错误。它是一个不正确的或者一个未定义的数学操作所得到的结果，比如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;not a number&quot;</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN，这样的除法是错误的</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>NaN</code> 是粘性的。任何对 <code>NaN</code> 的进一步数学运算都会返回 <code>NaN</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">NaN</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">NaN</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;not a number&quot;</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// NaN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以，如果在数学表达式中有一个 <code>NaN</code>，会被传播到最终结果（只有一个例外：<code>NaN ** 0</code> 结果为 <code>1</code>）。</p></li>`,1),v=a(`<p>在 javascript 中做数学运算是安全的。我们可以做任何事：除以 0，将非数字字符串视为数字，等等。<br> 脚本永远不会因为一个致命的错误（“死亡”）而停止。最坏的情况下，我们会得到 <code>NaN</code> 的结果。</p><h2 id="bigint-类型" tabindex="-1"><a class="header-anchor" href="#bigint-类型" aria-hidden="true">#</a> BigInt 类型</h2><p>在 javascript 中，&quot;number&quot; 类型无法表示大于 <code>(253-1)</code>（即 <code>9007199254740991</code>），或小于 <code>-(253-1)</code> 的整数。</p><p><code>BigInt</code> 类型是最近被添加到 javascript 语言中的，用于表示任意长度的整数。</p><p>可以通过将 <code>n</code> 附加到整数字段的末尾来创建 <code>BigInt</code> 值。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 尾部的 &quot;n&quot; 表示这是一个 BigInt 类型</span>
<span class="token keyword">const</span> bigInt <span class="token operator">=</span> <span class="token number">1234567890123456789012345678901234567890n</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>目前 Firefox/Chrome/Edge/Safari 已经支持 <code>BigInt</code> 了，但 IE 还没有。</p><h2 id="string-类型" tabindex="-1"><a class="header-anchor" href="#string-类型" aria-hidden="true">#</a> String 类型</h2><p>javascript 中的字符串必须被括在引号里。在 javascript 中，有三种包含字符串的方式。</p><ol><li>双引号：<code>&quot;Hello&quot;</code>.</li><li>单引号：<code>&#39;Hello&#39;</code>.</li><li>反引号：<code>Hello</code>.</li></ol><p>反引号是 <strong>功能扩展</strong> 引号。它们允许我们通过将变量和表达式包装在 <code>\${…}</code> 中，来将它们嵌入到字符串中。例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&quot;John&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 嵌入一个变量</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">*</span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello, John!</span>
<span class="token comment">// 嵌入一个表达式</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">the result is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the result is 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>js 只有一种 <code>string</code> 类型，一个字符串可以包含零个（为空）、一个或多个字符。没有<code>char</code></p><h2 id="boolean-类型" tabindex="-1"><a class="header-anchor" href="#boolean-类型" aria-hidden="true">#</a> Boolean 类型</h2><p>boolean 类型仅包含两个值：<code>true</code> 和 <code>false</code>。</p><p>布尔值也可作为比较的结果：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> isGreater <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="null-值" tabindex="-1"><a class="header-anchor" href="#null-值" aria-hidden="true">#</a> &quot;null&quot; 值</h2><p>特殊的 <code>null</code> 值不属于上述任何一种类型。它构成了一个独立的类型，只包含 <code>null</code> 值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>javascript 中的 <code>null</code> 不代表引用空引用或者空指针，仅仅是一个代表“无”、“空”或“值未知”的特殊值。</p><h2 id="undefined-值" tabindex="-1"><a class="header-anchor" href="#undefined-值" aria-hidden="true">#</a> &quot;undefined&quot; 值</h2><p>特殊值 <code>undefined</code> 和 <code>null</code> 一样自成类型。<code>undefined</code> 的含义是 <code>未被赋值</code>。</p><p>如果一个变量已被声明，但未被赋值，那么它的值就是 <code>undefined</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> age<span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 弹出 &quot;undefined&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从技术上讲，可以显式地将 <code>undefined</code> 赋值给变量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token comment">// 将值修改为 undefined</span>
age <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;undefined&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是不建议这样做。通常，使用 <code>null</code> 将一个“空”或者“未知”的值写入变量中，而 <code>undefined</code> 则保留作为未进行初始化的事物的默认初始值。</p><h2 id="object-类型" tabindex="-1"><a class="header-anchor" href="#object-类型" aria-hidden="true">#</a> object 类型</h2><p><code>object</code> 类型是一个特殊的类型，也是唯一的一种引用类型。</p><p>其他所有的数据类型都被称为“原始类型”。</p><h2 id="symbol-类型" tabindex="-1"><a class="header-anchor" href="#symbol-类型" aria-hidden="true">#</a> symbol 类型</h2><p><code>symbol</code> 类型用于创建对象的唯一标识符。</p><h2 id="typeof-运算符" tabindex="-1"><a class="header-anchor" href="#typeof-运算符" aria-hidden="true">#</a> typeof 运算符</h2><p><code>typeof</code> 运算符返回参数的类型。当我们想要分别处理不同类型值的时候，或者想快速进行数据类型检验时，非常有用。</p><p>对 <code>typeof x</code> 的调用会以字符串的形式返回数据类型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">typeof</span> <span class="token keyword">undefined</span> <span class="token comment">// &quot;undefined&quot;</span>
<span class="token keyword">typeof</span> <span class="token number">0</span> <span class="token comment">// &quot;number&quot;</span>
<span class="token keyword">typeof</span> <span class="token number">10n</span> <span class="token comment">// &quot;bigint&quot;</span>
<span class="token keyword">typeof</span> <span class="token boolean">true</span> <span class="token comment">// &quot;boolean&quot;</span>
<span class="token keyword">typeof</span> <span class="token string">&quot;foo&quot;</span> <span class="token comment">// &quot;string&quot;</span>
<span class="token keyword">typeof</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span> <span class="token comment">// &quot;symbol&quot;</span>
<span class="token keyword">typeof</span> Math <span class="token comment">// &quot;object&quot;  (1)</span>
<span class="token keyword">typeof</span> <span class="token keyword">null</span> <span class="token comment">// &quot;object&quot;  (2)</span>
<span class="token keyword">typeof</span> alert <span class="token comment">// &quot;function&quot;  (3)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后三行可能需要额外的说明：</p><ol><li><code>Math</code> 是一个提供数学运算的内建 <code>object</code>。我们会在 info:number 一节中学习它。此处仅作为一个 <code>object</code> 的示例。</li><li><code>typeof null</code> 的结果为 <code>&quot;object&quot;</code>。这是官方承认的 <code>typeof</code> 的错误，这个问题来自于 javascript 语言的早期阶段，并为了兼容性而保留了下来。<code>null</code> 绝对不是一个 <code>object</code>。<code>null</code> 有自己的类型，它是一个特殊值。<code>typeof</code> 的行为在这里是错误的。</li><li><code>typeof alert</code> 的结果是 <code>&quot;function&quot;</code>，因为 <code>alert</code> 在 javascript 语言中是一个函数。我们会在下一章学习函数，那时我们会了解到，在 javascript 语言中没有一个特别的 &quot;function&quot; 类型。函数隶属于 <code>object</code> 类型。但是 <code>typeof</code> 会对函数区分对待，并返回 <code>&quot;function&quot;</code>。这也是来自于 javascript 语言早期的问题。从技术上讲，这种行为是不正确的，但在实际编程中却非常方便。</li></ol><p><code>typeof(x)</code> 语法&quot; 你可能还会遇到另一种语法：<code>typeof(x)</code>。它与 <code>typeof x</code> 相同。</p><p>简单点说：<code>typeof</code> 是一个操作符，不是一个函数。这里的括号不是 <code>typeof</code> 的一部分。它是数学运算分组的括号。</p><p>有些人更喜欢用 <code>typeof(x)</code>，尽管 <code>typeof x</code> 语法更为常见。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>javascript 中有八种基本的数据类型（译注：前七种为基本数据类型，也称为原始类型，而 <code>object</code> 为复杂数据类型）。</p><ul><li><code>number</code> 用于任何类型的数字：整数或浮点数，在 <code>±(2<sup>53</sup>-1)</code> 范围内的整数。</li><li><code>bigint</code> 用于任意长度的整数。</li><li><code>string</code> 用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。</li><li><code>boolean</code> 用于 <code>true</code> 和 <code>false</code>。</li><li><code>null</code> 用于未知的值 —— 只有一个 <code>null</code> 值的独立类型。</li><li><code>undefined</code> 用于未定义的值 —— 只有一个 <code>undefined</code> 值的独立类型。</li><li><code>symbol</code> 用于唯一的标识符。</li><li><code>object</code> 用于更复杂的数据结构。</li></ul><p>我们可以通过 <code>typeof</code> 运算符查看存储在变量中的数据类型。</p><ul><li>通常用作 <code>typeof x</code>，但 <code>typeof(x)</code> 也可行。</li><li>以字符串的形式返回类型名称，例如 <code>&quot;string&quot;</code>。</li><li><code>typeof null</code> 会返回 <code>&quot;object&quot;</code> —— 这是 javascript 编程语言的一个错误，实际上它并不是一个 <code>object</code>。</li></ul><p>在接下来的章节中，我们将重点介绍原始类型值，当你掌握了原始数据类型后，我们将继续学习 <code>object</code>。</p>`,48);function b(g,h){const s=t("ExternalLinkIcon");return c(),p("div",null,[d,n("ul",null,[n("li",null,[n("p",null,[u,e(" 代表数学概念中的 "),n("a",r,[e("无穷大"),i(s)]),e(" ∞。是一个比任何数字都大的特殊值。")]),m]),k]),v])}const j=o(l,[["render",b],["__file","types.html.vue"]]);export{j as default};
