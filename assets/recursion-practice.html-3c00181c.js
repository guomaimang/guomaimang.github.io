const e=JSON.parse('{"key":"v-7ee42752","path":"/note/cs/programming/cpp/related/recursion-practice.html","title":"递归实践","lang":"zh-CN","frontmatter":{"article":false,"date":"2021-05-01T00:00:00.000Z","description":"递归实践 递归分为单向递归和双向递归，我们日常说的递归是双向递归。 Introduction 递归的定义 编程语言中，函数 Func(Type a,……)直接或间接调用函数本身，则该函数称为「递归函数」。 在实现递归函数之前，有两件重要的事情需要弄清楚: 递推关系：一个问题的结果与其子问题的结果之间的关系。 基本情况（base case）：不需要进一步的递归调用就可以直接计算答案的情况。可理解为递归跳出条件。 一旦我们计算出以上两个元素，再想要实现一个递归函数，就只需要根据递推关系调用函数本身，直到其抵达基本情况。","head":[["meta",{"property":"og:url","content":"https://guomaimang.github.io/note/cs/programming/cpp/related/recursion-practice.html"}],["meta",{"property":"og:site_name","content":"HAN Jiaming | Hirsun | 韩佳明"}],["meta",{"property":"og:title","content":"递归实践"}],["meta",{"property":"og:description","content":"递归实践 递归分为单向递归和双向递归，我们日常说的递归是双向递归。 Introduction 递归的定义 编程语言中，函数 Func(Type a,……)直接或间接调用函数本身，则该函数称为「递归函数」。 在实现递归函数之前，有两件重要的事情需要弄清楚: 递推关系：一个问题的结果与其子问题的结果之间的关系。 基本情况（base case）：不需要进一步的递归调用就可以直接计算答案的情况。可理解为递归跳出条件。 一旦我们计算出以上两个元素，再想要实现一个递归函数，就只需要根据递推关系调用函数本身，直到其抵达基本情况。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-15T05:33:29.000Z"}],["meta",{"property":"article:author","content":"Hirsun (HAN Jiaming)"}],["meta",{"property":"article:published_time","content":"2021-05-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-15T05:33:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"递归实践\\",\\"description\\":\\"递归实践 递归分为单向递归和双向递归，我们日常说的递归是双向递归。 Introduction 递归的定义 编程语言中，函数 Func(Type a,……)直接或间接调用函数本身，则该函数称为「递归函数」。 在实现递归函数之前，有两件重要的事情需要弄清楚: 递推关系：一个问题的结果与其子问题的结果之间的关系。 基本情况（base case）：不需要进一步的递归调用就可以直接计算答案的情况。可理解为递归跳出条件。 一旦我们计算出以上两个元素，再想要实现一个递归函数，就只需要根据递推关系调用函数本身，直到其抵达基本情况。\\"}"]]},"headers":[{"level":2,"title":"Introduction","slug":"introduction","link":"#introduction","children":[{"level":3,"title":"递归的定义","slug":"递归的定义","link":"#递归的定义","children":[]}]},{"level":2,"title":"递归函数的特点","slug":"递归函数的特点","link":"#递归函数的特点","children":[{"level":3,"title":"Example","slug":"example","link":"#example","children":[]},{"level":3,"title":"图解","slug":"图解","link":"#图解","children":[]}]},{"level":2,"title":"如何写出一个递归函数","slug":"如何写出一个递归函数","link":"#如何写出一个递归函数","children":[{"level":3,"title":"范式：由下到上","slug":"范式-由下到上","link":"#范式-由下到上","children":[]},{"level":3,"title":"寻找基本情况","slug":"寻找基本情况","link":"#寻找基本情况","children":[]},{"level":3,"title":"寻找递推关系（难点）","slug":"寻找递推关系-难点","link":"#寻找递推关系-难点","children":[]},{"level":3,"title":"由下到上","slug":"由下到上","link":"#由下到上","children":[]}]},{"level":2,"title":"实例: 帕斯卡三角","slug":"实例-帕斯卡三角","link":"#实例-帕斯卡三角","children":[{"level":3,"title":"递推关系","slug":"递推关系","link":"#递推关系","children":[]}]},{"level":2,"title":"单向递归和双向递归","slug":"单向递归和双向递归","link":"#单向递归和双向递归","children":[{"level":3,"title":"单向递归","slug":"单向递归","link":"#单向递归","children":[]},{"level":3,"title":"双向递归","slug":"双向递归","link":"#双向递归","children":[]}]}],"git":{"createdTime":1726378409000,"updatedTime":1726378409000,"contributors":[{"name":"hanjiaming","email":"47519540+guomaimang@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":13.96,"words":1396},"filePathRelative":"note/cs/programming/cpp/related/recursion-practice.md","localizedDate":"2021年5月1日","excerpt":"<h1> 递归实践</h1>\\n<p>递归分为单向递归和双向递归，我们日常说的递归是双向递归。</p>\\n<h2> Introduction</h2>\\n<h3> 递归的定义</h3>\\n<p>编程语言中，函数 Func(Type a,……)直接或间接调用函数本身，则该函数称为「递归函数」。</p>\\n<p>在实现递归函数之前，有两件重要的事情需要弄清楚:</p>\\n<ul>\\n<li>递推关系：一个问题的结果与其子问题的结果之间的关系。</li>\\n<li>基本情况（base case）：不需要进一步的递归调用就可以直接计算答案的情况。可理解为递归跳出条件。</li>\\n</ul>\\n<p>一旦我们计算出以上两个元素，再想要实现一个递归函数，就只需要根据递推关系调用函数本身，直到其抵达基本情况。</p>","autoDesc":true}');export{e as data};
