import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,e as a}from"./app-47abff9c.js";const t={},n=a('<h1 id="mobile-computing-models" tabindex="-1"><a class="header-anchor" href="#mobile-computing-models" aria-hidden="true">#</a> Mobile Computing Models</h1><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>移动计算环境在许多方面受到限制「constrained」</p><ul><li>Mobile devices are resource-poor「资源贫乏」, unreliable「不可靠」, highly heterogeneous「高度异构」</li><li>Network connectivity is with low bandwidth and intermittent「断断续续」</li><li>Mobility further induces「引起」 uncertainty「不确定性」 in the availability of both communication and computational resources</li></ul><p>这些限制对移动计算应用程序的设计和结构有很大影响。移动计算应用设计者需要设计适当的模型和架构来组织应用组件并指定它们的关系。</p><p>影响移动计算应用成功（或失败）的因素有很多，最重要的因素是为应用选择最合适的计算模型「computing model」和应用架构「application architecture」。</p><p>移动计算模型定义了一个设计和组织应用系统的范式「paradigm」。</p><ul><li>Divide the application system into a number of functional components and specify their relationships and interactions「将应用系统划分为多个功能组件，并指定它们之间的关系和交互」 <ul><li>Examples are mobile client-server model, mobile peer-to-peer model, mobile agent model</li></ul></li><li>不要明确指定需要哪些机制以及如何实现它们</li></ul><p>A mobile application architecture defines how a computing model is realized and implemented「移动应用架构定义了一个计算模型是如何实现和实施的」</p><ul><li>描述每个实体的组成部分</li><li>指定组件之间的功能划分</li><li>提供关于每个组件的机制和实施的细节</li></ul><p>示例：对于客户端 - 服务器模型，Thin client architecture / Smart client architecture</p><p>在移动计算环境中，有许多可能的模型来构建计算组件。</p><h2 id="client-server-model" tabindex="-1"><a class="header-anchor" href="#client-server-model" aria-hidden="true">#</a> Client-Server Model</h2><p>客户/服务器模型是为分布式系统设计的</p><ul><li>网络上的每台计算机或进程要么是客户端，要么是服务器</li><li>客户端拥有有限的资源，可以向服务器发送请求</li><li>服务器资源丰富，可以提供服务来回应客户的请求，请求的结果将被送回给客户</li><li>通信网络提供客户和服务器之间的连接</li><li>两个客户不能直接通信</li></ul><img src="https://static-file.hjm.red/2022/11/13/b16bdd77d9010.png" alt="1668291317134.png" style="zoom:50%;"><h2 id="mobile-client-server-model" tabindex="-1"><a class="header-anchor" href="#mobile-client-server-model" aria-hidden="true">#</a> Mobile Client-Server Model</h2><p>客户端/服务器模式仍然可以在移动环境中使用：移动客户端向位于固定网络的服务器请求服务</p><p>标准的C/S模式在移动环境中不能很好地工作：</p><ul><li>不能假设连续的网络连接和强大的客户端能力</li><li>移动客户端的资源限制强制将客户端活动移回服务器端（“瘦客户端”）</li><li>客户端需要处理断开连接和网络的低通信带宽，并在客户端提供持久的服务（&quot;智能客户端&quot;）。</li><li>客户端的移动性给服务器带来了额外的问题--何时何地向客户发送回信。</li></ul><p>标准的C/S模型需要仔细地重新组织客户端和服务器端的活动：</p><ul><li>将C/S模式扩展到多个层级</li><li>进行进一步的优化</li><li>Conduct further optimizations: 数据压缩、数据过滤、数据同步等</li></ul><p>移动C/S模型的三层方法:</p><ul><li>Place some logic component in a middle tier (proxy)「代理可以执行更多处理操作和/或屏蔽移动计算限制」</li><li>Proxies can perform more processing operations and/or mask out mobile computing limitations「代理人可以执行更多的处理操作和/或掩盖移动计算的限制」</li></ul><p>两个三层移动C/S模型：</p><ul><li>CAS 模型（客户端/代理/服务器）</li><li>CIS模式（客户/拦截/服务器）。</li></ul><h2 id="client-agent-server-model" tabindex="-1"><a class="header-anchor" href="#client-agent-server-model" aria-hidden="true">#</a> Client-Agent-Server Model</h2><img src="https://static-file.hjm.red/2022/11/13/abfc2c1b847e7.png" alt="1668291294496.png" style="zoom:33%;"><p>代理人代理是客户在固定网络上的代表</p><ul><li>客户端和服务器之间的通信通过代理进行</li><li>代理人持续保持客户在固定网络上的存在</li><li>对服务器来说，代理看起来就像移动客户端，所以标准的C/S互动发生在代理和服务器之间</li><li>不同的协议可用于移动客户和代理之间以及代理和服务器之间的互动</li></ul><h3 id="agent-functionalities" tabindex="-1"><a class="header-anchor" href="#agent-functionalities" aria-hidden="true">#</a> Agent functionalities</h3><ul><li>为移动客户端和服务器之间的通信交换信息「Exchange messages」和排队信息「queue messages」</li><li>从客户端卸载处理操作</li><li>处理客户和服务器之间的断开连接</li><li>优化无线链路的传输</li></ul><h3 id="advantages" tabindex="-1"><a class="header-anchor" href="#advantages" aria-hidden="true">#</a> Advantages</h3><ul><li>客户端功能转移到代理--更适合瘦客户端应用</li><li>复杂的客户请求可以由代理管理，只有最终的结果被传送给客户</li><li>服务器也可以将一些活动转移给代理（例如，压缩）</li><li>代理人可以缓存一些结果以提高性能</li></ul><h3 id="disadvantages" tabindex="-1"><a class="header-anchor" href="#disadvantages" aria-hidden="true">#</a> Disadvantages</h3><ul><li>客户端应用程序需要更改才能与代理通信</li><li>不支持客户端的断开连接操作</li></ul><h2 id="client-intercept-server-model" tabindex="-1"><a class="header-anchor" href="#client-intercept-server-model" aria-hidden="true">#</a> Client-Intercept-Server Model</h2><img src="https://static-file.hjm.red/2022/11/13/f5e1637aedaa6.png" alt="1668291955699.png" style="zoom:33%;"><ul><li>一对代理: 一个留在客户端，另一个留在固定网络上</li><li>代理人对客户和服务器都是透明的</li><li>两个代理合作，促进有效的数据优化「data optimization」和协议转换「protocol translation」</li></ul><h3 id="client-intercept-agent-functionalities" tabindex="-1"><a class="header-anchor" href="#client-intercept-agent-functionalities" aria-hidden="true">#</a> Client intercept agent functionalities</h3><ul><li>进行一些预取和压缩操作</li><li>缓存数据，以便在断开连接时满足客户的请求</li></ul><h3 id="server-intercept-agent-functionalities" tabindex="-1"><a class="header-anchor" href="#server-intercept-agent-functionalities" aria-hidden="true">#</a> Server intercept agent functionalities</h3><ul><li>信息传递和排队</li><li>从客户端卸下一些处理操作</li><li>处理客户和服务器之间的断开连接</li><li>优化无线链路的传输</li></ul><h3 id="advantages-1" tabindex="-1"><a class="header-anchor" href="#advantages-1" aria-hidden="true">#</a> Advantages</h3><ul><li>更适合于有足够计算能力和存储的客户端</li><li>不需要改变客户端和服务器端的应用程序代码</li><li>之间可以执行不同的协议: 客户端&lt;-&gt;客户代理；服务器代理&lt;-&gt;服务器</li><li>The pair of agents masks disconnection and optimizes transmission</li></ul><h3 id="disadvantages-1" tabindex="-1"><a class="header-anchor" href="#disadvantages-1" aria-hidden="true">#</a> Disadvantages</h3><ul><li>客户端需要更多的资源来运行拦截代理</li><li>需要在服务器和客户端都开发拦截代理</li><li>系统开销将增加更多</li></ul><h2 id="mobile-peer-to-peer-model" tabindex="-1"><a class="header-anchor" href="#mobile-peer-to-peer-model" aria-hidden="true">#</a> Mobile Peer-to-Peer Model</h2><h3 id="广义的c-s模型" tabindex="-1"><a class="header-anchor" href="#广义的c-s模型" aria-hidden="true">#</a> 广义的C/S模型</h3><ul><li>没有中心服务器，实际上客户端和服务器之间没有区别--所有节点都有双重角色，既是服务器又是客户端（需要资源丰富的节点）。</li><li>节点之间可以直接通信</li><li>节点的操作是完全分散的「decentralized」和异步的「asynchronous」</li><li>服务器可以移动并遭受断线</li></ul><h3 id="mobile-p2p-applications" tabindex="-1"><a class="header-anchor" href="#mobile-p2p-applications" aria-hidden="true">#</a> Mobile P2P applications</h3><ul><li>数据共享</li><li>Instant messaging</li><li>Collaboration</li><li>Entertainment</li></ul><img src="https://static-file.hjm.red/2022/11/13/9d3db7f85b124.png" alt="1668293134291.png" style="zoom:50%;"><h3 id="advantages-2" tabindex="-1"><a class="header-anchor" href="#advantages-2" aria-hidden="true">#</a> Advantages</h3><ul><li>自组织网络的良好计算模型</li><li>协作应用程序的良好架构</li><li>更加灵活：服务器端也可以移动</li><li>良好的系统扩展性</li></ul><h3 id="disadvantages-2" tabindex="-1"><a class="header-anchor" href="#disadvantages-2" aria-hidden="true">#</a> Disadvantages</h3><ul><li>双方都需要资源丰富的设备</li><li>协议设计很复杂</li></ul><h2 id="mobile-agent" tabindex="-1"><a class="header-anchor" href="#mobile-agent" aria-hidden="true">#</a> Mobile Agent</h2><h3 id="model" tabindex="-1"><a class="header-anchor" href="#model" aria-hidden="true">#</a> Model</h3><p>移动代理是一个 &quot;移动的过程&quot;「process on the move」</p><ul><li>它从一台主机分派到网络中</li><li>它在一个主机上执行一段时间，停止执行，将自己派往另一个主机，并在那里恢复执行。所有这些都在它自己的控制之下。</li></ul><img src="https://static-file.hjm.red/2022/11/13/e4cb14b9a69e5.png" alt="1668293838816.png" style="zoom:33%;"><h3 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h3><ul><li>Mobility <ul><li>移动代理可以主动穿越网络，携带在前一个主机计算的部分/中间结果</li><li>不仅仅是消息传递的替代品；在其行进的途中可以执行额外的任务</li></ul></li><li>Autonomy: 自己决定做什么以及如何、何时、何地行动</li><li>Asynchrony: 移动代理和用户可以在同一时间执行，而不会互相阻挡</li></ul><h3 id="applications" tabindex="-1"><a class="header-anchor" href="#applications" aria-hidden="true">#</a> Applications</h3><p>特别适合于那些移动计算应用</p><ul><li>需要较长的连接时间和/或用户有不良的连接/高度的流动性</li><li>当移动代理在网络上执行任务时，用户可以断开连接并做其他事情</li><li>例如，信息搜索、检索、过滤、电子商务、网络管理等。</li></ul><h3 id="advantages-3" tabindex="-1"><a class="header-anchor" href="#advantages-3" aria-hidden="true">#</a> Advantages</h3><ul><li>减少远程通信 <ul><li>在本地执行任务：节省网络带宽 -&gt; 中间结果数据在本地处理，而不是在网络上来回传输<br><img src="https://pic.hanjiaming.com.cn/2022/12/03/033d2d0ddfa6d.png" alt="1670062646576.png" loading="lazy"></li></ul></li><li>克服消息传递延迟「latency」 <ul><li>本地的、与对方的 &quot;即时 &quot;互动</li><li>最新更新的信息</li></ul></li><li>适应性「adaptive」强 <ul><li>支持断开连接「disconnected」/间歇「intermittent」连接</li><li>支持低网络带宽</li></ul></li><li>可以四处寻找最好的服务器</li><li>Be intelligent: Agent acts on behalf of client when needed</li></ul><h3 id="problems" tabindex="-1"><a class="header-anchor" href="#problems" aria-hidden="true">#</a> Problems</h3><ul><li>需要强大的移动设备: 必须在设备上安装移动代理平台</li><li>移动代理的自主操作的容错性</li><li>安全问题是主要障碍</li></ul>',71),r=[n];function d(o,s){return e(),l("div",null,r)}const u=i(t,[["render",d],["__file","Mobile-Computing-Models.html.vue"]]);export{u as default};
