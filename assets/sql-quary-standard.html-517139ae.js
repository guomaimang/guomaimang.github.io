import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-ca1b8c2d.js";const l={},t=e(`<h1 id="sql-quary-standard" tabindex="-1"><a class="header-anchor" href="#sql-quary-standard" aria-hidden="true">#</a> SQL Quary Standard</h1><h2 id="select" tabindex="-1"><a class="header-anchor" href="#select" aria-hidden="true">#</a> SELECT</h2><p>在现实世界中，你经常想要选择多个列。幸运的是，SQL使之变得非常容易。要从一个表中选择多列，只需用逗号将列名分开就可以了。</p><p>For example, this query selects two columns, <code>name</code> and <code>birthdate</code>, from the <code>people</code> table:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name<span class="token punctuation">,</span> birthdate
<span class="token keyword">FROM</span> people<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>有时，你可能想从一个表中选择所有的列。打出每一列的名字会很麻烦，所以有一个方便的快捷方式。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> people<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="limit" tabindex="-1"><a class="header-anchor" href="#limit" aria-hidden="true">#</a> LIMIT</h2><p>如果你只想返回一定数量的结果，你可以使用 LIMIT 关键字来限制返回的行数。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> people
<span class="token keyword">LIMIT</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Before getting started with the instructions below, check out the column names in the <code>films</code> table!</p><h2 id="distinct" tabindex="-1"><a class="header-anchor" href="#distinct" aria-hidden="true">#</a> DISTINCT</h2><p>通常你的结果会包括许多重复的值。如果你想从一列中选择所有的唯一值，你可以使用DISTINCT关键字。</p><p>This might be useful if, for example, you&#39;re interested in knowing which languages are represented in the <code>films</code> table:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token keyword">DISTINCT</span> <span class="token keyword">language</span>
<span class="token keyword">FROM</span> films<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Remember, you can check out the data in the tables by clicking on the table name!</p><h2 id="count-function" tabindex="-1"><a class="header-anchor" href="#count-function" aria-hidden="true">#</a> <code>COUNT()</code> function</h2><p>What if you want to count the number of employees in your employees table? The <code>COUNT()</code> function lets you do this by returning the number of rows in one or more columns.</p><p>For example, this code gives the number of rows in the <code>people</code> table:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span>
<span class="token keyword">FROM</span> people<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>正如你所看到的，COUNT(*)告诉你一个表中有多少行。然而，如果你想计算某一列的非缺失值的数量，你可以只对该列调用COUNT()。</p><p>For example, to count the number of birth dates present in the <code>people</code> table:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span>birthdate<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> people<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>It&#39;s also common to combine <code>COUNT()</code> with <code>DISTINCT</code> to count the number of <em>distinct</em> values in a column.</p><p>For example, this query counts the number of distinct birth dates contained in the <code>people</code> table:</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token keyword">DISTINCT</span> birthdate<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> people<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="where" tabindex="-1"><a class="header-anchor" href="#where" aria-hidden="true">#</a> WHERE</h2><p>在SQL中，WHERE关键字允许你根据表中的文本和数字值进行过滤。你可以使用一些不同的比较运算符。</p><ul><li><code>=</code> equal</li><li><code>&lt;&gt;</code> not equal</li><li><code>&lt;</code> less than</li><li><code>&gt;</code> greater than</li><li><code>&lt;=</code> less than or equal to</li><li><code>&gt;=</code> greater than or equal to</li></ul><p>例如，你可以过滤title记录，如标题。下面的代码返回所有标题为 &quot;Metropolis &quot;的电影。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> title
<span class="token keyword">FROM</span> films
<span class="token keyword">WHERE</span> title <span class="token operator">=</span> <span class="token string">&#39;Metropolis&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notice that the <code>WHERE</code> clause always comes after the <code>FROM</code> statement!</p><p>如果筛查日期，请使用 ISO date format， 比如 <code>&#39;1974-11-11&#39;</code></p><p>注意使用单引号引起字符串。</p><h3 id="and" tabindex="-1"><a class="header-anchor" href="#and" aria-hidden="true">#</a> AND</h3><p>可以使用AND 连接条件</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span>
<span class="token keyword">FROM</span> films
<span class="token keyword">WHERE</span> <span class="token keyword">language</span> <span class="token operator">=</span> <span class="token string">&#39;Spanish&#39;</span> <span class="token operator">AND</span> release_year <span class="token operator">&lt;</span> <span class="token number">2010</span> <span class="token operator">AND</span> release_year <span class="token operator">&gt;</span> <span class="token number">2000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="or" tabindex="-1"><a class="header-anchor" href="#or" aria-hidden="true">#</a> OR</h3><p>或者 OR 连接条件</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> title
<span class="token keyword">FROM</span> films
<span class="token keyword">WHERE</span> <span class="token punctuation">(</span>release_year <span class="token operator">=</span> <span class="token number">1994</span> <span class="token operator">OR</span> release_year <span class="token operator">=</span> <span class="token number">1995</span><span class="token punctuation">)</span>
<span class="token operator">AND</span> <span class="token punctuation">(</span>certification <span class="token operator">=</span> <span class="token string">&#39;PG&#39;</span> <span class="token operator">OR</span> certification <span class="token operator">=</span> <span class="token string">&#39;R&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="between" tabindex="-1"><a class="header-anchor" href="#between" aria-hidden="true">#</a> BETWEEN</h3><p>对于数值和时间 还可以使用 BETWEEN 关键字</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> title<span class="token punctuation">,</span> release_year
<span class="token keyword">FROM</span> films
<span class="token keyword">WHERE</span> release_year <span class="token operator">BETWEEN</span> <span class="token number">1990</span> <span class="token operator">AND</span> <span class="token number">2000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="in" tabindex="-1"><a class="header-anchor" href="#in" aria-hidden="true">#</a> IN</h3><p>可用 IN 指定多个值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name
<span class="token keyword">FROM</span> kids
<span class="token keyword">WHERE</span> age <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="is-null" tabindex="-1"><a class="header-anchor" href="#is-null" aria-hidden="true">#</a> IS NULL</h3><p>In SQL, <code>NULL</code> represents a <strong>missing or unknown</strong> value. You can check for <code>NULL</code> values using the expression <code>IS NULL</code>.</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name
<span class="token keyword">FROM</span> people
<span class="token keyword">WHERE</span> birthdate <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="like-and-not-like" tabindex="-1"><a class="header-anchor" href="#like-and-not-like" aria-hidden="true">#</a> LIKE and NOT LIKE</h2><p>正如你已经看到的，WHERE子句可以用来过滤文本数据。然而，到目前为止，你只能通过指定你感兴趣的确切文本来进行过滤。在现实世界中，你经常想搜索一个模式而不是一个特定的文本字符串。</p><p>在SQL中，LIKE操作符可以在WHERE子句中使用，以搜索一个列中的模式。为了达到这个目的，你可以使用一个叫做通配符的东西作为一些其他值的占位符。有两种通配符可以与LIKE一起使用。</p><ul><li><code>_通配符</code>将匹配单个字符。例如，下面的查询匹配 &quot;DataCamp&quot;、&quot;DataComp &quot;等公司。</li><li>Get the names of all people whose names begin with &#39;B&#39;. The pattern you need is <code>&#39;B%&#39;</code>.</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> name
<span class="token keyword">FROM</span> people
<span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;B%&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">/*
Get the names of people whose names have &#39;r&#39; as the second letter. The pattern you need is &#39;_r%&#39;
*/</span>

<span class="token keyword">SELECT</span> name
<span class="token keyword">FROM</span> people
<span class="token keyword">WHERE</span> name <span class="token operator">LIKE</span> <span class="token string">&#39;_r%&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aggregate-functions" tabindex="-1"><a class="header-anchor" href="#aggregate-functions" aria-hidden="true">#</a> Aggregate functions</h2><p>通常，你会想对数据库中的数据进行一些计算。SQL提供了一些函数，称为聚合函数，来帮助你解决这个问题。</p><ul><li>COUNT()</li><li>MAX()</li><li>MIN()</li><li>SUM()</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">SUM</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> films<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> films<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> films<span class="token punctuation">;</span>

<span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> films<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="note-on-arithmetic" tabindex="-1"><a class="header-anchor" href="#note-on-arithmetic" aria-hidden="true">#</a> Note on arithmetic</h2><p>除了使用聚合函数外，你还可以用<code>+、-、*、/</code>等符号进行基本算术。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT (4.0 / 3.0) AS result;
&lt;&lt;&lt; 1.333

SELECT (10 / 3);
&lt;&lt;&lt; 3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="as-aliasing" tabindex="-1"><a class="header-anchor" href="#as-aliasing" aria-hidden="true">#</a> AS aliasing</h2><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>budget<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span>
<span class="token keyword">FROM</span> films<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>会有两个名为max的列</p><p>为了避免这样的情况，SQL允许你做一些叫做别名的事情。别名只是意味着你给某个东西指定了一个临时的名字。对于别名，你使用AS关键字。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>budget<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_budget<span class="token punctuation">,</span>
       <span class="token function">MAX</span><span class="token punctuation">(</span>duration<span class="token punctuation">)</span> <span class="token keyword">AS</span> max_duration
<span class="token keyword">FROM</span> films<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,67),i=[t];function o(p,d){return s(),a("div",null,i)}const u=n(l,[["render",o],["__file","sql-quary-standard.html.vue"]]);export{u as default};
