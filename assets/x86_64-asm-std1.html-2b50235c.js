import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as r,c as i,f as s,a as e,b as t,e as n}from"./app-3bb88a14.js";const d={},o=e("h1",{id:"x86汇编语言基础1",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#x86汇编语言基础1","aria-hidden":"true"},"#"),t(" x86汇编语言基础1")],-1),l=e("p",null,"为什么要学习机器码？",-1),h=e("ul",null,[e("li",null,"Many years ago, people write programs with machine code"),e("li",null,"Nowadays, people write programs with high-level languages mainly for productivity and portability reasons"),e("li",null,"To write a program that runs is easy"),e("li",null,[t("To write a program that "),e("strong",null,"runs well (reliable and efficient),"),t(" you need to understand how the machine execute programs")])],-1),c=n('<h2 id="相关定义" tabindex="-1"><a class="header-anchor" href="#相关定义" aria-hidden="true">#</a> 相关定义</h2><ul><li><p>Architecture (instruction set architecture - ISA)「体系结构（指令集体系结构-ISA）」: The parts of a processor design that one needs to understand to write assembly code</p></li><li><ul><li>Examples: instruction set specification, registers「指令集规范，寄存器」</li><li>We will mainly focus on the x86-64 architecture there</li></ul></li><li><p>Microarchitecture「微体系结构」: Implementation of the architecture</p></li><li><ul><li>Examples: cache sizes and core frequency「体系结构的实现」</li></ul></li><li><p>Code Forms</p></li><li><ul><li>Machine Code「机器码」: The byte-level programs that a processor executes「处理器执行的字节级程序」</li><li>Assembly Code「汇编语言」: A text representation of machine code「机器代码的文本表示」</li></ul></li></ul><h2 id="from-high-level-language-to-assembly" tabindex="-1"><a class="header-anchor" href="#from-high-level-language-to-assembly" aria-hidden="true">#</a> From high-level language to assembly</h2><img src="https://pic.hanjiaming.com.cn/2021/03/25/04cf656a84795.png" alt="CleanShot 2021-03-25 at 12.58.57@2x.png" title="CleanShot 2021-03-25 at 12.58.57@2x.png"><h2 id="assembly-programmer-s-view" tabindex="-1"><a class="header-anchor" href="#assembly-programmer-s-view" aria-hidden="true">#</a> Assembly programmer’s view</h2><h3 id="programmer-visible-state" tabindex="-1"><a class="header-anchor" href="#programmer-visible-state" aria-hidden="true">#</a> Programmer-Visible State</h3><ul><li>PC: Program counter <ul><li><p>Address of next instruction</p><ul><li>Called “EIP” (IA32) or “RIP” (x86-64)</li></ul></li><li><p>Register file</p><ul><li>Memory inside the CPU</li><li>Used for instruction execution「用于指令执行」</li></ul></li><li><p>Condition codes</p><ul><li>Store status information about most recent arithmetic operation「存储有关最新算术运算的状态信息」</li><li>Used for conditional branching「Used for conditional branching」</li></ul></li></ul></li></ul><h3 id="memory" tabindex="-1"><a class="header-anchor" href="#memory" aria-hidden="true">#</a> Memory</h3><ul><li>Byte addressable array</li><li>Code, user data, (some) OS data</li><li>Includes stack used to support procedures</li></ul><h2 id="machine-instruction-example" tabindex="-1"><a class="header-anchor" href="#machine-instruction-example" aria-hidden="true">#</a> Machine instruction example</h2><img src="https://pic.hanjiaming.com.cn/2021/03/25/214984684622a.png" alt="image.png" title="image.png"><h2 id="data-types" tabindex="-1"><a class="header-anchor" href="#data-types" aria-hidden="true">#</a> Data types</h2><h3 id="word-in-x86-64-isa" tabindex="-1"><a class="header-anchor" href="#word-in-x86-64-isa" aria-hidden="true">#</a> “word” in x86-64 ISA</h3><ul><li><p>Word: 16 bits, 2 bytes</p></li><li><p>Double words: 32 bits, 4 bytes</p></li><li><p>Quad words: 64 bits, 8 bytes</p><table><thead><tr><th><strong>C declaration</strong></th><th><strong>Intel data type</strong></th><th><strong>Assembly code</strong> <strong>suffix</strong></th><th><strong>Size (bytes)</strong></th></tr></thead><tbody><tr><td>char</td><td>Byte</td><td>b</td><td>1</td></tr><tr><td>short</td><td>Word</td><td>w</td><td>2</td></tr><tr><td>int</td><td>Double word</td><td>l</td><td>4</td></tr><tr><td>long</td><td>Quad word</td><td>q</td><td>8</td></tr><tr><td>char *</td><td>Quad word</td><td>q</td><td>8</td></tr><tr><td>float</td><td>Single precision</td><td>s</td><td>4</td></tr><tr><td>double</td><td>Double precision</td><td>l</td><td>8</td></tr></tbody></table></li></ul><p>注明：在不同的ISA架构中，word的长度不同</p><h3 id="word-in-mips-x64-isa" tabindex="-1"><a class="header-anchor" href="#word-in-mips-x64-isa" aria-hidden="true">#</a> “word” in MiPS-x64 ISA</h3><ul><li>Word: 32 bits, 4 bytes</li><li>Double words: 64 bits, 8 bytes</li></ul><h2 id="x86-64-registers" tabindex="-1"><a class="header-anchor" href="#x86-64-registers" aria-hidden="true">#</a> X86-64 registers</h2><h3 id="寄存器图示" tabindex="-1"><a class="header-anchor" href="#寄存器图示" aria-hidden="true">#</a> 寄存器图示</h3><img src="https://pic.hanjiaming.com.cn/2021/03/25/1872bf430d78c.png" alt="CleanShot 2021-03-25 at 13.09.25@2x.png" title="CleanShot 2021-03-25 at 13.09.25@2x.png"><img src="https://pic.hanjiaming.com.cn/2021/03/25/8ed7a273e1d82.png" alt="CleanShot 2021-03-25 at 13.10.15@2x.png" title="CleanShot 2021-03-25 at 13.10.15@2x.png"><h3 id="寄存器的兼容实现" tabindex="-1"><a class="header-anchor" href="#寄存器的兼容实现" aria-hidden="true">#</a> 寄存器的兼容实现</h3><p>64位系统向下兼容的原因</p><img src="https://pic.hanjiaming.com.cn/2021/03/25/a466ad1044f57.png" alt="image.png" title="image.png"><h2 id="instruction" tabindex="-1"><a class="header-anchor" href="#instruction" aria-hidden="true">#</a> Instruction</h2><h3 id="moving-data" tabindex="-1"><a class="header-anchor" href="#moving-data" aria-hidden="true">#</a> Moving data</h3><h4 id="movq-source-dest" tabindex="-1"><a class="header-anchor" href="#movq-source-dest" aria-hidden="true">#</a> movq,Source, Dest</h4><ul><li>Source values can be constants, from registers or from memory「源值可以是常量，可以是寄存器中的值，也可以是存储器中的值」</li><li>Results can be stored in either registers or memory「结果可以存储在寄存器或存储器中「结果可以存储在寄存器或存储器中」</li><li>Moving different data sizes: movq, movl, movw, movb（依照来源和目的地的最大长度，使用相应的指令」</li></ul><h4 id="operand-types" tabindex="-1"><a class="header-anchor" href="#operand-types" aria-hidden="true">#</a> Operand Types</h4><p>Operand Types (basically, where data are stored)</p><ul><li><p><strong>Immediate</strong>: Constant integer data</p><ul><li>Example: $ 0x400，$-533</li><li>Like C constant, prefixed with <code>$</code> in the assembly code<br> 像C常量一样，在汇编代码中以$开头</li></ul></li><li><p><strong>Register</strong>: One of 16 integer registers</p><ul><li><p>Example: %rax, %r13</p></li><li><p>But %rsp reserved for special use</p><ul><li>Others have special uses for particular instructions</li></ul></li><li><p><strong>Memory</strong>: 8 consecutive bytes of memory at address given by register</p></li><li><p>Simplest example: (%rax)<br> - Various other “address modes”<br> - 实现原理：指针</p></li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2021/03/25/6cd4e45feb41e.png" alt="image.png" title="image.png"><p><strong>Cannot do memory-memory transfer with a single instruction!</strong></p><h3 id="some-arithmetic-operations" tabindex="-1"><a class="header-anchor" href="#some-arithmetic-operations" aria-hidden="true">#</a> Some arithmetic operations</h3><p>Two Operand Instructions</p><p>Format Computation<br> addq Src,Dest Dest = Dest + Src<br> subq Src,Dest Dest = Dest − Src<br> imulq Src,Dest Dest = Dest * Src<br> salq Src,Dest Dest = Dest &lt;&lt; Src <strong>Also called shlq</strong><br> sarq Src,Dest Dest = Dest &gt;&gt; Src <strong>Arithmetic</strong><br> shrq Src,Dest Dest = Dest &gt;&gt; Src <strong>Logical</strong><br> xorq Src,Dest Dest = Dest ^ Src<br> andq Src,Dest Dest = Dest &amp; Src<br> orq Src,Dest Dest = Dest | Src</p><p>Watch out for argument order!<br> No distinction between signed and unsigned int</p><img src="https://pic.hanjiaming.com.cn/2021/03/25/0e5da5ac90015.png" alt="image.png" title="image.png"><h3 id="leaq" tabindex="-1"><a class="header-anchor" href="#leaq" aria-hidden="true">#</a> Leaq</h3><img src="https://pic.hanjiaming.com.cn/2021/03/25/1f7cc711cdb16.png" alt="image.png" title="image.png"><h2 id="memory-addressing" tabindex="-1"><a class="header-anchor" href="#memory-addressing" aria-hidden="true">#</a> Memory addressing</h2><h3 id="simple-modes" tabindex="-1"><a class="header-anchor" href="#simple-modes" aria-hidden="true">#</a> simple modes</h3><img src="https://pic.hanjiaming.com.cn/2021/03/25/66402b3e17e2f.png" alt="image.png" title="image.png"><h4 id="complete-memory-addressing-modes" tabindex="-1"><a class="header-anchor" href="#complete-memory-addressing-modes" aria-hidden="true">#</a> Complete memory addressing modes</h4><img src="https://pic.hanjiaming.com.cn/2021/03/25/f56035d621009.png" alt="CleanShot 2021-03-25 at 15.16.52@2x.png" title="CleanShot 2021-03-25 at 15.16.52@2x.png"><h2 id="引用" tabindex="-1"><a class="header-anchor" href="#引用" aria-hidden="true">#</a> 引用</h2><ul><li>COMP1411@Polyu PowerPoint</li></ul>',47);function m(p,g){return r(),i("div",null,[o,l,h,s(" more "),c])}const f=a(d,[["render",m],["__file","x86_64-asm-std1.html.vue"]]);export{f as default};
