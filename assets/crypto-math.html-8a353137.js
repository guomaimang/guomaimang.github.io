import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as a,e}from"./app-f3c95e06.js";const n={},r=e(`<h1 id="crypto-math" tabindex="-1"><a class="header-anchor" href="#crypto-math" aria-hidden="true">#</a> Crypto Math</h1><h2 id="diffie-hellman-protocol" tabindex="-1"><a class="header-anchor" href="#diffie-hellman-protocol" aria-hidden="true">#</a> Diffie-Hellman Protocol</h2><img src="https://pic.hanjiaming.com.cn/2024/10/30/0d754202c1fa8.png" alt="Diffie-Hellman_Key_Exchange.svg.png" style="zoom:33%;"><div class="hint-container tip"><p class="hint-container-title">提示</p><p>离散对数问题是指在给定一个大质数p和一个基数g的情况下，找到一个整数x，使得g^x ≡ y (mod p)。这个问题被认为在计算上是困难的，Diffie-Hellman协议的安全性正是基于离散对数问题的难度。</p></div><p>Diffie-Hellman协议是公钥加密的“种子”，另一个重要的分支是RSA加密算法。</p><p>Example:</p><p>Alice和Bob希望在公开的互联网信道上安全地交换一个共享的秘密密钥，以便后续使用对称加密进行安全通信。</p><p>在公开信道上交换密钥时，存在被攻击者监听的风险。Diffie-Hellman协议通过数学方法确保即使通信被监听，攻击者也无法得知密钥的具体内容。</p><ol><li>Alice和Bob选择一个大质数p和基数g，并公开这些值。</li><li>Alice生成一个随机数a，并计算A = g^a mod p，然后将A发送给Bob。</li><li>Bob生成一个随机数b，并计算B = g^b mod p，然后将B发送给Alice。</li><li>Alice计算共享密钥S = B^a mod p。</li><li>Bob计算共享密钥S = A^b mod p。</li><li>因为S = g^(ab) mod p，Alice和Bob得到了相同的共享密钥。</li></ol><p>假设p = 23, g = 5。</p><ul><li>Alice选择a = 6，计算A = 5^6 mod 23 = 8。</li><li>Bob选择b = 15，计算B = 5^15 mod 23 = 19。</li><li>Alice计算共享密钥S = 19^6 mod 23 = 2。</li><li>Bob计算共享密钥S = 8^15 mod 23 = 2。<br> 最终，Alice和Bob得到了相同的共享密钥2。</li></ul><h2 id="discrete-logarithm-problem" tabindex="-1"><a class="header-anchor" href="#discrete-logarithm-problem" aria-hidden="true">#</a> Discrete Logarithm Problem</h2><p>离散对数问题（DLP）：已知 p、 g 和 g^x mod q ，计算 x 是困难的。这里的破是一个大素数， g 是生成元， g^x mod q 是已知结果， x 是我们需要计算的未知数。由于计算离散对数的复杂性，求解 x 是困难的。</p><p>具体来说，如果我们有一个素数 p，和一个生成元 g，以及一个数 y，使得 y=g^x mod  p，那么 x 就是 y 以 g 为底的离散对数。计算离散对数 x 是一个复杂的问题。</p><p>DL 假设（假设离散对数问题是困难的）是安全性的必要条件。也就是说，我们假设计算离散对数是非常困难的，这个假设是许多加密算法安全性的基础。</p><p>什么是“困难的”？在加密学中，“困难的”通常意味着计算量非常大，以至于在合理的时间内无法计算出结果。</p><p>暴力破解（brute-force attack）是一种尝试所有可能的密钥组合以找到正确密钥的方法。在离散对数问题中，暴力破解是不可行的，因为可能的组合数量非常大。</p><details class="hint-container details"><summary>Example</summary><p>假设我们有一个大素数 p=23，生成元 g=5，和 g^x mod  p= 4。我们需要计算 x。</p><img src="https://pic.hanjiaming.com.cn/2024/10/30/57c6b5909b0ea.png" alt="1730281455861.png" style="zoom:33%;"></details><h2 id="definition-notation" tabindex="-1"><a class="header-anchor" href="#definition-notation" aria-hidden="true">#</a> Definition Notation</h2><p>对于一个正整数 n 和任意整数 a 和 b。</p><ul><li>a | b 表示 a 能整除 b，即存在一个整数 t，使得 b = ta。</li><li>gcd(a, b) 表示 a 和 b 的最大公约数。例如，gcd(8, 12) = 4。</li><li>如果 gcd(a, b) = 1，则 a 和 b 互为质数，即 a 和 b 没有其他公约数，除了 1。注意，a 或 b 本身不一定是质数。</li><li>Zₙ 表示模 n 的整数集合，即 {0, 1, 2, ..., n - 1}。这是一个环结构。</li><li>模运算表示 a 除以 n 的余数。a % n 和 a mod n 都表示这个余数，结果 r 属于 Zₙ。即 n 能整除 (a - r)。</li><li>a ≡ₙ b 表示整数 a 和 b 在模 n 下同余。</li><li>a 和 b 在模 n 下同余的两个等价条件：a % n = b % n；或 n 能整除 (a - b)。</li><li>n 被称为模数。</li><li>如果模数在上下文中是明确的，可以省略 mod n 或 ≡ₙ 中的 n。</li><li>在模运算中，符号 ≡ 表示同余关系。 <ul><li>具体来说，两个整数 a 和 b, 如果它们除以 n 的余数相同, 则被称为在模 n 意义下同余</li><li>数学上记作 a ≡ b mod n, 或者 a ≡<sub>n</sub> b</li><li>这意味着 n 整除 a−b，即 (a-b)/n 是整数</li><li>2 * 8 ≡ 1 mod 15 表示 2 * 8 / 15 = 1</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">求最大公约数</p><p>给定两个整数 56 和 98，求它们的最大公约数，</p><ol><li>分解因数：56 = 2^3 × 7，98 = 2 × 7^2。</li><li>找出共同的因数：2 和 7。</li><li>取最小次幂：2^1 × 7^1 = 14。</li></ol><p>因此，gcd(56, 98) = 14。</p></div><h2 id="modular-addition-multiplication" tabindex="-1"><a class="header-anchor" href="#modular-addition-multiplication" aria-hidden="true">#</a> Modular Addition &amp; Multiplication</h2><ul><li>一个数的加法逆元是在模运算下加上该数可以得到零的数。 <ul><li>例如，在 mod 9 下，2 的加法逆元是 7，因为 2 + 7 = 9 mod 9 = 0。</li></ul></li><li>一个数的乘法逆元是在模运算下乘以该数可以得到 1 的数。 <ul><li>例如，在 mod 9 下，2 的乘法逆元是 5，因为 2 * 5 = 10 mod 9 = 1。</li><li>乘法逆元是否总是存在？答案是否定的，只有当两个数互质时，乘法逆元才存在。</li></ul></li><li>两个数互质是指它们的最大公约数为 1。 <ul><li>例如，3 和 4 是互质的，因为它们的最大公约数是 1。互质性在确定乘法逆元时非常重要。</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">除法计算 （除法的含义）</p><p>计算 9 / 2 ≡<sub>15</sub> 的结果</p><ul><li>首先，我们找到 2 的模 15 的逆元, 即 2x mod 15 = 1, x = 8</li><li>9 / 2 ≡<sub>15</sub> 等价于 9 * 8 ≡<sub>15</sub>, 即 (72 - x) / 15 为 的结果为整数</li><li>可知 x = 12</li></ul></div><p>在模 15 的运算中，将“乘以 8”解释为“除以 2”是合理的。这是因为在模 15 意义下，8 的逆元是 2。</p><p>在模 15 的运算中，2 和 8 有特殊的关系。具体来说，8 的逆元是 2，这意味着 8⋅2≡1mod  15。</p><p>没有这样的 y 存在！这意味着在模 15 意义下，5 没有逆元。</p><h2 id="extended-euclidean-algorithm" tabindex="-1"><a class="header-anchor" href="#extended-euclidean-algorithm" aria-hidden="true">#</a> Extended Euclidean Algorithm</h2><p>贝祖定理（Bézout&#39;s theorem）</p><ul><li>对于所有整数 x 和 y，存在整数 a 和 b，使得 ax + by = gcd（x,y）。</li><li>这意味着我们可以找到一组系数 a 和 b，使得x和y 的线性组合等于它们的最大公约数。</li></ul><p>我们可以使用扩展欧几里得算法</p><ul><li>30÷20=1余10（即30=1·20+10）</li><li>20÷10=2余0（即20=2·10+0）</li></ul><p>所以，gcd(30，20)=10</p><h2 id="groups" tabindex="-1"><a class="header-anchor" href="#groups" aria-hidden="true">#</a> Groups</h2><p>在一个有限「finite」集合G中，定义一个“群运算”（例如），</p><ul><li>如果对于任意的a和b在G中，a * b的结果也在G中，那么这个运算是封闭「closed」的。</li><li>对于G中的任意元素a, b, c，(a * b) * c = a * (b * c)成立，这意味着运算是结合「associative」的。</li><li>对于阿贝尔群（Abelian group），任意a和b在G中，a * b = b * a成立，这意味着运算是可交换的「commutative」。</li><li>G中存在一个单位元e，对于任意a在G中，e * a = a * e = a成立。</li><li>对于G中的任意元素a，存在一个元素b使得 a * b = b * a = e成立，这意味着每个元素都有逆元素。</li></ul><p>Examples:</p><ul><li>例如，整数集合Z在加法运算下是一个无限群「infinite」。</li></ul><details class="hint-container details"><summary>Example</summary><p>假设我们有一个集合G = {0, 1, 2}，定义一个运算 *为模3加法，即a * b = (a + b) mod 3。验证这个集合G在运算 *下是否构成一个群。</p><p>我们需要验证G是否满足群的四个基本性质：封闭性、结合律、单位元和逆元。</p><ol><li><strong>封闭性</strong>： <ul><li>对于任意a, b ∈ G，(a + b) mod 3的结果仍然在集合G中。例如，1 * 2 = (1 + 2) mod 3 = 0，0在G中。</li></ul></li><li><strong>结合律</strong>： <ul><li>对于任意a, b, c ∈ G，(a * b) * c = (a + b) mod 3 + c mod 3 = a + (b + c) mod 3 = a * (b * c)。</li></ul></li><li><strong>单位元</strong>： <ul><li>0是单位元，因为对于任意a ∈ G，a * 0 = (a + 0) mod 3 = a。</li></ul></li><li><strong>逆元</strong>： <ul><li>对于任意a ∈ G，存在一个b使得a * b = (a + b) mod 3 = 0。例如，1的逆元是2，因为1 + 2 = 3，3 mod 3 = 0。</li></ul></li></ol><p>集合G = {0, 1, 2}在运算 *（模3加法）下满足群的所有性质，因此G在此运算下构成一个群。</p></details><h2 id="diffie-hellman" tabindex="-1"><a class="header-anchor" href="#diffie-hellman" aria-hidden="true">#</a> Diffie-Hellman</h2><p>Diffie-Hellman 协议的安全性依赖于离散对数问题「discrete logarithm problem (DLP)」的计算难度。</p><h2 id="schnorr-signature-verification" tabindex="-1"><a class="header-anchor" href="#schnorr-signature-verification" aria-hidden="true">#</a> Schnorr Signature &amp; Verification</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>假如

- 消息M = &quot;Hello, Schnorr!&quot;
- 私钥x = 3
- 公钥X = g^x = 2^3 = 8
- 生成元g = 2
- 随机数k = 5

步骤

1. 计算R = g^k = 2^5 = 32
2. 计算c = H(M, R) = H(&quot;Hello, Schnorr!&quot;, 32)（假设哈希值为7）
3. 计算s = k + cx = 5 + 7*3 = 26
4. 签名为(R, s) = (32, 26)

验证

1. 计算g^s = 2^26
2. 计算R * X^c = 32 * 8^7
3. 检查g^s是否等于R * X^c
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="重点关注" tabindex="-1"><a class="header-anchor" href="#重点关注" aria-hidden="true">#</a> 重点关注</h2><ul><li>ECDSA的短签名大小，ECDSA中的公钥恢复：ECDSA的一个显著优点是其签名较短，这提高了效率。此外，公钥恢复技术在某些场景下非常有用。</li><li>BLS的美妙之处（例如，更短的签名）以及其他扩展性。BLS签名方案不仅提供了更短的签名，还具有其他扩展性，使其在某些应用中非常有吸引力。</li></ul><h2 id="digital-signature-algorithm-dsa" tabindex="-1"><a class="header-anchor" href="#digital-signature-algorithm-dsa" aria-hidden="true">#</a> Digital Signature Algorithm (DSA)</h2><p>DSA，r是通过生成元g的k次幂对模数q取余得到的，s是k的逆元乘以H(m)加上x乘以r再对模数q取余得到的。</p><p>s中的“模数q”部分（涉及H(m)和r = g^k）起到了类似于Schnorr中H(M, R)的“转换函数”的作用。</p><p>这种设计“模糊”了可用于攻击的代数关系。</p><h2 id="elliptic-curve-discrete-logarithm-problem" tabindex="-1"><a class="header-anchor" href="#elliptic-curve-discrete-logarithm-problem" aria-hidden="true">#</a> Elliptic Curve Discrete Logarithm Problem</h2><p>椭圆曲线离散对数问题是指给定椭圆曲线上的两个点P和Q，找到一个整数k，使得Q = kP。这个问题在计算上是非常困难的，因此被用作密码学的基础。</p><p>椭圆曲线离散对数问题（ECDLP）被认为具有指数级的计算难度「指数级的计算难度」。</p><p>ECDSA是一种基于椭圆曲线的数字签名算法，用于验证消息的真实性和完整性。它广泛应用于现代加密通信中，如SSL/TLS协议。</p><h2 id="rsa-factoring-problem" tabindex="-1"><a class="header-anchor" href="#rsa-factoring-problem" aria-hidden="true">#</a> RSA/factoring problem</h2><p>暴力攻击「Brute-force attacks」尝试：暴力攻击是一种通过尝试所有可能的密钥组合来破解加密的方式。</p><p>对于RSA来说，这意味着尝试所有可能的私钥d，但由于d的范围很大，这种方法非常耗时。</p><p>所有可能的密钥 - d的范围越大，安全性越高，但解密速度越慢。</p><h2 id="comparison-of-signature-lengths" tabindex="-1"><a class="header-anchor" href="#comparison-of-signature-lengths" aria-hidden="true">#</a> Comparison of Signature Lengths</h2><img src="https://pic.hanjiaming.com.cn/2024/11/23/3e081e3a367fb.png" alt="1732305178158.png" style="zoom:40%;"><h2 id="threshold-signing" tabindex="-1"><a class="header-anchor" href="#threshold-signing" aria-hidden="true">#</a> Threshold Signing</h2><ul><li>常规签名可能不够有用/灵活。</li><li>效率、安全性、隐私。数字签名技术需要在效率、安全性和隐私之间找到平衡。</li></ul><p>门限秘密共享是一种密码学技术，它将秘密分成多个部分，只有当达到某个门限时，才能重构秘密。</p><p>(t+1, n)门限签名：t+1个份额可以恢复私钥。</p><p>在门限签名方案中，私钥被分成n个份额，只有当获得至少t+1个份额时，才能恢复出完整的私钥。</p><p>一旦秘密被恢复，分享就变得没有意义了。这意味着，一旦私钥被恢复出来，分割成多个份额的意义就消失了，因为完整的私钥已经被重建。</p>`,66),d=[r];function t(o,s){return l(),a("div",null,d)}const h=i(n,[["render",t],["__file","crypto-math.html.vue"]]);export{h as default};
