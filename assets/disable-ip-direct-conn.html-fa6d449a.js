import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as e,e as a}from"./app-0c64ccd6.js";const c={},d=a('<h1 id="禁用ip直连的原因" tabindex="-1"><a class="header-anchor" href="#禁用ip直连的原因" aria-hidden="true">#</a> 禁用IP直连的原因</h1><p>探讨京东开发为何要禁用IP直连，并介绍两种解决方案来应对IP直连所带来的问题。</p><img src="https://pic.hanjiaming.com.cn/2024/12/23/1388107d7e21f.png" alt="1734952490322.png" style="zoom:25%;"><h2 id="问题提出" tabindex="-1"><a class="header-anchor" href="#问题提出" aria-hidden="true">#</a> 问题提出</h2><p>IP直连的问题</p><img src="https://pic.hanjiaming.com.cn/2024/12/23/a4a34dd900fe8.png" alt="1734952446255.png" style="zoom:25%;"><ul><li>在开发环境中，常见的做法是直接使用IP地址和端口号来连接数据库或其他服务。</li><li>例如，连接MySQL数据库时，可能会写成 <code>192.168.31.205:3306/database_name</code>。</li><li>这种方法在开发环境中是可行的，但在生产环境中会带来很大的麻烦。</li></ul><h2 id="强耦合问题" tabindex="-1"><a class="header-anchor" href="#强耦合问题" aria-hidden="true">#</a> 强耦合问题</h2><img src="https://pic.hanjiaming.com.cn/2024/12/23/67874c9036e78.png" alt="1734952516165.png" style="zoom:33%;"><p>强耦合的定义: 强耦合是指两个模块之间的依赖关系非常紧密，一旦其中一个模块发生变化，另一个模块也必须随之调整。</p><p>案例分析</p><ul><li>在开发环境中，Tomcat程序可能直接配置数据库的IP地址，例如 <code>jdbc:mysql://192.168.31.102:3306/database_name</code>。</li><li>如果将这种配置直接部署到生产环境中，一旦数据库的IP地址发生变化（例如从 <code>192.168.31.102</code> 变为 <code>192.168.31.103</code>），就需要修改源代码并重新部署应用。</li><li>这种操作在大公司中非常繁琐，需要重新测试、审批、协调资源等。</li></ul><h2 id="解决方案一-引入内部dns" tabindex="-1"><a class="header-anchor" href="#解决方案一-引入内部dns" aria-hidden="true">#</a> 解决方案一：引入内部DNS</h2><p>DNS的作用：DNS（域名解析服务器）将域名解析为IP地址，方便记忆和管理。</p><p>内部DNS的实现：</p><ul><li>在局域网中搭建一个DNS解析服务器，将数据库的IP地址映射为一个自定义域名。</li><li>例如，将 <code>db.example.com</code> 映射为 <code>192.168.31.102</code>。</li></ul><p>优点: 通过DNS进行IP地址的迁移非常灵活。例如，将 <code>192.168.31.102</code> 改为 <code>192.168.31.103</code>，只需在DNS服务器上更新映射关系，应用程序无需修改代码。</p><p>缺点</p><ul><li>DNS无法进行故障发现和转移。如果数据库服务器宕机，DNS仍然会返回宕机服务器的IP地址，导致应用程序访问失败。</li><li>DNS的负载均衡策略较为简单，只支持轮询。</li></ul><h2 id="解决方案二-引入注册中心" tabindex="-1"><a class="header-anchor" href="#解决方案二-引入注册中心" aria-hidden="true">#</a> 解决方案二：引入注册中心</h2><p>注册中心的作用: 注册中心用于服务注册和发现，支持故障转移和负载均衡。</p><p>常用注册中心：</p><ul><li>阿里巴巴的Nacos</li><li>Netflix的Eureka</li><li>Consul</li></ul><p>工作原理</p><ul><li>部署一个注册中心，所有服务（如MySQL数据库）启动时向注册中心注册。</li><li>注册中心维护一个服务列表，包含所有可用的服务节点。</li><li>应用程序（如Tomcat）从注册中心获取服务节点的IP地址，并向选定的节点发起请求。</li></ul><p>故障发现和转移</p><ul><li>服务节点定期向注册中心发送心跳包，告知其状态。</li><li>如果某个节点在一定时间内未发送心跳包，注册中心将其从服务列表中移除。</li><li>应用程序从注册中心获取的IP地址列表中不会包含宕机的节点。</li></ul><p>优点</p><ul><li>支持故障发现与故障转移，保证高可用性。</li><li>提供多种负载均衡策略，配置灵活。</li></ul><p>缺点</p><ul><li>架构复杂度增加，需要部署和维护注册中心集群。</li><li>注册中心处理逻辑复杂，可能增加故障概率。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>IP直连的问题: 造成应用之间的强耦合。</li><li>解决方案 <ul><li>引入DNS，采用域名方式进行服务访问。</li><li>引入注册中心，支持服务注册、发现和故障转移。</li></ul></li></ul>',33),o=[d];function n(t,p){return l(),e("div",null,o)}const s=i(c,[["render",n],["__file","disable-ip-direct-conn.html.vue"]]);export{s as default};
