import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as e,e as i}from"./app-b30a931a.js";const t={},s=i(`<h1 id="use-http" tabindex="-1"><a class="header-anchor" href="#use-http" aria-hidden="true">#</a> Use HTTP</h1><h2 id="http-base" tabindex="-1"><a class="header-anchor" href="#http-base" aria-hidden="true">#</a> HTTP Base</h2><p>Hypertext Transfer Protocol (HTTP)</p><ul><li>用于通过 Internet 传输超文本和其他文件格式的应用程序协议</li><li>当前广泛使用的版本：HTTP/1.1（1997年标准化）</li><li>HTTP/2 规范于 2015 年 5 月作为 RFC 7540 发布</li><li>客户端（例如 Web 浏览器）向 URL 发送 HTTP 请求</li><li>服务器准备并返回请求的资源</li></ul><p>An HTTP request has the following components</p><ul><li>URL – the unique identifier of the online resource</li><li>Method/Verb – the action of the request (e.g. GET something?)</li><li>HTTP Version – the version of the protocol you are using</li><li>Headers – the metadata of the reques</li><li>Body – Data to be sent to the server</li></ul><h3 id="uniform-resource-locator-url" tabindex="-1"><a class="header-anchor" href="#uniform-resource-locator-url" aria-hidden="true">#</a> Uniform Resource Locator (URL)</h3><ul><li>特定类型的URI（统一资源标识符）</li><li>它意味着访问资源的方式</li></ul><p>Syntax of a URL:</p><figure><img src="https://pic.hanjiaming.com.cn/2024/12/09/6c05a72b6be0e.png" alt="1733684960284.png" tabindex="0" loading="lazy"><figcaption>1733684960284.png</figcaption></figure><h3 id="http-request-methods" tabindex="-1"><a class="header-anchor" href="#http-request-methods" aria-hidden="true">#</a> HTTP Request Methods</h3><p>回想一下，HTTP 是一种文本协议（即使用 HTTP 发送的所有内容都假定为字符）</p><p>如果要发送文件（二进制数据），需要先对二进制数据进行编码后再发送</p><p>In an HTML form, set <code>enctype=&quot;multipart/form-data&quot;</code></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>multipart/form-data<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Send!<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设置 <code>enctype=&quot;multipart/form-data&quot;</code>告诉服务器，数据被分成多个部分，每个文件一个，再加上一个用于表单体中的文本数据。</p><h3 id="http-headers" tabindex="-1"><a class="header-anchor" href="#http-headers" aria-hidden="true">#</a> HTTP Headers</h3><p>标头包含有关请求/响应的元数据，例如：</p><ul><li>客户身份</li><li>内容类型（例如：纯文本、HTML、CSS、图片）</li><li>Encoding of the content (e.g. ASCII, utf-8)</li><li>Expiry date/time of the content</li><li>Cookies</li><li>安全策略 CSR</li><li>Some of the <strong>response header</strong> “keys” <ul><li>Content-Length: length of the content of the resource</li><li>Content-Type: format of the resource<br> (e.g. text/html)</li><li>Last - Modified：资源最后一次更改的时间</li><li>服务器：为资源提供服务的 Web 服务器的名称</li></ul></li></ul><h3 id="http-status-code" tabindex="-1"><a class="header-anchor" href="#http-status-code" aria-hidden="true">#</a> HTTP Status Code</h3><p>HTTP 状态代码包含在 HTTP 响应中以指示 HTTP 请求的结果</p><p>HTTP状态码的不同类别：</p><ul><li>1XX: Informational</li><li>2XX: Successful</li><li>3XX: Redirection</li><li>4XX: Client-side error</li><li>5XX: Server-side error</li></ul><h3 id="http-is-a-stateless-protocol" tabindex="-1"><a class="header-anchor" href="#http-is-a-stateless-protocol" aria-hidden="true">#</a> HTTP is a Stateless Protocol</h3><ul><li>服务器不会在请求之间保留有关客户端的信息</li><li>每个请求都被视为独立的</li><li>服务器端不存储会话信息</li></ul><h2 id="data-communication" tabindex="-1"><a class="header-anchor" href="#data-communication" aria-hidden="true">#</a> Data Communication</h2><p>如何在Android中对Web服务器执行HTTP请求？</p><ul><li>首先需要在AndroidManifest.xml文件中请求权限</li><li>使用 <code>HttpURLConnection</code> HTTP 客户端执行HTTP 请求</li><li>注意：HTTP 请求还有很多替代方案，例如默认 HTTP 客户端（已弃用）、Ok HTTP、Ktor、Retrofit、Multiplatform（均为第三方）。</li></ul><h3 id="httpurlconnection" tabindex="-1"><a class="header-anchor" href="#httpurlconnection" aria-hidden="true">#</a> HttpURLConnection</h3><ul><li><strong>HttpURLConnection</strong> can be used to perform both GET and POST actions</li><li>Data is returned in the form of <strong>InputStream</strong></li><li>根据数据的数据类型（例如图像、文本、文件等），需要将数据解码为适当的格式</li></ul><p>For HTTP server, you need to trust the site,</p><p>Add a network security configuration file for POST method on http:</p><ul><li>Create a network_security_config.xml under res\\xml</li><li>Add a path of the file to the AndroidManifest.xml</li></ul><h2 id="exchanging-data" tabindex="-1"><a class="header-anchor" href="#exchanging-data" aria-hidden="true">#</a> Exchanging Data</h2><p>在应用程序编程中，我们通常不会请求网页。相反，我们从服务器请求数据，例如：</p><ul><li>List of latest news (news app)</li><li>History of conversation (instant messaging app)</li></ul><p>为了交换结构化数据，我们需要有一个通用的数据格式，常见的数据交换格式包括：</p><ul><li>XML (Extensible Markup Language) <ul><li>Using different tags (e.g. <code>&lt;title&gt;&lt;/title&gt;</code>) to give meanings to the<br> data</li><li>可能导致数据长度显著增加</li></ul></li><li>JSON (JavaScript Object Notation) <ul><li>JavaScript对象以字符串编码，可以处理多种数据类型，如字符串、数字、布尔值和数组。</li><li>相比XML更紧凑，但仍易于人类阅读</li></ul></li></ul><h2 id="checking-availability-of-network" tabindex="-1"><a class="header-anchor" href="#checking-availability-of-network" aria-hidden="true">#</a> Checking Availability of Network</h2><ul><li>在使用网络进行数据通信之前，首先检查网络的可用性是一个好习惯。</li><li>在手机上，网络可能不稳定</li><li>用户可能已关闭数据传输，或切换到飞行模式</li><li>通过检查网络可用性，您可以在执行任何网络操作之前先提示用户</li></ul><p>为了能够检查网络状态，您需要在 <code>AndroidManifest.xml</code>文件中请求以下权限</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.permission.INTERNET<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>uses-permission</span> <span class="token attr-name"><span class="token namespace">android:</span>name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>android.permission.ACCESS_NETWORK_STATE<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-servers" tabindex="-1"><a class="header-anchor" href="#http-servers" aria-hidden="true">#</a> HTTP Servers</h2><h3 id="what-are-http-servers" tabindex="-1"><a class="header-anchor" href="#what-are-http-servers" aria-hidden="true">#</a> What are HTTP Servers?</h3><ul><li>它持续监听特定端口（默认=80）的传入连接。</li><li>它处理HTTP请求并以HTTP响应的形式发送回复。</li><li>它解析请求并在必要时将请求发送给其他处理。例如，当需要动态内容时。</li></ul><p>A simple HTTP Server’s Pseudo-code</p><figure><img src="https://pic.hanjiaming.com.cn/2024/12/09/7bb495e4b7405.png" alt="1733687113563.png" tabindex="0" loading="lazy"><figcaption>1733687113563.png</figcaption></figure><p>之前的简单服务器是一个单线程服务器的例子。</p><ul><li>对于 Web 应用程序/服务，它通常不仅仅是从磁盘提供静态文件。</li><li>执行业务逻辑、更新数据库、写入日志是常见的操作。</li><li>单线程的HTTP服务器无法同时处理许多客户端。</li></ul><p>Other approaches</p><ul><li>Create a new <strong>process</strong> to handle a new request</li><li>Create a new <strong>thread</strong> to handle a new request</li><li>预先创建一个工作者池（进程或线程），以处理新的请求</li><li><strong>Event-driven</strong></li></ul><h3 id="nginx-web-server" tabindex="-1"><a class="header-anchor" href="#nginx-web-server" aria-hidden="true">#</a> Nginx Web Server</h3><ul><li>Pronounced “engine X”</li><li>一个“强聚焦于高并发、性能和低内存使用”的Web服务器 <ul><li>使用事件驱动（异步）方法处理HTTP请求</li><li>避免等待阻塞的系统调用（例如，从套接字读取，从内存或磁盘中的文件读取）</li></ul></li><li>增加功能，如带缓存的反向代理、负载均衡，以及支持其他新协议，如SPDY或WebSockets</li></ul><h2 id="serving-dynamic-content" tabindex="-1"><a class="header-anchor" href="#serving-dynamic-content" aria-hidden="true">#</a> Serving Dynamic Content</h2><p>运行主要包含静态内容的网站，只需要一个Web服务器即可。然而，构建应用程序或服务需要更复杂的后端逻辑，并且通常需要动态生成内容。您还需要一个应用服务器。</p><p>HTTP服务器将向应用服务器发送请求，以执行计算或检索动态内容。</p><figure><img src="https://pic.hanjiaming.com.cn/2024/12/10/11fc84c10e924.png" alt="1733770747642.png" tabindex="0" loading="lazy"><figcaption>1733770747642.png</figcaption></figure><h3 id="common-gateway-interface-cgi" tabindex="-1"><a class="header-anchor" href="#common-gateway-interface-cgi" aria-hidden="true">#</a> Common Gateway Interface (CGI)</h3><ul><li>外部应用程序与Web服务器接口的标准协议</li><li>CGI程序是在Web服务器机器上运行的可执行程序</li><li>CGI程序通常返回动态构建的HTML页面</li></ul><p>典型例子：</p><ul><li>访客计数器（显示页面的访客总数）</li><li>博客（获取最新博客文章）</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/12/10/862ae9d05b9ac.png" alt="1733770917563.png" tabindex="0" loading="lazy"><figcaption>1733770917563.png</figcaption></figure><p>Limitations of CGI</p><ul><li>对于调用 CGI 程序的每个请求，都会创建一个新进程，该进程将在执行结束时终止。</li><li>因此，CGI易于实现，但效率不高且不可扩展。</li><li>启动和终止进程的开销可能很大（当工作负载高时，操作系统需要做很多工作）</li><li>例如，想象CGI程序需要从磁盘加载一个巨大的字典以执行单词翻译</li></ul><p>其他方法</p><ul><li>为了减少启动和终止程序的开销，程序应托管在服务器应用程序中，保持一个持久进程始终运行并准备好处理请求。</li><li>一些例子包括Apache的mod_php或mod_python，FastCGI，SCGI，Python的WSGI，Python的ASGI</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/12/10/b0bbb583ec4af.png" alt="1733771065579.png" tabindex="0" loading="lazy"><figcaption>1733771065579.png</figcaption></figure><h3 id="web-server-gateway-interface-wsgi" tabindex="-1"><a class="header-anchor" href="#web-server-gateway-interface-wsgi" aria-hidden="true">#</a> Web Server Gateway Interface (WSGI)</h3><ul><li>指定服务器和应用程序通信的接口</li><li>如果一个应用程序按照规范编写，它将能够在根据同一规范开发的任何服务器上运行。</li><li>使用WSGI接口的应用程序和服务器被称为“WSGI兼容”</li></ul><p>Why WSGI?</p><ul><li>Web服务器无法运行Python应用程序</li><li>对于Apache，有一个名为mod_python的模块，它使Apache能够执行Python代码, 但 不再积极开发</li><li>因此，Python 社区提出了 WSGI 作为 Python 网络应用的标准接口</li></ul><p>然而，WSGI存在一些问题...</p><ul><li>对异步WSGI服务器的尝试，但仍然坚持请求/响应方法，以及可能存在一些其他问题，例如HTTP服务器重新发明，边缘情况处理，安全问题等。</li><li>异步编程的复杂性和学习曲线引入了新的挑战和代码中的错误。</li></ul><h3 id="asynchronous-server-gateway-interface-asgi" tabindex="-1"><a class="header-anchor" href="#asynchronous-server-gateway-interface-asgi" aria-hidden="true">#</a> Asynchronous Server Gateway Interface (ASGI)</h3><ul><li>Uses the event messages approach, instead of the request/response approach</li><li>Intended to handle HTTP/2 and WebSockets</li><li>没有策略执行点（PEP），它是安全框架中强制执行访问控制策略的组件</li></ul><p>WSGI/ASGI</p><figure><img src="https://pic.hanjiaming.com.cn/2024/12/10/39241dd21b360.png" alt="预览 2024-12-10 03.13.19.png" tabindex="0" loading="lazy"><figcaption>预览 2024-12-10 03.13.19.png</figcaption></figure><h3 id="servers-vs-applications" tabindex="-1"><a class="header-anchor" href="#servers-vs-applications" aria-hidden="true">#</a> Servers vs Applications</h3><p>为什么我们有服务器和应用程序？</p><p>It is an example of decoupling:</p><ul><li>应用侧重于如何完成任务（例如，业务逻辑、更新数据库、提供动态内容等）。</li><li>服务器专注于如何路由请求、处理并发连接、优化计算资源等。</li><li>作为一名应用程序开发者，您可以专注于开发功能和特性，无需担心如何与Web服务器进行接口</li></ul><h3 id="communication-between-the-application-and-the-server" tabindex="-1"><a class="header-anchor" href="#communication-between-the-application-and-the-server" aria-hidden="true">#</a> Communication between the Application and the Server</h3><p>当一个新的请求到达WSGI服务器时：</p><ul><li>服务器调用应用程序中相应的函数</li><li>参数通过环境变量传递给应用程序</li><li>服务器还向应用程序提供了一个回调函数</li><li>应用程序处理请求</li><li>应用程序使用服务器提供的回调函数将响应返回给服务器</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2024/12/10/fd9bdfc3219c9.png" alt="1733773228134.png" tabindex="0" loading="lazy"><figcaption>1733773228134.png</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">Python Application Server</p><ul><li><strong>Nginx</strong> as the HTTP server</li><li><strong>Uvicorn</strong> as a ASGI server</li><li><strong>Python</strong> as the programming language</li><li><strong>FastAPI</strong> as the Web framework</li></ul></div><h2 id="rest-api" tabindex="-1"><a class="header-anchor" href="#rest-api" aria-hidden="true">#</a> REST API</h2><p>REST API 是一种应用程序编程接口 (API)。</p><ul><li>API是一组用于构建和集成应用程序软件的定义和协议集合。</li><li>REST API遵循REST架构风格的设计原则。</li><li>REST是表示状态转移的缩写，是一组关于您应该如何构建Web API的规则和指南。</li></ul><p>REST Architectural Style</p><ol><li>由客户端、服务器和资源组成的客户端-服务器架构，通过HTTP管理请求。</li><li>无状态客户端-服务器通信，意味着在获取请求之间不存储客户端信息，每个请求都是独立且不相连的。</li><li>可缓存的简化客户端-服务器交互的数据。</li><li>一个分层系统，组织每种类型的服务器（负责安全、负载均衡等），涉及将请求的信息检索到对客户端不可见的层级中。</li><li>按需代码（可选）：在请求时从服务器发送可执行代码到客户端的能力，扩展客户端功能。</li><li>组件之间有一个统一的接口，以便信息以标准形式传输。这需要： <ol><li>请求的资源是可识别的，并且与发送给客户端的表示是分开的。</li><li>资源可以通过客户端通过他们接收到的表示进行操作，因为表示中包含足够的信息来这样做。</li><li>客户端返回的自我描述消息包含足够的信息来描述客户端应该如何处理它。</li><li>超文本/超媒体可用，意味着在访问一个资源后，客户端应该能够使用超链接找到他们可以采取的所有其他当前可用操作。</li></ol></li></ol><h2 id="uvicorn" tabindex="-1"><a class="header-anchor" href="#uvicorn" aria-hidden="true">#</a> Uvicorn</h2><figure><img src="https://pic.hanjiaming.com.cn/2024/12/10/26f85f3bea1ad.png" alt="1733774195605.png" tabindex="0" loading="lazy"><figcaption>1733774195605.png</figcaption></figure><ul><li>Uvicorn 是一个适用于 Unix/Linux、Mac 和 Windows 系统的 Python ASGI HTTP 服务器。</li><li>它充当 ASGI 应用程序的容器。</li><li>它管理一个或多个应用程序实例（多个工作人员）。</li></ul><h3 id="architecture-of-uvicorn" tabindex="-1"><a class="header-anchor" href="#architecture-of-uvicorn" aria-hidden="true">#</a> Architecture of Uvicorn</h3><ul><li>由于是 Spawn Worker 模型，因此 Uvicorn 在大多数操作系统中都能正常运行。</li><li>默认进程管理器监控子进程的状态，并自动重启意外死亡的子进程。不仅如此，它还会通过管道监控子进程的状态。当子进程意外卡住时，相应的子进程将通过不可阻止的系统信号或接口被终止。</li><li>每个服务器工作进程运行一个您的应用程序的副本。</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>fastapi run <span class="token parameter variable">--workers</span> <span class="token number">4</span> main.py
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="https://pic.hanjiaming.com.cn/2024/12/10/39c9b731939ae.png" alt="1733774322007.png" style="zoom:50%;"><h3 id="uvicorn-workers" tabindex="-1"><a class="header-anchor" href="#uvicorn-workers" aria-hidden="true">#</a> Uvicorn Workers</h3><ul><li>由于Uvicorn工人使用的是spawn，所以它是多线程的。</li><li>启动申请至少需要 2 名工作人员。</li><li>如果您想充分利用计算机的核心数量，您可能需要同时使用 Gunicorn + Uvicorn。 <ul><li>In this case, <strong>2n + 1</strong> (n = number of cores) workers</li><li>基于假设一半的工人正在执行I/O操作，而另一半的工人正在执行计算</li></ul></li></ul><h2 id="nginx" tabindex="-1"><a class="header-anchor" href="#nginx" aria-hidden="true">#</a> Nginx</h2><p>Using Nginx as a Reverse Proxy and Load Balancer</p><h3 id="nginx-as-a-reverse-proxy" tabindex="-1"><a class="header-anchor" href="#nginx-as-a-reverse-proxy" aria-hidden="true">#</a> Nginx as a Reverse Proxy</h3><ul><li>Nginx 是一个 Web 服务器，但也可以配置为反向代理服务器</li><li>它可以代理请求到另一个HTTP服务器或非HTTP服务器</li><li>It supports the following non-HTTP protocol: FastCGI, uwsgi, SCGI, memcached</li><li>它可以缓冲来自服务器的响应以提升性能（当客户端较慢时）</li></ul><h3 id="configuring-nginx" tabindex="-1"><a class="header-anchor" href="#configuring-nginx" aria-hidden="true">#</a> Configuring Nginx</h3><ul><li>Nginx可以通过编辑配置文件来配置</li><li>In Ubuntu, configuration files are usually stored under <code>/etc/nginx/</code></li><li>A main configuration file named <code>nginx.conf</code></li><li>One or more configuration files for each of the sites hosted by the server<br> (see <code>/etc/nginx/site-available</code> and <code>/etc/nginx/site-enabled</code>)</li></ul><p>将 Nginx 配置为反向代理负载均衡器很简单。不过，在此之前我们先介绍一下“上游”「<strong>upstream</strong>」这个词。</p><figure><img src="https://pic.hanjiaming.com.cn/2024/12/10/92b70f09abc5b.png" alt="1733774749530.png" tabindex="0" loading="lazy"><figcaption>1733774749530.png</figcaption></figure><p>注意：当没有指定负载均衡方法时，将使用round-robin方法</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http {
    upstream myservers {
        server s1.myserver.com;
        server s2.myserver.com;
        server s3.myserver.com;
}
    server {
        listen 80;
        location / {
            proxy_pass http://myservers;
				} 
		}
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://pic.hanjiaming.com.cn/2024/12/10/2ddfa3299e99e.png" alt="1733774840593.png" tabindex="0" loading="lazy"><figcaption>1733774840593.png</figcaption></figure><h3 id="persistence-stickiness" tabindex="-1"><a class="header-anchor" href="#persistence-stickiness" aria-hidden="true">#</a> Persistence (Stickiness)</h3><ul><li>有时我们需要同一个服务器为同一系列请求服务同一个客户端（为什么？）</li><li>轮询法和最少连接法不能保证同一客户端由同一服务器服务</li><li>持久性（或粘性）指的是负载均衡将请求转发到同一服务器的能力</li></ul><p>Nginx中使用IP哈希作为负载均衡方法实现持久化</p><h3 id="other-functions" tabindex="-1"><a class="header-anchor" href="#other-functions" aria-hidden="true">#</a> Other functions</h3><ul><li>Health checks of servers</li><li>Buffering server response</li><li>Routing requests to applications (e.g. to a Python Web app)</li></ul>`,116),l=[s];function r(o,c){return n(),e("div",null,l)}const d=a(t,[["render",r],["__file","http.html.vue"]]);export{d as default};
