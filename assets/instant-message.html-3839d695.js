import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as l,e as a}from"./app-98a85e4d.js";const t={},n=a('<h1 id="instant-messaging" tabindex="-1"><a class="header-anchor" href="#instant-messaging" aria-hidden="true">#</a> Instant Messaging</h1><h2 id="pull-and-push" tabindex="-1"><a class="header-anchor" href="#pull-and-push" aria-hidden="true">#</a> Pull and Push</h2><p>到目前为止，我们在网络编程中遇到的全部示例都可以被视为使用“拉取”方法。</p><ul><li>Communication is always initiated by the client</li><li>客户端在需要时从服务器“拉取”数据或服务（例如，当用户启动应用程序或按下按钮时）。</li></ul><p><strong>HTTP</strong> is a <strong>pull-based</strong> protocol</p><ul><li>用户浏览网络并积极决定浏览哪个网站，跟随哪个链接等。</li><li>一种有效且经济的方式（每个用户选择他们需要的）</li><li>然而，如果某些资源被定期请求， pull mode 模型可能会给服务器带来沉重的负载</li></ul><p>有些情况下，服务器希望与客户端（们）建立通信：</p><ul><li>当新电子邮件到达时</li><li>当一个节点通过服务器向用户发送消息时</li><li>当应用程序/数据需要更新时</li></ul><p>在这些情况下，服务器需要将数据或服务“推送”到客户端。这种情况下越来越常见，因为智能手机越来越受欢迎。</p><h2 id="implementing-push" tabindex="-1"><a class="header-anchor" href="#implementing-push" aria-hidden="true">#</a> Implementing Push</h2><p>万维网，特别是HTTP协议，是为“拉”而设计的，要在网上实现“推”需要额外的工程实现。一些在网络上“模拟”推送的方法有</p><ul><li>Polling「轮询」 (periodic pull)</li><li>Comet Model 「彗星模型」</li><li>BOSH</li><li>WebSockets</li></ul><h3 id="polling" tabindex="-1"><a class="header-anchor" href="#polling" aria-hidden="true">#</a> Polling</h3><p>客户端定期轮询服务器以检查是否有新消息或更新可用</p><p><strong>Advantages</strong></p><ul><li>Easy to implement</li><li>No extra development on the server-side</li></ul><p><strong>Disadvantages</strong></p><ul><li>Unnecessary network traffic generated</li><li>Extra workload on the server</li></ul><img src="https://pic.hanjiaming.com.cn/2024/11/09/29adb2c711866.png" alt="1731146674274.png" style="zoom:33%;"><div class="hint-container info"><p class="hint-container-title">Examples</p><ul><li>Post-Office Protocol (POP) for email: 使用POP3协议的电子邮件客户端会定期向邮件服务器发送请求以检查新邮件</li><li>RSS Feed Readers <ul><li>RSS资源由HTTP提供服务，因此都是基于拉取的</li><li>RSS 提要阅读器定期轮询 RSS 服务器并检查提要的新更新</li></ul></li></ul><p>轮询可能会给服务器、客户端和网络带来沉重的负载。</p></div><h3 id="comet-model" tabindex="-1"><a class="header-anchor" href="#comet-model" aria-hidden="true">#</a> Comet Model</h3><p>Comet 模型（也称为反向 Ajax 或长轮询）是一种用于实现服务器到客户端的实时通信的技术。</p><ul><li>“Comet”是一个Web应用程序模型，用于实现允许服务器将数据推送到客户端（浏览器）的Web应用程序。</li><li>它允许服务器在数据可用时主动向客户端发送数据，而不是客户端定期轮询服务器。</li></ul><p>Comet 应用程序的实现分为两大类</p><ul><li>Streaming</li><li>Long-polling</li></ul><h4 id="streaming" tabindex="-1"><a class="header-anchor" href="#streaming" aria-hidden="true">#</a> Streaming</h4><p>HTTP 流（HTTP Streaming）支持客户端发送一个请求，然后服务器通过该连接持续发送多个响应 （一次请求，多次响应）。</p><p>这种技术允许服务器在同一连接上连续地发送数据更新，而无需客户端反复发送新的请求。这种机制在需要实时数据推送的应用中非常有用。</p><ul><li>A persistent connection is established between the browser and the server</li><li>Data is sent from the server a <strong>chunked block</strong></li><li>事件会逐步发送到浏览器（例如，使用 <code>&lt;script&gt;</code> 标签执行JavaScript命令）</li></ul><img src="https://pic.hanjiaming.com.cn/2024/11/09/147408e758f9a.png" alt="1731158919823.png" style="zoom:33%;"><h4 id="long-polling" tabindex="-1"><a class="header-anchor" href="#long-polling" aria-hidden="true">#</a> Long-polling</h4><ul><li>请求从客户端发送到服务器</li><li>服务器保持连接，直到某些事件发生，然后响应发送回客户端</li><li>客户端在收到响应后，立即向服务器发出另一个请求</li><li>（通常使用Ajax实现）</li></ul><img src="https://pic.hanjiaming.com.cn/2024/11/10/0d2aec06f6c29.png" alt="1731172410517.png" style="zoom:50%;"><p>这相当于服务器与每个客户终端打开至少一个 TCP 连接。</p><h3 id="bosh" tabindex="-1"><a class="header-anchor" href="#bosh" aria-hidden="true">#</a> BOSH</h3><p>BOSH 代表双向「Bidirectional」 - 通过同步「Synchronous」 HTTP 传输</p><ul><li>它利用 HTTP 长轮询</li><li>建立单个TCP 连接，接收服务器推送的数据</li><li>如果不需要推送数据，服务器发送一个空的 <code>&lt;body/&gt;</code>消息</li><li>如果客户端需要向服务器发送数据，将使用第二个套接字来发送HTTP POST请求</li><li>然后，新旧连接将交换角色（此后新连接将用于长轮询）</li></ul><h2 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket" aria-hidden="true">#</a> WebSocket</h2><div class="hint-container tip"><p class="hint-container-title">WebSocket vs HTTP</p><p>着在一个 WebSocket 连接中，客户端和服务器都可以在任何时间点向对方发送数据，而不需要等待对方的请求或响应。这是 WebSocket 与 HTTP 的一个主要区别。</p><p>在 HTTP 协议中，</p><ul><li>通信是由客户端发起的，客户端发送一个请求到服务器，然后等待服务器的响应。</li><li>这种通信模式被称为半双工通信，因为在任何给定的时间点，数据只能在一个方向上流动（从客户端到服务器或从服务器到客户端）。</li></ul><p>但在 WebSocket 协议中，</p><ul><li>一旦连接被建立，客户端和服务器都可以主动发送数据。</li><li>这种通信模式被称为全双工通信，因为数据可以同时在两个方向上流动（从客户端到服务器和从服务器到客户端）。</li></ul></div>',39),o=[n];function s(r,c){return e(),l("div",null,o)}const p=i(t,[["render",s],["__file","instant-message.html.vue"]]);export{p as default};
