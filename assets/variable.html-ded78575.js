import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as p,c as l,a as s,b as a,d as e,e as o}from"./app-47a9f5de.js";const i={},r=s("h1",{id:"变量",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#变量","aria-hidden":"true"},"#"),a(" 变量")],-1),d=s("p",null,"现在，我们需要知道变量的基础操作有声明，定义和赋值。",-1),u=s("p",null,"js也是分局部不良和全局变量。局部变量无法访问代码块之外的变量。",-1),v=s("h2",{id:"变量-1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#变量-1","aria-hidden":"true"},"#"),a(" 变量")],-1),k={href:"https://en.wikipedia.org/wiki/Variable_(computer_science)",target:"_blank",rel:"noopener noreferrer"},m=o(`<p>在js中，变量的声明和定义是在一起的，只能进行一次。赋值可以进行多次。声明和赋值可以分开，也可以在一起。我们不妨不变量当做记录<strong>类型</strong>和<strong>值</strong>的一个东西</p><p>在 javascript 中创建一个变量，我们需要用到 <code>let</code> 或者 <code>var</code>(旧式) 关键字。</p><p>下面的语句创建（也可以称为 <strong>声明</strong> 或者 <strong>定义</strong>）了一个名称为 “message” 的变量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在，我们可以通过赋值运算符 <code>=</code> 为变量添加一些数据：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>message <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 将字符串 &#39;Hello&#39; 保存在名为 message 的变量中</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>现在这个字符串已经保存到与该变量相关联的内存区域了，我们可以通过使用该变量名称访问它：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello!&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 定义变量，并且赋值</span>
<span class="token function">alert</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Hello!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以在一行中声明多个变量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>看上去代码长度更短，但并不推荐这样。为了更好的可读性，请一行只声明一个变量。</p><p>一些程序员采用下面的形式书写多个变量：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token string">&#39;John&#39;</span><span class="token punctuation">,</span>
  age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">,</span>
  message <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你也可能发现另一个关键字 <code>var</code>，而不是 <code>let</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>var</code> 关键字与 <code>let</code> <strong>大体</strong> 相同，也用来声明变量，但稍微有些不同，也有点“老派”。</p><p><code>let</code> 和 <code>var</code> 之间有些微妙的差别，但目前对于我们来说并不重要。我们将会在 info:var 章节中介绍它们。</p><h2 id="变量命名" tabindex="-1"><a class="header-anchor" href="#变量命名" aria-hidden="true">#</a> 变量命名</h2><p>javascript 的变量命名有两个限制：</p><ol><li>变量名称必须仅包含字母、数字、符号 <code>$</code> 和 <code>_</code>。</li><li>首字符必须非数字。</li></ol>`,20),g={href:"https://en.wikipedia.org/wiki/CamelCase",target:"_blank",rel:"noopener noreferrer"},h=s("code",null,"myVeryLongName",-1),b=o(`<p>有趣的是，美元符号 <code>&#39;$&#39;</code> 和下划线 <code>&#39;_&#39;</code> 也可以用于变量命名。它们是正常的符号，就跟字母一样，没有任何特殊的含义。</p><p>下面的命名是有效的：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> $ <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 使用 &quot;$&quot; 声明一个变量</span>
<span class="token keyword">let</span> _ <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 现在用 &quot;_&quot; 声明一个变量</span>

<span class="token function">alert</span><span class="token punctuation">(</span>$ <span class="token operator">+</span> _<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="未采用-use-strict-下的赋值" tabindex="-1"><a class="header-anchor" href="#未采用-use-strict-下的赋值" aria-hidden="true">#</a> 未采用 <code>use strict</code> 下的赋值</h2><p>一般，我们需要在使用一个变量前定义它。但是在早期，我们可以不使用 <code>let</code> 进行变量声明，而可以简单地通过赋值来创建一个变量。现在如果我们不在脚本中使用 <code>use strict</code> 声明启用严格模式，这仍然可以正常工作，这是为了保持对旧脚本的兼容。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 注意：这个例子中没有 &quot;use strict&quot;</span>
num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 如果变量 &quot;num&quot; 不存在，就会被创建</span>
<span class="token function">alert</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这是个糟糕的做法，严格模式下会报错。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span>
num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 错误：num 未定义</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="常量" tabindex="-1"><a class="header-anchor" href="#常量" aria-hidden="true">#</a> 常量</h2><p>声明一个常数（不变）变量，可以使用 <code>const</code> 而非 <code>let</code>：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> myBirthday <span class="token operator">=</span> <span class="token string">&#39;18.04.1982&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>使用 <code>const</code> 声明的变量称为“常量”。它们不能被修改，如果你尝试修改就会发现报错。初始赋值之后就不会改变。</p><h3 id="大写形式的常数" tabindex="-1"><a class="header-anchor" href="#大写形式的常数" aria-hidden="true">#</a> 大写形式的常数</h3><p>一个普遍的做法是将常量用作别名，以便记住那些在执行之前就已知的难以记住的值。</p><p>使用大写字母和下划线来命名这些常量。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">COLOR_RED</span> <span class="token operator">=</span> <span class="token string">&quot;#F00&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">COLOR_GREEN</span> <span class="token operator">=</span> <span class="token string">&quot;#0F0&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">COLOR_BLUE</span> <span class="token operator">=</span> <span class="token string">&quot;#00F&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">COLOR_ORANGE</span> <span class="token operator">=</span> <span class="token string">&quot;#FF7F00&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// ……当我们需要选择一个颜色</span>
<span class="token keyword">let</span> color <span class="token operator">=</span> <span class="token constant">COLOR_ORANGE</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// #FF7F00</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>好处：</p><ul><li><code>COLOR_ORANGE</code> 比 <code>&quot;#FF7F00&quot;</code> 更容易记忆。</li><li>比起 <code>COLOR_ORANGE</code> 而言，<code>&quot;#FF7F00&quot;</code> 更容易输错。</li><li>阅读代码时，<code>COLOR_ORANGE</code> 比 <code>#FF7F00</code> 更易懂。</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>我们可以使用 <code>var</code>、<code>let</code> 或 <code>const</code> 声明变量来存储数据。</p><ul><li><code>let</code> — 现代的变量声明方式。</li><li><code>var</code> — 老旧的变量声明方式。一般情况下，我们不会再使用它。但是，我们会在 <a href="info:var">info:var</a> 章节介绍 <code>var</code> 和 <code>let</code> 的微妙差别，以防你需要它们。</li><li><code>const</code> — 类似于 <code>let</code>，但是变量的值无法被修改。</li></ul><p>变量应当以一种容易理解变量内部是什么的方式进行命名。</p>`,22);function _(j,f){const n=c("ExternalLinkIcon");return p(),l("div",null,[r,d,u,v,s("p",null,[s("a",k,[a("变量"),e(n)]),a(" 是数据的“命名存储”。我们可以使用变量来保存商品、访客和其他信息。")]),m,s("p",null,[a("如果命名包括多个单词，通常采用驼峰式命名法（"),s("a",g,[a("camelCase"),e(n)]),a("）。也就是，单词一个接一个，除了第一个单词，其他的每个单词都以大写字母开头："),h,a("。")]),b])}const O=t(i,[["render",_],["__file","variable.html.vue"]]);export{O as default};
