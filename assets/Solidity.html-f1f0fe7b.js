import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-d1f912a5.js";const t={},i=e(`<h1 id="solidity" tabindex="-1"><a class="header-anchor" href="#solidity" aria-hidden="true">#</a> Solidity</h1><h2 id="evm" tabindex="-1"><a class="header-anchor" href="#evm" aria-hidden="true">#</a> EVM</h2><p>「Ethereum Virtual Machine」</p><h3 id="runtime-environment" tabindex="-1"><a class="header-anchor" href="#runtime-environment" aria-hidden="true">#</a> Runtime environment</h3><p>以太坊智能合约的运行时环境：EVM是以太坊智能合约的运行时环境，负责执行和管理智能合约。</p><ul><li>Stack-based (1024 depth, 256-bit word), &quot;gas&quot; for operations <ul><li>EVM使用一个深度为1024的堆栈，每个堆栈单元为256位来执行操作。</li><li>操作的&quot;燃料&quot;：每个操作都需要消耗一定量的Gas，以防止资源滥用。</li></ul></li><li>Consistently execute「持续执行」 across the Ethereum nodes<br> EVM确保智能合约在所有以太坊节点上以一致的方式执行，保持网络一致性。</li><li>Updates old state with new transactions「用新交易更新旧状态」<br> 每次交易都会引起状态的更新，EVM负责执行交易并更新全网的状态。</li><li>EVM有多种实现方式，如 geth（Go语言）、Py-EVM（Python）、evmone（C++）和 ethereumjs-vm（JavaScript）。</li></ul><h3 id="life-cycle" tabindex="-1"><a class="header-anchor" href="#life-cycle" aria-hidden="true">#</a> Life Cycle</h3><p>智能合约生命周期（与比特币中的 UTXO 相比）: 智能合约有其生命周期，包括创建、执行和完成。</p><ul><li>Creation: deploy the contract (e.g., coinbase -&gt; some address)<br> 「部署合约（例如，从coinbase地址到某个地址）」</li><li>Execute: Evaluates the calls to the contract (e.g., witness to spend a UTXO)<br> 「评估对合约的调用（例如，见证花费一个UTXO）」</li><li>Confirm a change has made<br> 「确认已进行的更改」</li><li>A contract can &quot;SELFDESTRUCT&quot; if set (cannot be called, but past data remain)<br> 「如果设置，合约可以&quot;自毁&quot;（不能被调用，但过去的数据仍然保留）」</li></ul><h3 id="evm-structure" tabindex="-1"><a class="header-anchor" href="#evm-structure" aria-hidden="true">#</a> EVM Structure</h3><figure><img src="https://pic.hanjiaming.com.cn/2024/10/11/a5227d9a9f815.png" alt="1728612780496.png" tabindex="0" loading="lazy"><figcaption>1728612780496.png</figcaption></figure><h4 id="世界状态-world-state" tabindex="-1"><a class="header-anchor" href="#世界状态-world-state" aria-hidden="true">#</a> 世界状态（World State）</h4><ul><li><strong>World state σt 和 σt+1</strong>: 这是以太坊区块链在不同时间点的状态。每个状态包含多个账户，每个账户有自己的状态信息。</li><li><strong>Address N</strong>: 这是账户的地址。</li><li><strong>Account state N</strong>: 这是账户的状态，包括账户的代码和存储。</li><li><strong>Code</strong>: 账户的代码，通常是智能合约代码。</li><li><strong>Storage</strong>: 账户的存储，是一个持久化的键值存储。</li></ul><h4 id="交易和消息调用" tabindex="-1"><a class="header-anchor" href="#交易和消息调用" aria-hidden="true">#</a> 交易和消息调用</h4><ul><li>Input data: 这是交易或消息调用的输入数据，它会影响到EVM的执行。</li><li>**从 σt 到 σt+1 **: 交易或消息调用会导致世界状态从 σt 变化到 σt+1。</li></ul><h4 id="以太坊虚拟机" tabindex="-1"><a class="header-anchor" href="#以太坊虚拟机" aria-hidden="true">#</a> 以太坊虚拟机</h4><ul><li><strong>EVM</strong>: 以太坊虚拟机负责执行智能合约代码。EVM接收输入数据和当前的世界状态，并执行代码，最终更新世界状态。</li><li><strong>Virtual ROM</strong>: 虚拟只读存储器，包含不可变的EVM代码。</li><li><strong>Program counter (PC)</strong>: 程序计数器，指示当前执行到哪一行代码。</li><li><strong>Gas available (Gas)</strong>: 执行代码时消耗的Gas，用于防止无限循环和滥用资源。</li><li><strong>Stack</strong>: 堆栈内存，用于临时存储数据。每个堆栈元素是256位，堆栈深度为1024。</li><li><strong>Memory</strong>: 易失性内存，按字节寻址的线性内存。</li><li><strong>(Account) storage</strong>: 持久化存储，是256位到256位的键值存储。</li></ul><h4 id="状态和存储" tabindex="-1"><a class="header-anchor" href="#状态和存储" aria-hidden="true">#</a> 状态和存储</h4><ul><li><strong>Machine state μ</strong>: 机器状态，包括程序计数器、Gas、堆栈和内存，这些都是易失性的。</li><li><strong>World state σ</strong>: 世界状态，是持久化的，包括账户的存储。</li></ul><h4 id="数据流和状态更新" tabindex="-1"><a class="header-anchor" href="#数据流和状态更新" aria-hidden="true">#</a> 数据流和状态更新</h4><ul><li><strong>红色箭头</strong>: 表示数据和状态从世界状态流向EVM，然后EVM执行并更新世界状态。</li><li><strong>蓝色箭头</strong>: 表示输入数据流向EVM，并参与执行过程。</li></ul><h2 id="solidity-language" tabindex="-1"><a class="header-anchor" href="#solidity-language" aria-hidden="true">#</a> Solidity Language</h2><p>Solidity是一种面向合约的高级编程语言「A contract-oriented, high-level language」。</p><ul><li>面向合约意味着它专门用于编写和部署智能合约。</li><li>高级编程语言意味着它提供了抽象和高级功能，使得编程更加简洁和易于理解。</li></ul><p>Solidity代码被编译成以太坊虚拟机（EVM）可以理解的字节码，然后在EVM上运行。EVM是一个图灵完备的虚拟机，负责执行以太坊网络上的智能合约。</p><ul><li>Solidity是一种静态类型语言，这意味着在编译时就需要确定所有变量的类型。</li><li>Yul: language that can be compiled to bytecode for different backends (&quot;Assembly&quot;)<br> 「Yul：可编译成字节码用于不同后端（&quot;汇编&quot;）的语言」<br> Yul是一种中间语言，可以编译成不同后端的字节码，包括EVM的汇编代码。它为优化和跨平台兼容提供了灵活性。</li><li>Solidity的语法和特性受到了C++、Python和JavaScript的影响。例如，它借鉴了C++的静态类型系统、Python的简洁语法和JavaScript的控制结构。</li><li>Solidity专门设计用于以太坊虚拟机（EVM），确保编写的智能合约能够在EVM上高效运行。</li><li>Solidity是一种面向对象的编程语言，支持类和对象的概念。它支持多重继承、库和复杂的用户定义类型等特性</li><li>Solidity支持多重继承和多态性，允许一个合约继承多个其他合约的特性。它还支持库和复杂的用户定义类型，使得代码复用和模块化更加方便。</li><li>Solidity的控制结构与JavaScript非常相似，包括if、else、while、do、for、break、continue、return、三元运算符（? :）等，但不支持switch和goto语句。</li></ul><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.26</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>
		<span class="token builtin">string</span> <span class="token keyword">public</span> greet <span class="token operator">=</span> <span class="token string">&quot;Hello World!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="hint-container details"><summary>Example</summary><p>Example 1</p><p>我们需要创建一个智能合约，允许用户投票给多个候选人，并且在投票结束后能够统计每个候选人的票数。</p><ul><li>我们需要一个数据结构来存储候选人和他们的票数。</li><li>需要一个函数来投票，并确保每个用户只能投票一次。</li><li>需要一个函数来统计每个候选人的票数。</li></ul><p>Solidity作为一种面向合约的语言，非常适合编写这种需要自动执行和不可篡改的投票系统。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Voting</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">Candidate</span> <span class="token punctuation">{</span>
        <span class="token builtin">string</span> name<span class="token punctuation">;</span>
        <span class="token builtin">uint</span> voteCount<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token keyword">public</span> hasVoted<span class="token punctuation">;</span>
    Candidate<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> candidates<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> candidateNames<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> candidateNames<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            candidates<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">Candidate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
                name<span class="token punctuation">:</span> candidateNames<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>
                voteCount<span class="token punctuation">:</span> <span class="token number">0</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">vote</span><span class="token punctuation">(</span><span class="token builtin">uint</span> candidateIndex<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">!</span>hasVoted<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;You have already voted.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>candidateIndex <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">&quot;Invalid candidate index.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        hasVoted<span class="token punctuation">[</span>msg<span class="token punctuation">.</span>sender<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        candidates<span class="token punctuation">[</span>candidateIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>voteCount <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">getCandidate</span><span class="token punctuation">(</span><span class="token builtin">uint</span> index<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> name<span class="token punctuation">,</span> <span class="token builtin">uint</span> voteCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> candidates<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token string">&quot;Invalid candidate index.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        Candidate <span class="token keyword">storage</span> candidate <span class="token operator">=</span> candidates<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>candidate<span class="token punctuation">.</span>name<span class="token punctuation">,</span> candidate<span class="token punctuation">.</span>voteCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Example 2</p><p>假设我们要创建一个简单的智能合约，用于记录和修改一个人的姓名和年龄。</p><ul><li>我们需要一个合约来存储姓名和年龄，这些信息将作为状态变量。</li><li>我们还需要两个函数：一个用于设置姓名和年龄，另一个用于获取这些信息。</li></ul><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token comment">// 状态变量</span>
    <span class="token comment">// private 关键字表示这些变量只能在合约的内部访问，外部无法直接访问这些变量。</span>
    <span class="token builtin">string</span> <span class="token keyword">private</span> name<span class="token punctuation">;</span>
    <span class="token builtin">uint</span> <span class="token keyword">private</span> age<span class="token punctuation">;</span>

    <span class="token comment">// 事件</span>
    <span class="token comment">// 事件是 Solidity 中的一种机制，用于记录日志信息，外部应用程序可以监听这些事件。</span>
    <span class="token keyword">event</span> <span class="token function">NameChanged</span><span class="token punctuation">(</span><span class="token builtin">string</span> newName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">event</span> <span class="token function">AgeChanged</span><span class="token punctuation">(</span><span class="token builtin">uint</span> newAge<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 设置姓名和年龄的函数</span>
    <span class="token comment">// public 关键字表示这个函数可以被外部调用。</span>
    <span class="token comment">// 在 Solidity 中，memory 关键字用于指定变量的存储位置。</span>
    <span class="token comment">// string memory _name 表示该函数接受一个字符串类型的参数 _name，并且该字符串被存储在内存（memory）中。</span>
    <span class="token comment">// 这是与 storage 相对的，storage 变量是永久存储在区块链上的状态变量。</span>
    <span class="token keyword">function</span> <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _name<span class="token punctuation">,</span> <span class="token builtin">uint</span> _age<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>
        age <span class="token operator">=</span> _age<span class="token punctuation">;</span>
        <span class="token comment">// 使用 emit 关键字触发 NameChanged 和 AgeChanged 事件，记录姓名和年龄的变化。</span>
        <span class="token keyword">emit</span> <span class="token function">NameChanged</span><span class="token punctuation">(</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">emit</span> <span class="token function">AgeChanged</span><span class="token punctuation">(</span>_age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取姓名和年龄的函数</span>
    <span class="token comment">// view 关键字表示这个函数不会修改合约的状态，只是读取状态变量。</span>
    <span class="token keyword">function</span> <span class="token function">getPerson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">,</span> <span class="token builtin">uint</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个合约可以用来存储和更新一个人的姓名和年龄，并在每次更新时记录相应的日志信息。</p></details><h2 id="structure" tabindex="-1"><a class="header-anchor" href="#structure" aria-hidden="true">#</a> Structure</h2><p>Solidity中的合约类似于面向对象编程（OOP）中的类。</p><ul><li>类是OOP中的一个核心概念，它是对象的蓝图或模板，定义了对象的属性和行为</li><li>同样，Solidity中的合约定义了合约的状态变量、函数和其他组件。</li></ul><p>每个Solidity合约可以包含以下声明：</p><ul><li><strong>State Variables（状态变量）</strong>：存储在区块链上的数据。 <ul><li>在 Solidity 中，全局变量也称为状态变量（state variables），它们存储在区块链的状态中。</li><li>状态变量在合约的所有函数中都是可见的，并且它们的值会永久存储在区块链上，直到被显式修改。</li><li>合约之间的交易导致状态改变</li><li>区块链存储每个合约的最新状态</li></ul></li><li><strong>Functions（函数）</strong>：执行特定任务的代码块。</li><li><strong>Function Modifiers（函数修饰符）</strong>：用于修改函数的行为。</li><li><strong>Events（事件）</strong>：用于在区块链上记录活动。</li><li><strong>Struct Types（结构体类型）</strong>：自定义数据类型，可以包含多个不同类型的变量。</li><li><strong>Enum Types（枚举类型）</strong>：定义一组命名常量。</li></ul><p>Solidity支持继承，这意味着一个合约可以从另一个合约继承属性和行为。通过继承，可以重用代码并创建更复杂的合约结构。</p><h2 id="basics" tabindex="-1"><a class="header-anchor" href="#basics" aria-hidden="true">#</a> Basics</h2><h3 id="constructor-and-state-variable" tabindex="-1"><a class="header-anchor" href="#constructor-and-state-variable" aria-hidden="true">#</a> Constructor and State Variable</h3><p>构造函数是在合约创建时执行的函数，您可以在其中运行合约的初始化代码。Solidity支持多重继承，因此一个合约可以从多个父合约继承。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// 这个合约定义了一个简单的存储结构，使用枚举类型 State 来表示状态，并在合约部署时将状态初始化为 On。</span>
<span class="token keyword">contract</span> <span class="token class-name">SimpleStorage</span> <span class="token punctuation">{</span>

    <span class="token comment">// 这行定义了一个枚举 State，它有两个可能的值：On 和 Off。</span>
    <span class="token comment">// 枚举是一种数据类型，允许变量有一组预定义的常量值。</span>
		<span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>On<span class="token punctuation">,</span> Off<span class="token punctuation">}</span>
		
		State <span class="token keyword">public</span> storedData<span class="token punctuation">;</span>
		
<span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    storedData <span class="token operator">=</span> State<span class="token punctuation">.</span>On<span class="token punctuation">;</span> <span class="token comment">// default</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="data-location" tabindex="-1"><a class="header-anchor" href="#data-location" aria-hidden="true">#</a> Data Location</h3><p>数据位置是指在智能合约中数据的存储位置，主要包括 storage、memory和calldata 三种。了解区别有助于优化智能合约的性能和成本。</p><ul><li>存储（storage）是默认的数据位置，用于存储状态变量，这些变量在合约的整个生命周期内存在，并且数据存储在链上。</li><li>内存（memory）是临时的数据存储位置，其生命周期仅限于外部函数调用期间，数据不会存储在链上。</li><li>调用数据（calldata）与内存相似，但不可修改，存储在“特殊位置”，主要用于存储函数参数（例如，外部调用时），数据不会存储在链上。</li></ul><p>Assignment behavior</p><p>赋值行为是指在不同数据位置之间进行数据赋值时的具体操作方式。</p><p><strong>Storage &lt;&gt; memory (or calldata -&gt; memory): 会创建数据的副本，而不是引用</strong></p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> storageArray<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">storageToMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从存储到内存，创建副本</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> memoryArray <span class="token operator">=</span> storageArray<span class="token punctuation">;</span> 
        <span class="token keyword">return</span> memoryArray<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">calldataToMemory</span><span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">calldata</span> inputArray<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从调用数据到内存，创建副本</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> memoryArray <span class="token operator">=</span> inputArray<span class="token punctuation">;</span> 
        <span class="token keyword">return</span> memoryArray<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>memory -&gt; memory : 赋值的是引用，而不是创建副本</strong></p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">memoryToMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> array1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        array1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        array1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        array1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

				<span class="token comment">// 内存到内存，赋值的是引用</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> array2 <span class="token operator">=</span> array1<span class="token punctuation">;</span> 

        array2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> array1<span class="token punctuation">;</span> <span class="token comment">// 返回 [10, 2, 3]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>storage -&gt; local storage (in a function)</strong> 赋值的是引用</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">public</span> storageArray<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">storageToLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
    		<span class="token comment">// 存储到局部存储，赋值的是引用</span>
        <span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">storage</span> localStorageArray <span class="token operator">=</span> storageArray<span class="token punctuation">;</span> 

        localStorageArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        localStorageArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        localStorageArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">getStorageArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> storageArray<span class="token punctuation">;</span> <span class="token comment">// 返回 [1, 2, 3]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在其他情况下，赋值到存储位置时会创建数据的副本。</p><h4 id="状态变量" tabindex="-1"><a class="header-anchor" href="#状态变量" aria-hidden="true">#</a> 状态变量</h4><ul><li><strong>默认存储位置是 <code>storage</code></strong></li><li>合约中的 <code>name</code> 和 <code>age</code> 状态变量默认存储在 <code>storage</code> 中，因为它们是合约的一部分</li></ul><h4 id="函数参数" tabindex="-1"><a class="header-anchor" href="#函数参数" aria-hidden="true">#</a> 函数参数</h4><p>对于引用类型（如 <code>string</code>、<code>bytes</code>、<code>struct</code>、<code>array</code>），必须明确指定 <code>memory</code> 或 <code>calldata</code>，否则编译器会报错。</p><p>在函数参数中，如果没有指定存储位置，编译器会报错。例如，如果你省略 <code>memory</code>，如下代码将无法编译。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function setPerson(string _name, uint _age) public {
    // 编译器会报错，因为 _name 的存储位置未指定
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="局部变量" tabindex="-1"><a class="header-anchor" href="#局部变量" aria-hidden="true">#</a> 局部变量</h4><p>对于引用类型的局部变量，默认存储位置是 <code>storage</code>，但这通常不是你想要的。你通常会希望它们存储在 <code>memory</code> 中。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>function example() public {
    string memory localString = &quot;Hello&quot;;
    // localString 被存储在内存中
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="types" tabindex="-1"><a class="header-anchor" href="#types" aria-hidden="true">#</a> Types</h2><p>在编译时需要指定变量的类型（状态变量和局部变量）。</p><p>几种基本类型可以组合形成复杂类型。</p><p>Value Types</p><ul><li>布尔型（boolean {true, false}）；操作符：!（非），&amp;&amp;（与），||（或），==（等于），!=（不等于）。</li><li>整数（例如，int/uint：有符号和无符号整数）</li><li>地址（20字节值，以太坊地址的大小），可支付</li><li>balance; transfer(); send(); call(), <s>callcode()</s>, delegatecall();</li><li>Enum</li><li>user-defined value types (type myType is uint256)</li><li>function, ...</li></ul><h3 id="fixed-size-byte-arrays" tabindex="-1"><a class="header-anchor" href="#fixed-size-byte-arrays" aria-hidden="true">#</a> Fixed-size (byte) arrays</h3><ul><li>固定大小数组的长度在编译时确定，不能在运行时改变。</li><li><strong>声明方式</strong>：固定大小数组在声明时需要指定长度。例如：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>uint[10] public fixedArray;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p>Bytes数组</p><p>在 Solidity 中，<code>bytes</code> 类型是一种特殊的动态大小数组，用于存储任意长度的字节序列。<code>bytes</code> 类型实际上是 <code>byte[]</code> 的别名，但它的实现更高效。相对的，<code>bytes1</code> 到 <code>bytes32</code> 是固定大小的字节数组。</p><ul><li>bytes1, bytes2, ..., bytes32 (x in {1..32}, read-only field: .length = x)</li><li>length, push(); pop() (since 0.5.4)</li><li>可以通过索引访问数组元素，但不能获取数组的长度，因为长度是已知的固定值</li></ul><h3 id="dynamically-sized-array" tabindex="-1"><a class="header-anchor" href="#dynamically-sized-array" aria-hidden="true">#</a> Dynamically-sized array</h3><ul><li><strong>大小可变</strong>：动态大小数组的长度可以在运行时改变。你可以添加或删除元素。</li><li><strong>声明方式</strong>：动态大小数组在声明时不需要指定长度。例如：<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>uint[] public dynamicArray;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><strong>存储方式</strong>：动态大小数组可以存储在合约的存储（storage）中，也可以存储在内存（memory）中。</li><li><strong>访问</strong>：可以通过索引访问数组元素，并且可以获取数组的长度</li></ul><h3 id="reference-type" tabindex="-1"><a class="header-anchor" href="#reference-type" aria-hidden="true">#</a> Reference Type</h3><p>Data Location is needed except declared directly under Contract<br> 「除非直接在合约下声明，否则需要数据位置。」</p><h3 id="mappings" tabindex="-1"><a class="header-anchor" href="#mappings" aria-hidden="true">#</a> Mappings</h3><p><code>mapping (KeyType KeyName? =&gt; ValueType ValueName?) </code> [in Storage only]</p><ul><li>类似于存储键值对的哈希表（数据位置：存储）。</li><li>key 类型：不允许用户定义或复杂类型，如映射、结构体或数组。</li><li>value 类型可以是任何类型，包括映射。</li><li>不可迭代，不同于Python/JavaScript/...；但可以实现它。</li></ul><h3 id="structs" tabindex="-1"><a class="header-anchor" href="#structs" aria-hidden="true">#</a> Structs</h3><p>C-like syntax</p><h2 id="special-about-type" tabindex="-1"><a class="header-anchor" href="#special-about-type" aria-hidden="true">#</a> Special about Type</h2><p>在以太坊中，数据类型的选择会影响智能合约之间的交互和Gas的消耗。</p><ul><li>特别是需要注意内存（memory）和调用数据（calldata）之间的区别。 <ul><li>内存是临时的存储空间，费用较低</li><li>而调用数据是只读的，用于函数参数传递，费用也较低。</li></ul></li><li>直接将其他编程语言中的算法翻译成Solidity代码可能会遇到问题 <ul><li>因为Solidity有其特定的限制和特性。</li><li>例如，Solidity中的运算可能会导致意外的成本增加和错误（如无符号整型的溢出问题）。</li></ul></li><li>其他合约也可以预先确定数组的大小。这意味着在设计合约时，可以通过定义固定大小的数组来优化数据存储和传输。</li><li>与字符串相比，字节（bytes）消耗更少的Gas。因此，在将数据传递给另一个合约时，可以考虑将字符串转换为字节以节省Gas。</li><li>还有一些类型（如固定点数和无符号固定点数）尚未完全支持。这些类型用于表示具有不同大小的有符号或无符号固定点数。</li></ul><details class="hint-container details"><summary>Example</summary><p>定义一个函数，将字符串转换为字节：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">stringToBytes</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> str<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在合约之间传递字节数据：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">sendDataToOtherContract</span><span class="token punctuation">(</span><span class="token builtin">address</span> contractAddress<span class="token punctuation">,</span> <span class="token builtin">string</span> <span class="token keyword">memory</span> name<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
    <span class="token builtin">bytes</span> <span class="token keyword">memory</span> nameBytes <span class="token operator">=</span> <span class="token function">stringToBytes</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OtherContract</span><span class="token punctuation">(</span>contractAddress<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">receiveData</span><span class="token punctuation">(</span>nameBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接收合约中的函数：</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">contract</span> <span class="token class-name">OtherContract</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">receiveData</span><span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span> name<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token comment">// 处理接收到的数据</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></details>`,82),p=[i];function o(l,c){return s(),a("div",null,p)}const d=n(t,[["render",o],["__file","Solidity.html.vue"]]);export{d as default};
