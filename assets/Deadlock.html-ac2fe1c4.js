const e=JSON.parse('{"key":"v-6e03208c","path":"/note/cs/os/Deadlock.html","title":"Deadlock","lang":"zh-CN","frontmatter":{"article":false,"date":"2022-04-30T00:00:00.000Z","description":"Deadlock 用一个看起来类似的案例来比较 Deadlock。两个人正向对方走去，几乎相撞。两人都看到他们要撞上对方，都试图通过转向道路的一边来避免。会发生什么呢？他们俩会再次相撞。所以他们又做了一个动作来避免。在一个不幸运的情况下，当两个人总是做错动作时，他们最终会花时间去尝试其他的路线，但不成功。我们称这种情况为 Deadlock。 死锁是一组阻塞进程，每个过程都包含资源并等待在集合中获取由另一个进程所持持有的资源。 如果它正在等待当前由另一个进程持有的资源，则会阻止进程。 我们称之为这个资源僵局，这也是本文讨论的重点。 Example","head":[["meta",{"property":"og:url","content":"https://guomaimang.github.io/note/cs/os/Deadlock.html"}],["meta",{"property":"og:site_name","content":"HAN Jiaming | Hirsun | 韩佳明"}],["meta",{"property":"og:title","content":"Deadlock"}],["meta",{"property":"og:description","content":"Deadlock 用一个看起来类似的案例来比较 Deadlock。两个人正向对方走去，几乎相撞。两人都看到他们要撞上对方，都试图通过转向道路的一边来避免。会发生什么呢？他们俩会再次相撞。所以他们又做了一个动作来避免。在一个不幸运的情况下，当两个人总是做错动作时，他们最终会花时间去尝试其他的路线，但不成功。我们称这种情况为 Deadlock。 死锁是一组阻塞进程，每个过程都包含资源并等待在集合中获取由另一个进程所持持有的资源。 如果它正在等待当前由另一个进程持有的资源，则会阻止进程。 我们称之为这个资源僵局，这也是本文讨论的重点。 Example"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-15T05:33:29.000Z"}],["meta",{"property":"article:author","content":"Hirsun (HAN Jiaming)"}],["meta",{"property":"article:published_time","content":"2022-04-30T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-15T05:33:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Deadlock\\",\\"description\\":\\"Deadlock 用一个看起来类似的案例来比较 Deadlock。两个人正向对方走去，几乎相撞。两人都看到他们要撞上对方，都试图通过转向道路的一边来避免。会发生什么呢？他们俩会再次相撞。所以他们又做了一个动作来避免。在一个不幸运的情况下，当两个人总是做错动作时，他们最终会花时间去尝试其他的路线，但不成功。我们称这种情况为 Deadlock。 死锁是一组阻塞进程，每个过程都包含资源并等待在集合中获取由另一个进程所持持有的资源。 如果它正在等待当前由另一个进程持有的资源，则会阻止进程。 我们称之为这个资源僵局，这也是本文讨论的重点。 Example\\"}"]]},"headers":[{"level":2,"title":"Example","slug":"example","link":"#example","children":[]},{"level":2,"title":"Resource Model","slug":"resource-model","link":"#resource-model","children":[{"level":3,"title":"资源是能够被使用的对象","slug":"资源是能够被使用的对象","link":"#资源是能够被使用的对象","children":[]},{"level":3,"title":"Steps to use a resource","slug":"steps-to-use-a-resource","link":"#steps-to-use-a-resource","children":[]},{"level":3,"title":"Resources can be grouped into types","slug":"resources-can-be-grouped-into-types","link":"#resources-can-be-grouped-into-types","children":[]}]},{"level":2,"title":"Deadlock Characterization","slug":"deadlock-characterization","link":"#deadlock-characterization","children":[]},{"level":2,"title":"Resource Allocation Graph","slug":"resource-allocation-graph","link":"#resource-allocation-graph","children":[{"level":3,"title":"Quick rules of thumb","slug":"quick-rules-of-thumb","link":"#quick-rules-of-thumb","children":[]},{"level":3,"title":"Algorithm","slug":"algorithm","link":"#algorithm","children":[]}]},{"level":2,"title":"Deadlock Handling","slug":"deadlock-handling","link":"#deadlock-handling","children":[]}],"git":{"createdTime":1726378409000,"updatedTime":1726378409000,"contributors":[{"name":"hanjiaming","email":"47519540+guomaimang@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":9.1,"words":910},"filePathRelative":"note/cs/os/Deadlock.md","localizedDate":"2022年4月30日","excerpt":"<h1> Deadlock</h1>\\n<p>用一个看起来类似的案例来比较 Deadlock。两个人正向对方走去，几乎相撞。两人都看到他们要撞上对方，都试图通过转向道路的一边来避免。会发生什么呢？他们俩会再次相撞。所以他们又做了一个动作来避免。在一个不幸运的情况下，当两个人总是做错动作时，他们最终会花时间去尝试其他的路线，但不成功。我们称这种情况为 Deadlock。</p>\\n<p>死锁是一组阻塞进程，每个过程都包含资源并等待在集合中获取由另一个进程所持持有的资源。<br>\\n如果它正在等待当前由另一个进程持有的资源，则会阻止进程。 我们称之为这个资源僵局，这也是本文讨论的重点。</p>\\n<h2> Example</h2>","autoDesc":true}');export{e as data};
