import{_ as l}from"./plugin-vue_export-helper-c27b6911.js";import{r as s,o as r,c as o,a as i,b as a,d as t,e as n}from"./app-454f912f.js";const p={},d=n('<h1 id="python-基础" tabindex="-1"><a class="header-anchor" href="#python-基础" aria-hidden="true">#</a> Python 基础</h1><p>本文适用于快速入门Python。</p><h2 id="基础知识大纲" tabindex="-1"><a class="header-anchor" href="#基础知识大纲" aria-hidden="true">#</a> 基础知识大纲</h2><ol><li>为什么要学习Python？</li><li>Python的简介、版本选择、安装、开发环境 <ul><li>Python的简介和版本选择</li><li>Python的安装</li><li>Python的开发环境</li></ul></li><li>Python基础知识 <ul><li>打印、缩进、注释</li><li>基本数据类型和变量</li><li>运算符</li><li>条件语句if</li><li>循环语句for和while</li><li>循环跳转break和continue</li></ul></li><li>Python的数据结构 <ul><li>字符串 str</li><li>列表 list</li><li>元组 tuple</li><li>字典 dict</li><li>集合 set</li></ul></li><li>Python的函数、类、模块 <ul><li>函数定义和调用</li><li>类的定义和使用</li><li>自定义模块和引入模块</li><li>Python常用开源库介绍</li></ul></li><li>Python读写文件的方法</li></ol><h2 id="why-python" tabindex="-1"><a class="header-anchor" href="#why-python" aria-hidden="true">#</a> Why Python</h2><ul><li>IEEE Spectrum年度编程语言排行榜：Python在总排行、发展趋势、就业市场需求、开源领域经常年度排名第一</li><li>•Python已经成为各个大学的首选语言，它的卖点是容易学习、容易安装、容易部署</li></ul><img src="https://pic.hanjiaming.com.cn/2022/06/03/9ba0838e891f2.png" alt="1654196421836.png" style="zoom:33%;"><p>Python为什么这么火？</p><ul><li>受到大数据、人工智能领域的猛烈兴起，Python在这两个领域是最常用的语言</li><li>Python自己简单易学、使用方便，能够快速的解决问题</li></ul><p>因此</p><ul><li>不论你是想要新进入IT领域</li><li>或是想寻求新的职场突破点</li><li>或者想要追求当前最热的AI趋势</li></ul><p>Python都是你应该学习的第一编程语言！</p><h2 id="python-介绍" tabindex="-1"><a class="header-anchor" href="#python-介绍" aria-hidden="true">#</a> Python 介绍</h2><h3 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h3><p>Python是一门解释型的、面向对象的程序设计语言</p><p>特点：易学习、易阅读、易维护、跨平台、开源库极其丰富</p>',16),h={href:"https://pypi.org/simple/",target:"_blank",rel:"noopener noreferrer"},c=i("h3",{id:"版本选择",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#版本选择","aria-hidden":"true"},"#"),a(" 版本选择")],-1),u=i("p",null,"版本选择：",-1),g=i("p",null,"Python2和Python3差异非常大",-1),f=i("p",null,"Python3是趋势和未来，Python2官方将在2020年停止升级维护",-1),m={href:"https://wiki.python.org/moin/Python2orPython3",target:"_blank",rel:"noopener noreferrer"},b=n(`<h3 id="python-的安装" tabindex="-1"><a class="header-anchor" href="#python-的安装" aria-hidden="true">#</a> Python 的安装</h3><p>请阅读 Anaconda + Pycharm 配置指南</p><h3 id="开发环境" tabindex="-1"><a class="header-anchor" href="#开发环境" aria-hidden="true">#</a> 开发环境</h3><p>可以使用三种环境开发Python代码：</p><ol><li>命令行 <ul><li>适用于快速语法学习和测试</li><li>使用pip安装ipython插件可以极大提升使用体验（代码提示）</li></ul></li><li>文本编辑器(vim、atom、sublime)编写和运行 <ul><li>适用于小型需求代码编写</li></ul></li><li>集成开发环境PyCharm <ul><li>大型项目代码编写、调试</li></ul></li></ol><h3 id="风格" tabindex="-1"><a class="header-anchor" href="#风格" aria-hidden="true">#</a> 风格</h3><p>Python的设计目的：一种优美而强大，提供给非专业程序设计师使用的语言</p><p>在命令行输入import this即可查看（前几条）：</p><ul><li>优美胜于丑陋（Python以编写优美的代码为目标）</li><li>明了胜于晦涩（优美的代码应当是明了的，命名规范，风格相似）</li><li>简洁胜于复杂（优美的代码应当是简洁的，不要有复杂的内部实现）</li><li>复杂胜于凌乱（如果复杂不可避免，要保持接口简洁）</li><li>扁平胜于嵌套（优美的代码应当是扁平的，不能有太多的嵌套）</li><li>间隔胜于紧凑（优美的代码有适当的间隔，不要奢望一行代码解决问题）</li><li>可读性很重要（优美的代码是可读的）</li></ul><h3 id="缩进" tabindex="-1"><a class="header-anchor" href="#缩进" aria-hidden="true">#</a> 缩进</h3><p>Python的代码缩进：下一层级的代码，使用TAB来缩进（不建议使用空格）</p><h3 id="注释" tabindex="-1"><a class="header-anchor" href="#注释" aria-hidden="true">#</a> 注释</h3><p>Python注释的方法：</p><ul><li>使用#号进行行注释</li><li>使用三个双引号或者三个单引号，在文件开头、类/函数开头注释</li></ul><h2 id="基本数据类型和变量" tabindex="-1"><a class="header-anchor" href="#基本数据类型和变量" aria-hidden="true">#</a> 基本数据类型和变量</h2><p>基本数据类型（相对于String/List/Dict/Tuple等高级数据结构）</p><ul><li>整数： <ul><li>举例：1、2、234、-123、0</li><li>类型：int</li></ul></li><li>浮点型（小数）： <ul><li>举例：1.3、2.14、-2.34</li><li>类型：float</li></ul></li><li>布尔值： <ul><li>举例：真True、假False</li><li>类型：bool</li><li>空值：None</li></ul></li></ul><p>变量：</p><ul><li>存储信息、信息可变的一个名字</li><li>变量名必须是大小写英文、数字和_的组合，且不能用数字开头</li></ul><h2 id="运算符" tabindex="-1"><a class="header-anchor" href="#运算符" aria-hidden="true">#</a> 运算符</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/68cca9bb23cfb.png" alt="1654226979831.png" tabindex="0" loading="lazy"><figcaption>1654226979831.png</figcaption></figure><h2 id="if语句" tabindex="-1"><a class="header-anchor" href="#if语句" aria-hidden="true">#</a> if语句</h2><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>age <span class="token operator">=</span> <span class="token number">25</span>

<span class="token comment"># 采用if、elif、else的方式进行，可以有多个elif</span>
<span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;child&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;young&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">elif</span> age <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span> 
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;middle&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;old&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没有else if，只有elif</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># if的简写形式</span>
a <span class="token operator">=</span> <span class="token number">3</span>
b <span class="token operator">=</span> <span class="token string">&#39;big&#39;</span> 
<span class="token keyword">if</span> a <span class="token operator">&gt;</span> <span class="token number">2</span> <span class="token keyword">else</span> <span class="token string">&#39;small&#39;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="for遍历" tabindex="-1"><a class="header-anchor" href="#for遍历" aria-hidden="true">#</a> for遍历</h2><p>for循环用于遍历python的容器，包括：</p>`,27),y=i("ul",null,[i("li",null,'遍历字符串str ： for s in "abc"'),i("li",null,"遍历列表list ： for i in [1,2,3]"),i("li",null,"遍历元组tuple ： for i in (1,2,3)"),i("li",{"name:xiaoming,age:20":""},"遍历字典dict ： for i in"),i("li",null,"遍历集合set ： for i in set([1,2,3])")],-1),x=n(`<p>python的for循环，不能写成 JAVA/C 的 for(int i=0; i&lt;100; i++) 的形式</p><p>可以用f or i in range(100): print(i) 代替</p><p>range 的使用：</p><p>range是一个函数，可以挨个产出数字，可以用list(range(10))打印range的元素列表</p><ul><li>用法1：range(5)，输出[0,1,2,3,4]，注意，不包括最后一个数字</li><li>用法2：range(2,5)，输出[2,3,4]，注意，包括第一个数字，不包括最后一个数字</li><li>用法3：range(3,10,2)，输出[3,5,7,9]第三个参数是步子大小</li></ul><h2 id="while循环" tabindex="-1"><a class="header-anchor" href="#while循环" aria-hidden="true">#</a> while循环</h2><p>while： 循环重复判断条件，如果为True就执行，如果为Fasle就退出循环；</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>idx <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">while</span> idx <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>
    idx <span class="token operator">+=</span> <span class="token number">1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>for和while都是循环，有什么区别？取决于要遍历的数据结构</p><ul><li>如果有一个现成的数据可以挨个遍历，用for+in搭配最简洁</li><li>for e in range/string/list/tuple/dict/set/file</li><li>如果没有，就写成条件是否满足的形式，用while实现</li></ul><h2 id="break和continue关键字" tabindex="-1"><a class="header-anchor" href="#break和continue关键字" aria-hidden="true">#</a> break和continue关键字</h2><ul><li>break：跳出for/while的整体循环，继续往下执行</li><li>continue：结束for/while的当次循环，继续下一个循环</li></ul><img src="https://pic.hanjiaming.com.cn/2022/06/03/e82d4b28e6fbb.png" alt="1654227392138.png" style="zoom:50%;"><h2 id="读写文件的方法" tabindex="-1"><a class="header-anchor" href="#读写文件的方法" aria-hidden="true">#</a> 读写文件的方法</h2><ul><li><p>读取文件的对象：fin = open(&quot;data.txt&quot;)</p></li><li><p>写出文件的对象：fout = open(&quot;data.txt&quot;,&quot;w&quot;)</p></li><li><p>读取文件的全部内容：whole_data = fin.read()</p></li><li><p>按行读取文件的内容：for line in fin: print(line)</p></li><li><p>写出一行数据到文件：fout.write(&quot;xyz\\n&quot;)</p></li><li><p>文件的关闭：fin.close()和fout.close()</p></li><li><p>写出大文件时刷新内存到文件：fout.flush()</p></li></ul><h2 id="字符串" tabindex="-1"><a class="header-anchor" href="#字符串" aria-hidden="true">#</a> 字符串</h2><p>Python本身作为一个擅长数据处理、文本处理的语言，开发中需要大量的处理字符串.<br> 字符串可以从前端用户输入、日志文件读取、数据库查询、网络爬取，然后进行各种处理变换和利用.</p><img src="https://pic.hanjiaming.com.cn/2022/06/03/a557fc6271aa1.png" alt="1654227478808.png" style="zoom:50%;"><h3 id="单引号、双引号、三引号" tabindex="-1"><a class="header-anchor" href="#单引号、双引号、三引号" aria-hidden="true">#</a> 单引号、双引号、三引号</h3><p>字符串可以使用单引号、双引号、三引号包括起来的内容</p><img src="https://pic.hanjiaming.com.cn/2022/06/03/11ce3f0d7ce50.png" alt="1654227550511.png" style="zoom:50%;"><h3 id="获取子串" tabindex="-1"><a class="header-anchor" href="#获取子串" aria-hidden="true">#</a> 获取子串</h3><ul><li>使用数字下标，可以直接访问某个字符，&quot;abc&quot;[0] == &quot;a&quot;</li><li>数字下标可以从-1开始，代表从字符串最后开始数，&quot;abc&quot;[-1] == &quot;c&quot;</li><li>可以使用切片，获取子字符串 <ul><li>str[2:4]，获取2~4的子字符串，包括第2个元素，不包括第4个元素</li><li>str[:4]，获取从开头0到第4个元素(不包括)的子串，&quot;2018-09-24&quot;[:4]</li><li>str[4:]，获取从第4个元素(包括)开始，到最后的子字符串</li></ul></li></ul><h3 id="格式化" tabindex="-1"><a class="header-anchor" href="#格式化" aria-hidden="true">#</a> 格式化</h3><p>当将数据返回给客户端、写出到文件、存入到数据库的时候.</p><p>经常需要对外输出一个字符串，这个字符串是很多个变量和字符串的拼接格式化.</p><ul><li>方法1：用加号拼接字符串和字符串，&quot;hello&quot; + s</li><li>方法2：使用百分号格式化符号，&quot;buy %s, count %d, price %f.&quot;%(&quot;apple&quot;, 10, 99.9)</li><li>方法3：使用format函数，&quot;{vara} and {varb}&quot;.format(vara=&quot;liming&quot;, varb=&quot;xiaomei&quot;)</li><li>方法4：使用py3.6新的format方法，f&quot;buy {name}, count is {count}&quot;</li><li>方法5：使用join函数，&quot;\\t&quot;.join([&#39;a&#39;,&#39;b&#39;,&#39;c&#39;])</li></ul><h3 id="字符串的常用方法" tabindex="-1"><a class="header-anchor" href="#字符串的常用方法" aria-hidden="true">#</a> 字符串的常用方法</h3><p>字符串支持的常用方法列表</p><ul><li>len(&quot;abc&quot;) 字符串的长度</li><li>str(12), str(1.2), str([1,2,3]把对象变成字符串</li><li>str.endswith(&quot;.txt&quot;)，判断是否已某个字符串结尾</li><li>str.startswith(&quot;test_&quot;)，判断是否以某个字符串开头</li><li>str.replace(old, new)，将旧字符串替换为新字符串</li><li>str.split(&quot;,&quot;)，使用字符串分割字符串得到一个list</li><li>str.strip()，去除字符串两边的空格</li><li>str.isnumeric()，判断字符串是不是数字</li></ul><h2 id="列表list" tabindex="-1"><a class="header-anchor" href="#列表list" aria-hidden="true">#</a> 列表list</h2><p>Python的列表list是一种保存有序项集合、可变的数据结构（可以增加和删除项）</p><ul><li>创建一个空列表：data = []</li><li>创建一个有值列表：data = [1,2,3,4]</li></ul><img src="https://pic.hanjiaming.com.cn/2022/06/03/6f6c4582d54e7.png" alt="1654235949566.png" style="zoom:50%;"><h3 id="索引和切片" tabindex="-1"><a class="header-anchor" href="#索引和切片" aria-hidden="true">#</a> 索引和切片</h3><ul><li>索引：list[idx]，访问某个元素，idx&gt;=0 and idx &lt;= len(list)-1</li><li>索引： idx可以是负数，从-1往前数</li><li>切片：list[begin:end]，获取切片List，从begin开始，到end结束(不包括end)</li><li>索引和切片对应的值都是可以修改的（字符串不可以）</li></ul><h3 id="常用方法" tabindex="-1"><a class="header-anchor" href="#常用方法" aria-hidden="true">#</a> 常用方法</h3><ul><li><p>list.append(item)，在列表末尾新增一个元素</p></li><li><p>list.extend(list)，在列表末尾新增一个列表</p></li><li><p>list + list，返回一个新的List合并的list</p></li><li><p>list.clear()，清空列表中的所有元素</p></li><li><p>len(list)，返回列表的元素个数</p></li><li><p>for i in list: print(i)，按顺序遍历列表</p></li><li><p>for idx,value in enumerate(list): print(idx, value)，用下标和数值遍历列表</p></li><li><p>for idx in range(len(list)): print(idx, list[idx]) ，用下标和数值遍历列表</p></li><li><p>list.sort(key=None, reverse=False)，对list进行排序</p></li><li><p>list.reverse()，翻转list自身</p></li></ul><h3 id="列表推导式" tabindex="-1"><a class="header-anchor" href="#列表推导式" aria-hidden="true">#</a> 列表推导式</h3><p>列表推导式（又称列表解析式）提供了一种简明扼要的方法来创建列表。</p><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/f7d30b1511ce8.png" alt="1654236102042.png" tabindex="0" loading="lazy"><figcaption>1654236102042.png</figcaption></figure><h3 id="元组tuple" tabindex="-1"><a class="header-anchor" href="#元组tuple" aria-hidden="true">#</a> 元组tuple</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/8706a18a6c54d.png" alt="1654236188378.png" tabindex="0" loading="lazy"><figcaption>1654236188378.png</figcaption></figure><p><strong>问题：既然元组和列表这么像，为什么要有这个数据结构，需要元组的地方都用列表不就行了吗？</strong></p><table><thead><tr><th>区别项</th><th>元组tuple</th><th>列表list</th><th>说明</th></tr></thead><tbody><tr><td><strong>内容区别</strong></td><td>异质、不同类型</td><td>同质，相同类型</td><td>用一个元组表示一个人的信息people(id、name、age) <br>用一个列表表示很多人的信息列表[p1,p2,p3]</td></tr><tr><td><strong>使用区别</strong></td><td>pack和unpack</td><td>循环遍历</td><td>元组pack和unpack： <br>编写函数pack：get_info(): return id,name,age <br>调用函数unpack：id,name,age = get_info() <br>列表循环遍历： for s in students: print(s)</td></tr><tr><td><strong>是否可变</strong></td><td>不可变</td><td>可变</td><td>元组的不可变性质：<br>代码更安全，如果是一个元组就放心的使用，不怕被更改 •有些场景需要不可变的列表，比如字典的KEY要求不可变对象</td></tr></tbody></table><h2 id="字典dict" tabindex="-1"><a class="header-anchor" href="#字典dict" aria-hidden="true">#</a> 字典dict</h2><h3 id="基础语法" tabindex="-1"><a class="header-anchor" href="#基础语法" aria-hidden="true">#</a> 基础语法</h3>`,48),k=i("ul",null,[i("li",null,"字典dict是一种KEY：VALUE的数据结构，可以根据KEY设置和获取对应的VALUE"),i("li",{"key1:value1,":"","key2:value2":""},"语法： dict ="),i("li",{"id:123,name:liming":""},"举例： d =")],-1),v=n('<h3 id="字典dict和列表list的对比" tabindex="-1"><a class="header-anchor" href="#字典dict和列表list的对比" aria-hidden="true">#</a> 字典dict和列表list的对比</h3><ul><li>列表用顺序数字做索引，字典用Key做索引，相当于给每个元素进行了命名（&quot;3号学生&quot;和&quot;xm同学&quot;的区别）</li><li>如果有一个数据列表：[(11, A), (12, B), (13, C)]，要在其中查找B这个条目，需要遍历列表查找；</li><li>如果使用字典{A:11, B:12, C:13}，直接使用get(B)取出，字典具有超级快的按KEY查找速度；</li></ul><img src="https://pic.hanjiaming.com.cn/2022/06/03/f4114984bc3d1.png" alt="1654236478229.png" style="zoom:50%;"><h3 id="常用方法-1" tabindex="-1"><a class="header-anchor" href="#常用方法-1" aria-hidden="true">#</a> 常用方法</h3><ul><li>len(dict) 字典的key/value对个数，也等于key的个数</li><li>str(dict) 字典的字符串形式</li><li>type(dict) 字典的类型，输出dict</li><li>dict.clear() 清空字典的所有内容</li><li>dict.get(key, default) 获取key的内容，如果key不存在，返回默认值default</li><li>key in dict 判断key是否在dict的键中</li><li>dict1.update(dict2) 将dict2的所有键值对，更新到dict1</li><li>{x:x*x for x in range(10)} 字典推导式</li></ul><h3 id="实例-–-按课程统计数据" tabindex="-1"><a class="header-anchor" href="#实例-–-按课程统计数据" aria-hidden="true">#</a> 实例 – 按课程统计数据</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/0a66a592b6d2a.png" alt="1654246211383.png" tabindex="0" loading="lazy"><figcaption>1654246211383.png</figcaption></figure><h2 id="集合set" tabindex="-1"><a class="header-anchor" href="#集合set" aria-hidden="true">#</a> 集合set</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/cbd4a853e0cb8.png" alt="1654246255114.png" tabindex="0" loading="lazy"><figcaption>1654246255114.png</figcaption></figure><h3 id="实例-–-获取去重的人名" tabindex="-1"><a class="header-anchor" href="#实例-–-获取去重的人名" aria-hidden="true">#</a> 实例 – 获取去重的人名</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/6c48e0748cbe3.png" alt="1654246275594.png" tabindex="0" loading="lazy"><figcaption>1654246275594.png</figcaption></figure><h2 id="高级数据结构的对比" tabindex="-1"><a class="header-anchor" href="#高级数据结构的对比" aria-hidden="true">#</a> 高级数据结构的对比</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/9fbef5f91111d.png" alt="1654246300237.png" tabindex="0" loading="lazy"><figcaption>1654246300237.png</figcaption></figure><h2 id="实战" tabindex="-1"><a class="header-anchor" href="#实战" aria-hidden="true">#</a> 实战</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/cf6ff38ebd5d6.png" alt="1654246345837.png" tabindex="0" loading="lazy"><figcaption>1654246345837.png</figcaption></figure><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/f2279ca5e3625.png" alt="1654246365165.png" tabindex="0" loading="lazy"><figcaption>1654246365165.png</figcaption></figure><h2 id="代码的组织结构" tabindex="-1"><a class="header-anchor" href="#代码的组织结构" aria-hidden="true">#</a> 代码的组织结构</h2><ul><li>如果是小型需求，只写代码即可，实现功能是第一要诀，不用管结构</li><li>如果是复杂代码或者团队合作，需要进行按不同的层次封装代码，方便重用和协作</li></ul><img src="https://pic.hanjiaming.com.cn/2022/06/03/51bbc7f84c290.png" alt="1654246422806.png" style="zoom:50%;"><ul><li>接下来会依次介绍函数、类、模块的知识和使用</li></ul><h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/7a3dd7c5a6583.png" alt="1654246453170.png" tabindex="0" loading="lazy"><figcaption>1654246453170.png</figcaption></figure><h2 id="lambda函数" tabindex="-1"><a class="header-anchor" href="#lambda函数" aria-hidden="true">#</a> lambda函数</h2><h3 id="基础知识" tabindex="-1"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h3><p>不妨把函数当做变量来看。</p><img src="https://pic.hanjiaming.com.cn/2022/06/03/e646147e60d8d.png" alt="1654246494368.png" style="zoom:50%;"><h3 id="列表中排序体现-lambda" tabindex="-1"><a class="header-anchor" href="#列表中排序体现-lambda" aria-hidden="true">#</a> 列表中排序体现 lambda</h3><img src="https://pic.hanjiaming.com.cn/2022/06/03/acd5db5d3ae74.png" alt="1654250954068.png" style="zoom:50%;"><h2 id="class类" tabindex="-1"><a class="header-anchor" href="#class类" aria-hidden="true">#</a> class类</h2><h3 id="基础知识-1" tabindex="-1"><a class="header-anchor" href="#基础知识-1" aria-hidden="true">#</a> 基础知识</h3><p>什么是类和实例(对象)：</p><ul><li>类一般是名词，代表一类事物，比如学生、汽车、电脑；</li><li>类定义了一个模板，一个类可以有多个实例对象，每个实例对象有自己的具体的属性取值；</li><li>类是包含数据和方法的一个打包，其中的方法可以对数据进行更新；</li></ul><p>实际例子：</p><ul><li>list是一个类，[1,2,3]是一个实例</li><li>tuple是一个类，(1,2,3)是一个实例</li><li>dict是一个类，{&quot;name&quot;:123}是一个实例</li><li>set是一个类，{1,2,3}是一个实例</li><li>string 是一个类</li></ul><img src="https://pic.hanjiaming.com.cn/2022/06/03/133fda18b77bf.png" alt="1654251116775.png" style="zoom:50%;"><h3 id="语法知识" tabindex="-1"><a class="header-anchor" href="#语法知识" aria-hidden="true">#</a> 语法知识</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/daf52f6d2d508.png" alt="CleanShot 2022-06-03 at 18.21.50@2x.png" tabindex="0" loading="lazy"><figcaption>CleanShot 2022-06-03 at 18.21.50@2x.png</figcaption></figure><h3 id="实例演示" tabindex="-1"><a class="header-anchor" href="#实例演示" aria-hidden="true">#</a> 实例演示</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/22244482222c2.png" alt="1654251881441.png" tabindex="0" loading="lazy"><figcaption>1654251881441.png</figcaption></figure><h2 id="异常exception" tabindex="-1"><a class="header-anchor" href="#异常exception" aria-hidden="true">#</a> 异常Exception</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/31b7881945978.png" alt="1654252074523.png" tabindex="0" loading="lazy"><figcaption>1654252074523.png</figcaption></figure><h2 id="包package和模块module" tabindex="-1"><a class="header-anchor" href="#包package和模块module" aria-hidden="true">#</a> 包package和模块module</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/a0d1925ce70c7.png" alt="1654252214368.png" tabindex="0" loading="lazy"><figcaption>1654252214368.png</figcaption></figure><h2 id="常见模块" tabindex="-1"><a class="header-anchor" href="#常见模块" aria-hidden="true">#</a> 常见模块</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/7f7601a670e33.png" alt="1654252603451.png" tabindex="0" loading="lazy"><figcaption>1654252603451.png</figcaption></figure><h3 id="sys模块" tabindex="-1"><a class="header-anchor" href="#sys模块" aria-hidden="true">#</a> sys模块</h3><p>负责程序与python解释器的交互，提供函数和变量用于操控python的运行时环境</p><ul><li>sys.argv 类型为list，命令行参数列表，<strong>第一个元素是脚本名称或路径</strong></li><li>sys.path 类型为list，模块的搜索路径 <ul><li>它使用PYTHONPATH环境变量初始化</li><li>第一个元素是当前目录，意思是每次会首先搜索当前目录下的模块</li><li>用户在程序中可以自己修改sys.path，设置自己的模块搜索路径</li></ul></li><li>sys.exit(n) 退出程序，n等于0代表正常退出，不等于0代表异常退出，在shell可以用$?获得退出值</li></ul><h3 id="os模块" tabindex="-1"><a class="header-anchor" href="#os模块" aria-hidden="true">#</a> os模块</h3><p>负责程序与操作系统交互，提供访问操作系统底层的接口</p><ul><li>os.environ 字典类型，读取系统环境变量</li><li>os.remove(path) 删除文件</li><li>os.rename(src,dst) 重命名文件或目录，可实现文件移动</li><li>os.mkdir(dir) 创建目录</li><li>os.rmdir(dir) 删除目录，目录必须为空</li><li>os.listdir(path) 返回列表，列出目录下的文件和目录</li><li>os.path.basename(path) 提取路径参数中的文件名</li><li>os.path.dirname(path) 提取路径参数中的目录名</li><li>os.path.split(path) 拆分path为(目录名, 文件名)</li><li>os.path.splitext(path) 拆分path(文件名, 后缀名)</li><li>os.path.exists(path) 判断指定的文件或目录是否存在</li><li>os.path.isdir(path) 判断path参数是否是目录</li><li>os.path.isfile(path) 判断path参数是否是普通文件</li></ul><h3 id="模块json" tabindex="-1"><a class="header-anchor" href="#模块json" aria-hidden="true">#</a> 模块json</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/361904bf02787.png" alt="1654252824431.png" tabindex="0" loading="lazy"><figcaption>1654252824431.png</figcaption></figure><h3 id="web开发微框架flask" tabindex="-1"><a class="header-anchor" href="#web开发微框架flask" aria-hidden="true">#</a> web开发微框架flask</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/83819449bfb7e.png" alt="1654252883754.png" tabindex="0" loading="lazy"><figcaption>1654252883754.png</figcaption></figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/cda746ebb29ca.png" alt="1654252908200.png" style="zoom:50%;"><h3 id="http爬虫库requests" tabindex="-1"><a class="header-anchor" href="#http爬虫库requests" aria-hidden="true">#</a> http爬虫库requests</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/092dcdebcefe2.png" alt="CleanShot 2022-06-03 at 18.42.12@2x.png" tabindex="0" loading="lazy"><figcaption>CleanShot 2022-06-03 at 18.42.12@2x.png</figcaption></figure><h3 id="访问mysql模块pymysql" tabindex="-1"><a class="header-anchor" href="#访问mysql模块pymysql" aria-hidden="true">#</a> 访问MySQL模块PyMySQL</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/767943042219a.png" alt="1654253241339.png" tabindex="0" loading="lazy"><figcaption>1654253241339.png</figcaption></figure><h3 id="使用xlwt模块生成excel" tabindex="-1"><a class="header-anchor" href="#使用xlwt模块生成excel" aria-hidden="true">#</a> 使用xlwt模块生成excel</h3><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/f2dd97525754a.png" alt="CleanShot 2022-06-03 at 18.42.34@2x.png" tabindex="0" loading="lazy"><figcaption>CleanShot 2022-06-03 at 18.42.34@2x.png</figcaption></figure><h2 id="回顾" tabindex="-1"><a class="header-anchor" href="#回顾" aria-hidden="true">#</a> 回顾</h2><figure><img src="https://pic.hanjiaming.com.cn/2022/06/03/767943042219a.png" alt="1654253241339.png" tabindex="0" loading="lazy"><figcaption>1654253241339.png</figcaption></figure>',64);function q(_,P){const e=s("ExternalLinkIcon");return r(),o("div",null,[d,i("p",null,[a("Python库列表："),i("a",h,[a("https://pypi.org/simple/"),t(e)])]),c,u,g,f,i("p",null,[a("Python官方："),i("a",m,[a("https://wiki.python.org/moin/Python2orPython3"),t(e)])]),b,y,x,k,v])}const z=l(p,[["render",q],["__file","Standard.html.vue"]]);export{z as default};
