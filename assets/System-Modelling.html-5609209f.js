const e=JSON.parse('{"key":"v-0fd893e6","path":"/note/it/pm/se/System-Modelling.html","title":"System Modelling","lang":"zh-CN","frontmatter":{"article":false,"date":"2022-12-14T00:00:00.000Z","order":5,"headerDepth":2,"description":"System Modelling 了解如何用图形模型来表示软件系统，以及为什么需要几种类型的模型来完全表示一个系统。 了解上下文、交互、结构和行为的基本系统建模观点； 了解统一建模语言（UML）中的主要图表类型以及这些图表如何用于系统建模。 了解模型驱动工程，即从结构和行为模型中自动生成可执行系统。 系统建模是开发一个系统的抽象模型的过程，每个模型都呈现出该系统的不同观点或视角。 模型可以有不同的形式 基于统一建模语言（UML）中的图示类型的图形模型。 正式的（数学）模型。","head":[["meta",{"property":"og:url","content":"https://guomaimang.github.io/note/it/pm/se/System-Modelling.html"}],["meta",{"property":"og:site_name","content":"HAN Jiaming"}],["meta",{"property":"og:title","content":"System Modelling"}],["meta",{"property":"og:description","content":"System Modelling 了解如何用图形模型来表示软件系统，以及为什么需要几种类型的模型来完全表示一个系统。 了解上下文、交互、结构和行为的基本系统建模观点； 了解统一建模语言（UML）中的主要图表类型以及这些图表如何用于系统建模。 了解模型驱动工程，即从结构和行为模型中自动生成可执行系统。 系统建模是开发一个系统的抽象模型的过程，每个模型都呈现出该系统的不同观点或视角。 模型可以有不同的形式 基于统一建模语言（UML）中的图示类型的图形模型。 正式的（数学）模型。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-15T05:33:29.000Z"}],["meta",{"property":"article:author","content":"Hirsun (HAN Jiaming)"}],["meta",{"property":"article:published_time","content":"2022-12-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-15T05:33:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"System Modelling\\",\\"description\\":\\"System Modelling 了解如何用图形模型来表示软件系统，以及为什么需要几种类型的模型来完全表示一个系统。 了解上下文、交互、结构和行为的基本系统建模观点； 了解统一建模语言（UML）中的主要图表类型以及这些图表如何用于系统建模。 了解模型驱动工程，即从结构和行为模型中自动生成可执行系统。 系统建模是开发一个系统的抽象模型的过程，每个模型都呈现出该系统的不同观点或视角。 模型可以有不同的形式 基于统一建模语言（UML）中的图示类型的图形模型。 正式的（数学）模型。\\"}"]]},"headers":[{"level":2,"title":"Abstraction vs. Representation","slug":"abstraction-vs-representation","link":"#abstraction-vs-representation","children":[]},{"level":2,"title":"Graphical System Models","slug":"graphical-system-models","link":"#graphical-system-models","children":[]},{"level":2,"title":"Context Models","slug":"context-models","link":"#context-models","children":[{"level":3,"title":"System boundaries","slug":"system-boundaries","link":"#system-boundaries","children":[]},{"level":3,"title":"UML Activity Diagrams","slug":"uml-activity-diagrams","link":"#uml-activity-diagrams","children":[]}]},{"level":2,"title":"Interaction Models","slug":"interaction-models","link":"#interaction-models","children":[]}],"git":{"createdTime":1726378409000,"updatedTime":1726378409000,"contributors":[{"name":"hanjiaming","email":"47519540+guomaimang@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":10.01,"words":1001},"filePathRelative":"note/it/pm/se/System-Modelling.md","localizedDate":"2022年12月14日","excerpt":"<h1> System Modelling</h1>\\n<ol>\\n<li>了解如何用图形模型来表示软件系统，以及为什么需要几种类型的模型来完全表示一个系统。</li>\\n<li>了解上下文、交互、结构和行为的基本系统建模观点；</li>\\n<li>了解统一建模语言（UML）中的主要图表类型以及这些图表如何用于系统建模。</li>\\n<li>了解模型驱动工程，即从结构和行为模型中自动生成可执行系统。</li>\\n</ol>\\n<p>系统建模是开发一个系统的抽象模型的过程，每个模型都呈现出该系统的不同观点或视角。</p>\\n<p>模型可以有不同的形式</p>\\n<ul>\\n<li>基于统一建模语言（UML）中的图示类型的图形模型。</li>\\n<li>正式的（数学）模型。</li>\\n</ul>","autoDesc":true}');export{e as data};
