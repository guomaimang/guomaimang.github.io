import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as e,c as o,a as s,b as a,d as l,e as n}from"./app-a901a58e.js";const i={},u=n(`<h1 id="javascript-基础" tabindex="-1"><a class="header-anchor" href="#javascript-基础" aria-hidden="true">#</a> JavaScript 基础</h1><p>这一部分内容是关于 JavaScript 语言本身的。</p><p>我们需要一个工作环境来运行我们的脚本，浏览器是一个不错的选择。</p><p>对于服务器端环境（如 Node.js），你只需要使用诸如 <code>&quot;node my.js&quot;</code> 的命令行来执行它。</p><h2 id="script-标签" tabindex="-1"><a class="header-anchor" href="#script-标签" aria-hidden="true">#</a> script 标签</h2><p>我们几乎可以使用 <code>&lt;script&gt;</code> 标签将 JavaScript 程序插入到 HTML 文档的任何位置。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>script 标签之前...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;Hello, world!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
  
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>...script 标签之后<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&lt;script&gt;</code> 标签中包裹了 JavaScript 代码，当浏览器遇到 <code>&lt;script&gt; </code>标签，代码会自动运行。</p><h2 id="现代的标记" tabindex="-1"><a class="header-anchor" href="#现代的标记" aria-hidden="true">#</a> 现代的标记</h2><p><code>&lt;script&gt;</code> 标签有一些现在很少用到的特性（attribute），但是我们可以在老代码中找到它们：</p><ul><li><p><code>type</code> 特性：<code>&lt;script type=…&gt;</code></p><p>在老的 HTML4 标准中，要求 script 标签有 <code>type</code> 特性。通常是 <code>type=&quot;text/javascript&quot;</code>。这样的特性声明现在已经不再需要。而且，现代 HTML 标准已经完全改变了此特性的含义。现在，它可以用于 JavaScript 模块。但这是一个高阶话题，我们将在本教程的另一部分中探讨 JavaScript 模块。</p></li><li><p><code>language</code> 特性：<code>&lt;script language=…&gt;</code></p><p>这个特性是为了显示脚本使用的语言。这个特性现在已经没有任何意义，因为语言默认就是 JavaScript。不再需要使用它了。</p></li><li><p>脚本前后的注释。</p><p>在非常古老的书籍和指南中，你可能会在 <code>&lt;script&gt;</code> 标签里面找到注释，就像这样：<code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;!-- ... //--&gt;&lt;/script&gt;</code>现代 JavaScript 中已经不这样使用了。这些注释是用于不支持 <code>&lt;script&gt;</code> 标签的古老的浏览器隐藏 JavaScript 代码的。由于最近 15 年内发布的浏览器都没有这样的问题，因此这种注释能帮你辨认出一些老掉牙的代码。</p></li></ul><h2 id="外部脚本" tabindex="-1"><a class="header-anchor" href="#外部脚本" aria-hidden="true">#</a> 外部脚本</h2><p>如果你有大量的 JavaScript 代码，我们可以将它放入一个单独的文件。</p><p>脚本文件可以通过 <code>src</code> 特性（attribute）添加到 HTML 文件中。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/path/to/script.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里，<code>/path/to/script.js</code> 是脚本文件从网站根目录开始的绝对路径。当然也可以提供当前页面的相对路径。例如，<code>src =&quot;script.js&quot;</code>，就像 <code>src=&quot;./script.js&quot;</code>，表示当前文件夹中的 <code>&quot;script.js&quot;</code> 文件。</p><p>我们也可以提供一个完整的 URL 地址，例如：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>要附加多个脚本，请使用多个标签：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/js/script1.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/js/script2.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
…
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,20),r=s("p",null,"请注意：",-1),d=s("p",null,"一般来说，只有最简单的脚本才嵌入到 HTML 中。更复杂的脚本存放在单独的文件中。",-1),k={href:"https://en.wikipedia.org/wiki/Web_cache",target:"_blank",rel:"noopener noreferrer"},g=s("p",null,"之后，其他页面想要相同的脚本就会从缓存中获取，而不是下载它。所以文件实际上只会下载一次。",-1),v=s("p",null,"这可以节省流量，并使得页面（加载）更快。",-1),m=n(`<blockquote><p><strong>如果设置了 <code>src</code> 特性，<code>script</code> 标签内容将会被忽略。</strong></p><p>一个单独的 <code>&lt;script&gt;</code> 标签不能同时有 <code>src</code> 特性和内部包裹的代码。</p><p>这将不会工作：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 此内容会被忽略，因为设定了 src</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们必须进行选择，要么使用外部的 <code>&lt;script src=&quot;…&quot;&gt;</code>，要么使用正常包裹代码的 <code>&lt;script&gt;</code>。</p><p>为了让上面的例子工作，我们可以将它分成两个 <code>&lt;script&gt;</code> 标签。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>file.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ul><li>我们可以使用一个 <code>&lt;script&gt;</code> 标签将 JavaScript 代码添加到页面中。</li><li><code>type</code> 和 <code>language</code> 特性（attribute）不是必需的。</li><li>外部的脚本可以通过 <code>&lt;script src=&quot;path/to/script.js&quot;&gt;&lt;/script&gt;</code> 的方式插入。</li></ul><p>有关浏览器脚本以及它们和网页的关系，还有很多可学的。但是请记住，教程的这部分主要是针对 JavaScript 语言本身的，所以我们不该被浏览器特定的实现分散自己的注意力。我们将使用浏览器作为运行 JavaScript 的一种方式，这种方式非常便于我们在线阅读，但这只是很多种方式中的一种。</p>`,4);function h(b,q){const t=c("ExternalLinkIcon");return e(),o("div",null,[u,s("blockquote",null,[r,d,s("p",null,[a("使用独立文件的好处是浏览器会下载它，然后将它保存到浏览器的 "),s("a",k,[a("缓存"),l(t)]),a(" 中。")]),g,v]),m])}const x=p(i,[["render",h],["__file","index.html.vue"]]);export{x as default};
