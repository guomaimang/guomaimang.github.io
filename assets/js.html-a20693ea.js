import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as t}from"./app-4a3e2d8d.js";const e={},o=t(`<h1 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h1><p>Client-side Languages for User Interface (UI) Design</p><ul><li>Client-side Languages for User Interface (UI) Design <ul><li>Structure and Content - Hypertext Markup Language (HTML)</li><li>Presentation - Cascading Style Sheet (CSS)</li><li>Behavior - Javascript (JS) (alternatives? TypeScript? technically JS)</li></ul></li><li>Javascript: ECMAScript (standardized by ECMA TC39) + APIs + + ... <ul><li>&quot;to help nonprogrammers create dynamic, interactive Web sites&quot;</li><li>Works also in non-browser environment, e.g., Node.js</li></ul></li></ul><p>Recent advances in Javascript shifts the paradigm of web programming.</p><h2 id="javascript-basics" tabindex="-1"><a class="header-anchor" href="#javascript-basics" aria-hidden="true">#</a> Javascript Basics</h2><p>管理页面行为，使其具有交互性</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;script&gt; 标签阻止/延迟后续内容的渲染（async 或 defer 属性？）
外部脚本需要在执行它们之前获取（）
将它们放在 &lt;body&gt; 结束前或 &lt;head&gt; 中（如果不引用 DOM）

（与 CSS 相反）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="detour-to-security" tabindex="-1"><a class="header-anchor" href="#detour-to-security" aria-hidden="true">#</a> Detour (to Security)</h2><p>External JS file, Embedded JS code, Inline JS, which one is preferred?</p><p>在选择外部JavaScript文件、内嵌JavaScript代码和行内JavaScript之间时，需要考虑几个因素：性能、调试的便捷性和安全性。让我们逐一分析每个方面：</p><h3 id="performance" tabindex="-1"><a class="header-anchor" href="#performance" aria-hidden="true">#</a> Performance</h3><p><strong>External JavaScript File</strong></p><p>Pros:</p><ul><li><strong>Caching:</strong> Browsers can cache external JS files, which reduces load times on subsequent page visits.</li><li><strong>Parallel Downloads:</strong> Modern browsers can download multiple resources in parallel, improving load times.</li></ul><p>Cons</p><ul><li><strong>Initial Request:</strong> The first time the file is requested, it may add an extra HTTP request, slightly increasing the initial load time.</li></ul><p><strong>Embedded JavaScript Code (within HTML):</strong></p><ul><li>Pros: <strong>Immediate Execution:</strong> The code is available immediately as the HTML is parsed.</li><li>Cons: <strong>No Caching:</strong> The code cannot be cached separately from the HTML, leading to larger HTML files and potentially slower load times for subsequent visits.</li></ul><p><strong>Inline JavaScript (within HTML elements)</strong></p><ul><li>Pros: <ul><li><strong>Immediate Execution:</strong> The code is executed immediately at the point where it appears.</li></ul></li><li>Cons: <ul><li><strong>No Caching:</strong> Similar to embedded JS, it cannot be cached separately.</li><li><strong>Performance Overhead:</strong> Mixing HTML and JavaScript can lead to larger HTML files and slower parsing.</li></ul></li></ul><h3 id="ease-of-debugging" tabindex="-1"><a class="header-anchor" href="#ease-of-debugging" aria-hidden="true">#</a> Ease of Debugging</h3><p><strong>External JavaScript File:</strong></p><ul><li>Pros: <ul><li><strong>Separation of Concerns:</strong> Keeps HTML and JavaScript separate, making both easier to read, maintain, and debug.</li><li><strong>Source Maps:</strong> Tools like source maps can help in debugging minified or transpiled code.</li></ul></li><li>Cons: <ul><li><strong>Context Switching:</strong> May require switching between files during debugging.</li></ul></li></ul><p><strong>Embedded JavaScript Code:</strong></p><ul><li>Pros: <ul><li><strong>Inline Context:</strong> Code is within the HTML file, making it easier to see the relationship between HTML and JavaScript.</li></ul></li><li>Cons: <ul><li><strong>Complexity:</strong> Can make the HTML file harder to read and maintain, especially for large scripts.</li></ul></li></ul><p><strong>Inline JavaScript:</strong></p><ul><li>Pros: <ul><li><strong>Immediate Context:</strong> Code is directly associated with the HTML element, making it clear what the code is affecting.</li></ul></li><li>Cons: <ul><li><strong>Scalability Issues:</strong> Can become unmanageable and hard to debug in larger applications.</li></ul></li></ul><h3 id="security" tabindex="-1"><a class="header-anchor" href="#security" aria-hidden="true">#</a> Security</h3><p><strong>External JavaScript File:</strong></p><ul><li>Pros: <ul><li><strong>Content Security Policy (CSP):</strong> Easier to enforce CSP rules to mitigate XSS attacks.</li><li><strong>Code Review:</strong> Easier to review and audit code in separate files.</li></ul></li><li>Cons: <ul><li><strong>External Dependencies:</strong> If hosted externally, could be a security risk if the external source is compromised.</li></ul></li></ul><p><strong>Embedded JavaScript Code:</strong></p><ul><li>Pros: <ul><li><strong>Same-Origin Policy:</strong> Code is served from the same origin, reducing certain risks.</li></ul></li><li>Cons: <ul><li><strong>XSS Vulnerability:</strong> More vulnerable to XSS attacks if not properly sanitized.</li></ul></li></ul><p><strong>Inline JavaScript:</strong></p><ul><li>Pros: <strong>Immediate Context:</strong> Code is directly tied to specific elements, making it clear what it affects.</li><li>Cons: <strong>High XSS Risk:</strong> Inline scripts are highly vulnerable to XSS attacks, making it harder to enforce CSP.</li></ul><h3 id="recommendations" tabindex="-1"><a class="header-anchor" href="#recommendations" aria-hidden="true">#</a> Recommendations</h3><ul><li><strong>Performance:</strong> Prefer external JavaScript files for better caching and parallel loading.</li><li><strong>Ease of Debugging:</strong> External JavaScript files are generally easier to debug due to separation of concerns and better tool support.</li><li><strong>Security:</strong> External JavaScript files are preferred for better CSP enforcement and reduced XSS risk.</li></ul><h2 id="content-security-policy-csp" tabindex="-1"><a class="header-anchor" href="#content-security-policy-csp" aria-hidden="true">#</a> Content Security Policy (CSP)</h2><ul><li>仅执行这些允许列表 - ED域中的脚本</li><li>忽略所有其他脚本: (including inline scripts and event-handling HTML attributes)</li><li>增加一层安全层（浏览器强制执行）以 <ul><li>有助于检测和减轻某些类型的攻击</li><li>特别是，跨站脚本（XSS）和数据注入</li></ul></li><li>You can configure your web server to turn it on.</li><li>You can also configure it within the <meta> element.</li></ul><h2 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h2><ul><li>Dynamic Typing - The type changes with its assigned value</li><li>Declaration is optional but highly recommended <ul><li>const: cannot reassign &amp; need initializer; (object assigned to it can )</li><li>The visible scope depends on how it is declared</li></ul></li><li>JavaScript中的变量作用域（C语言使用块级作用域）</li><li>如果习惯了块级作用域，可能会非常困惑！ <ul><li>在函数中使用var声明 - 仅限于该函数（函数作用域）</li><li>使用 let, const 在块中声明：块作用域（在花括号内）</li><li>声明不使用 var（或 let, const）- 全局变量，即 在 window 下</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">===</p><p>=== 将检查LHS和RHS是否为相同类型和值</p></div><p><strong>functions are objects that can be called</strong></p><p>7 Primitive data types:</p><ul><li>Boolean</li><li>null</li><li>undefined</li><li>Number (NaN: number value)</li><li>BigInt</li><li>String,</li><li>Symbol + Object</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2025/04/06/98d6f412314e3.png" alt="预览 2025-04-06 11.17.59.png" tabindex="0" loading="lazy"><figcaption>预览 2025-04-06 11.17.59.png</figcaption></figure><div class="hint-container tip"><p class="hint-container-title">Variables (Coercion)</p><ul><li>Converted to String for &quot;concatenation&quot;.</li><li>If you want JavaScript to parse it as Number, use Number()</li><li>What is the output of console. log(value2+value2+value1)? Operator Precedence.</li></ul></div><h2 id="functions" tabindex="-1"><a class="header-anchor" href="#functions" aria-hidden="true">#</a> Functions</h2><p>Function Declaration Approaches:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//Only parameter names are needed, no type info.</span>
<span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> param1 <span class="token operator">+</span> param2<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//Assign a function to a variable</span>
<span class="token keyword">var</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> param1 <span class="token operator">+</span> param2<span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token comment">//&quot;add&quot; a function to an object</span>
window<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">param1<span class="token punctuation">,</span> param2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> param1 <span class="token operator">+</span> param2<span class="token punctuation">;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>According to function scoping, the first two approaches can become local , while the last one is declaring a global function.</p><h3 id="anonymous-function" tabindex="-1"><a class="header-anchor" href="#anonymous-function" aria-hidden="true">#</a> Anonymous function</h3><p>are useful for event listeners (or when assigning a function to a variable):</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">param1</span><span class="token punctuation">)</span> <span class="token comment">// I have no name</span>
<span class="token punctuation">{</span> <span class="token comment">/* do something here, to be discussed later */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="arrow-functions" tabindex="-1"><a class="header-anchor" href="#arrow-functions" aria-hidden="true">#</a> Arrow Functions</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Traditional anonymous function</span>
<span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// Arrow function</span>
<span class="token keyword">const</span> <span class="token function-variable function">myFunc</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="nested-functions-ref" tabindex="-1"><a class="header-anchor" href="#nested-functions-ref" aria-hidden="true">#</a> Nested functions (Ref: , )</h3><ul><li>the inner function has full access to all variables/functions defined inside the outer function</li><li>the outer functon does not have access to variables/functions defined inside the inne function</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">sayHiBye</span><span class="token punctuation">(</span><span class="token parameter">firstName<span class="token punctuation">,</span> lastName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// helper nested function to use below</span>
<span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> firstName <span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span> lastName<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;Hello,&quot;</span> <span class="token operator">+</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&quot;Bye,&quot;</span> <span class="token operator">+</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
		sayHiBye<span class="token punctuation">.</span>f <span class="token operator">=</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">sayHiBye</span><span class="token punctuation">(</span><span class="token string">&quot;IEMS&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5718&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sayHiBye<span class="token punctuation">.</span>f
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>How to access the function or variable inside? &quot;Property&quot; or inner function.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> getCode <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> apiCode <span class="token operator">=</span> <span class="token string">&quot;0]Eal(eh&amp;2&quot;</span><span class="token punctuation">;</span> <span class="token comment">// A code we do not want outsiders to be able to modify…</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     <span class="token keyword">return</span> apiCode<span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;0]Eal(eh&amp;2&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="object-oriented-javascript" tabindex="-1"><a class="header-anchor" href="#object-oriented-javascript" aria-hidden="true">#</a> Object-Oriented Javascript</h2><p>Traditionally, object-oriented programming in JS is achieved via functions and prototypes</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">Person</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;Unnamed&#39;</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token punctuation">(</span>sex <span class="token operator">&amp;&amp;</span> sex <span class="token operator">==</span> <span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;F&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;M&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">getGender</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container info"><p class="hint-container-title">Introduced in ECMAScript 6 (ES6 or ES2015) in 2015</p><ul><li>Syntax sugar to make coding more convenient, but nothing new</li><li>Its core is still prototype</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">Person2</span> <span class="token punctuation">{</span>

  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> sex</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token operator">||</span> <span class="token string">&#39;Unnamed&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token punctuation">(</span>sex <span class="token operator">&amp;&amp;</span> sex <span class="token operator">==</span><span class="token string">&#39;F&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;F&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;M&#39;</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token function">setName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>gender<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person2</span><span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Female&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>How to tell if it is a public or private property?</p><p>Private properties get created by using a hash <code>#</code> prefix and cannot be legally referenced outside of the class.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token function">#privateMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// …</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The private identifier cannot be <code>#constructor</code>.</p></div><h2 id="questions" tabindex="-1"><a class="header-anchor" href="#questions" aria-hidden="true">#</a> Questions</h2><p>Which of the following lines(s) are incorrect, and why?</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- x href, not ref. --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://www.cuhk.edu.hk/<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>CUHK<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!-- ✔️ , / in the end is optional in H5 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../ierg/cuhk.png<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>

<span class="token comment">&lt;!-- ✔️ , put in head --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>styles.css<span class="token punctuation">&quot;</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> //Place in head or body?

<span class="token comment">&lt;!-- ✔️ , The closing tag for the &lt;a&gt; element is missing a slash. --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>#b<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>About Us<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>What will be the color for &quot;Hello&quot; and &quot;World&quot;?</p>`,68),p=[o];function i(c,l){return a(),s("div",null,p)}const d=n(e,[["render",i],["__file","js.html.vue"]]);export{d as default};
