import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as n,c as s,a as t,b as i,d as o,e as r}from"./app-3b7bc918.js";const d={},h=r('<h1 id="authentication-i" tabindex="-1"><a class="header-anchor" href="#authentication-i" aria-hidden="true">#</a> Authentication I</h1><ul><li>Purpose of Authentication: Binding an identity to a subject (user)</li><li>A user is often required to be authenticated when using computer systems</li></ul><p>How to achieve that?</p><ul><li>一个主体必须提供信息，使计算机系统能够确认其身份</li><li>What can a subject provide? <ul><li>What the subject knows</li><li>What the subject has</li><li>What the subject is</li></ul></li></ul><p>上述内容有时被称为认证中的因素「factors」</p><h2 id="authentication-bases" tabindex="-1"><a class="header-anchor" href="#authentication-bases" aria-hidden="true">#</a> Authentication Bases</h2><figure><img src="https://pic.hanjiaming.com.cn/2023/02/22/a4f8d5e39e344.png" alt="1677041811161.png" tabindex="0" loading="lazy"><figcaption>1677041811161.png</figcaption></figure><h2 id="evaluation-auth-system" tabindex="-1"><a class="header-anchor" href="#evaluation-auth-system" aria-hidden="true">#</a> Evaluation Auth System</h2><ul><li>一些认证系统可能没有100%的准确性 <ul><li>我们衡量 得到错误结果的可能性</li><li>不仅在认证系统中有用，而且在入侵检测系统、恶意软件检测系统、垃圾邮件等方面也有用。</li></ul></li></ul><p>False Positive &amp; False Negative</p><p>为了衡量一个认证系统的有效性</p><ul><li>False Acceptance Rate (FAR)「错误接受率」 <ul><li>接受不具备其声称身份的主体的概率</li><li>错误接受的数量与识别尝试的数量之比</li></ul></li><li>False Rejection Rate (FRR)「错误拒绝率」 <ul><li>认证尝试导致错误拒绝的比例</li><li>错误拒绝的数量与识别尝试的数量之比</li></ul></li></ul><div class="hint-container info"><p class="hint-container-title">Example: Biometric-based Authentication System</p><p>确定不同的生物识别特征和一个保存的参考特征的相似性的系统</p><figure><img src="https://pic.hanjiaming.com.cn/2023/02/22/d90e08ace87d3.png" alt="1677043212027.png" tabindex="0" loading="lazy"><figcaption>1677043212027.png</figcaption></figure><p>生物识别特征的测量以及特征本身都会受到统计波动的影响。因此，每个生物特征识别系统都有一个内置的接受阈值。</p><ul><li>给定的 FAR 和 FRR 值总是属于同一个阈值</li><li>随着阈值的增加（即，所需的 Levenshtein 距离变小），FAR 降低但 FRR 增加。</li><li>存在一个阈值，其中 FAR=FRR，在这种情况下，rate 被称为 Equal Error Rate（EER）「相等错误率」。</li></ul><p>根据不同的应用，FAR 或 FRR 可能更重要，因此是需要优化的参数。</p></div><h2 id="password-based-auth" tabindex="-1"><a class="header-anchor" href="#password-based-auth" aria-hidden="true">#</a> Password-based Auth</h2><p>一种简单而常见的用户认证方法。很容易实现，但许多人把它描述为最糟糕的方法之一。</p><h3 id="threats" tabindex="-1"><a class="header-anchor" href="#threats" aria-hidden="true">#</a> Threats</h3><ul><li>Password guessing: 试图猜测网上的密码是很有可能的。</li><li>Password exposure: An “eavesdropper” may see the password when it is typed</li><li>Trojan login program: 这些程序会生成看似真实的登录屏幕</li><li>Poor passwords: 即使密码的长度合适，也可能是字典中的一个词。 <ul><li>Various attacks (online/offline) : Dictionary attack, Brute force attack, Hybrid attacks</li></ul></li></ul><h4 id="dictionary-attack" tabindex="-1"><a class="header-anchor" href="#dictionary-attack" aria-hidden="true">#</a> Dictionary attack</h4><ul><li>常见词汇的字典可以作为成套的密码来尝试。</li><li>攻击者通过字典中的单词，尝试将它们作为密码。</li><li>这种字典攻击可能不会成功，但速度相当快。</li></ul><div class="hint-container tip"><p class="hint-container-title">Tailored Dictionary Attacks 「定制字典攻击」</p><ul><li>有可能比完整的英语词典更具体，或从其他来源有针对性地进行说明</li><li>用户可能使用更多的个人信息作为密码</li></ul></div><h4 id="brute-force" tabindex="-1"><a class="header-anchor" href="#brute-force" aria-hidden="true">#</a> Brute Force</h4><ul><li>所有的密码系统都很容易被别人猜中正确的密码。</li><li>蛮力攻击包括尝试每一个可能的密码，以及更广泛的每一个可能的解决方案</li><li>与字典攻击不同，暴力攻击总是有效的 <ul><li>重要的因素是，这种猜测在密码的有效期内是不可能的。</li><li>Tips: Changing passwords periodically</li></ul></li></ul><div class="hint-container tip"><p class="hint-container-title">Choosing Secure Passwords</p><p>绝对测试正确密码的时间（以秒为单位）由 N/R 定义，其中</p><ul><li>N = 可能的密码集的大小</li><li>R = 一秒钟内可以测试的密码数</li></ul><p>预期时间（或相关随机变量的预期值）= 0.5 * N/R</p><img src="https://pic.hanjiaming.com.cn/2023/02/22/d5919721a7285.png" alt="1677044207872.png" style="zoom:40%;"></div><h4 id="hybrid-attacks" tabindex="-1"><a class="header-anchor" href="#hybrid-attacks" aria-hidden="true">#</a> Hybrid Attacks</h4><p>基本上，我们使用字典作为基础，但对每个测试的单词采取变体。</p><p>We might replace each lower case “L” with 1, or “O” with 0, and so on</p><p>混合攻击介于字典攻击和暴力攻击之间，在消耗的时间、尝试的密码数量以及因此成功的机会方面。</p><h3 id="password-entropy" tabindex="-1"><a class="header-anchor" href="#password-entropy" aria-hidden="true">#</a> Password Entropy</h3><p>熵「Entropy」与信息内容、随机性和不确定性有关：The uncertainty that someone thinks about your password. 熵以 bit 为单位</p><p>For example,</p><ul><li>If there are two equally likely options, we have 1 bit of entropy</li><li>If there are 4 equally options, we have 2 bits of entropy</li><li>For N equally likely options, the entropy is log<sub>2</sub>N</li></ul><p>所以，我们需要一个大熵的密码</p><img src="https://pic.hanjiaming.com.cn/2023/02/22/4830bb92af4fa.png" alt="1677044837133.png" style="zoom:40%;"><h3 id="protective-mechanisms" tabindex="-1"><a class="header-anchor" href="#protective-mechanisms" aria-hidden="true">#</a> Protective Mechanisms</h3><ul><li>追踪错误的密码尝试 <ul><li>限制每次连接的猜测次数</li><li>当超过一个阈值时，锁定账户</li><li>发出警报并追踪入侵者</li></ul></li><li>Process the password slowly, say, 5 seconds: 这对合法用户来说没有什么区别，但它可以减缓任何攻击企图。</li></ul><img src="https://pic.hanjiaming.com.cn/2023/02/22/160b0be1f0c2c.png" alt="1677045288873.png" style="zoom:40%;"><div class="hint-container info"><p class="hint-container-title">Online vs. Offline</p><p>主要区别在于 &quot;猜测 &quot;的数量是否受到限制。</p><ul><li>如果你能不受限制地猜测，可能值得一试，至少是字典攻击</li><li>如果你能猜到限制，另一种方法，某种形式的社会工程，可能更有用。 <ul><li>To trick someone into revealing a password for a system</li><li>Further Reading: Social Engineering: The Art of Human Hacking</li></ul></li></ul></div><div class="hint-container tip"><p class="hint-container-title">Brute Force and the GPU</p><p>图形处理单元已被用于大幅提高加密暴力攻击的速度，专为大规模并行操作而设计。</p></div><ul><li>系统中的密码列表必须得到很好的保护 -&gt; 备份系统时要注意</li><li>用户密码不应以明文形式存储, <ul><li>例如，密码的哈希值被存储在UNIX中</li><li>仍然容易受到离线密码猜测的影响，所以文件必须受到物理保护</li></ul></li></ul><h2 id="how-should-store-psw" tabindex="-1"><a class="header-anchor" href="#how-should-store-psw" aria-hidden="true">#</a> How should store PSW</h2><div class="hint-container tip"><p class="hint-container-title">Hash Functions Revisited</p><ul><li>Hash: 一个数据块的 &quot;固定长度指纹&quot;，其长度可以是任意的。也称为消息摘要</li><li>Hash function: 将数据从任意长度转化为固定的短长度</li><li>Well known hash functions: MD5 and SHA</li></ul></div><p>How should we store password in a system?</p><p>A better approach: 储存的是密码的哈希值</p><table><thead><tr><th>userID</th><th>Password</th></tr></thead><tbody><tr><td>Alice</td><td>H(pw_Alice)</td></tr><tr><td>Bob</td><td>H(pw_Bob)</td></tr><tr><td>Oscar</td><td>H(pw_Oscar)</td></tr></tbody></table><h3 id="password-salt" tabindex="-1"><a class="header-anchor" href="#password-salt" aria-hidden="true">#</a> Password Salt</h3><p>In UNIX, a salted password is used for hashing</p><ul><li><strong>“salt”是为计算用户密码的哈希值而生成的随机数</strong></li><li>盐也被储存在某个地方，<strong>并假定它不像密码那样保密。</strong></li></ul><table><thead><tr><th>userID</th><th>Salt</th><th>Password hash</th></tr></thead><tbody><tr><td>Alice</td><td>3487</td><td>H(3487||pw_Alice)</td></tr><tr><td>Bob</td><td>8254</td><td>H(8254||pw_Bob)</td></tr><tr><td>Oscar</td><td>1098</td><td>H(1098||pw_Oscar)</td></tr></tbody></table><p>即使盐是以明文存储的，也比直接存储密码的哈希值要好。</p><ul><li>减缓攻击者的速度</li><li>哈希一次并检查所有用户的哈希值 vs 一次只检查一个用户的哈希值</li></ul><p>哈希函数的单向属性：换句话说，没有办法 &quot;解密 &quot;并取回原始密码。</p><h3 id="case-study-–-unix" tabindex="-1"><a class="header-anchor" href="#case-study-–-unix" aria-hidden="true">#</a> Case Study – Unix</h3><ul><li>早期版本的 UNIX 将用户标识、散列密码、默认 shell 等存储在一个文件中 -&gt; <code> /etc/passwd</code></li><li>新版本的UNIX将 <code>passwd</code> 文件分成了两个</li><li><code>/etc/passwd</code>（除了密码的哈希值以外的所有内容）</li><li><code>/etc/shadow</code>（用户名和密码的哈希值） <ul><li>这个文件是受保护的，只有root用户才能访问</li></ul></li></ul><p>不是直接存储密码</p><ul><li>通过使用密码（前八个字符作为密钥），使用数据加密标准（DES）对64个零位的数据块进行加密，产生一个值。</li><li>然后用用户的密码对产生的64位密码块再次进行加密；该过程共重复25次。</li><li>最后的64位使用Base64编码解压成11个可打印字符的字符串 <ul><li>每个可打印的字符6比特</li><li>最后4位是附加的零</li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2023/02/22/7652cc883fb54.png" alt="1677047250226.png" style="zoom:40%;"><p>为了提高安全性，使用了一种盐</p><ul><li>一个12位的数字，在0和4,095之间</li><li>盐被转换为两个字符的字符串，并在 &quot;加密 &quot;的密码中预加。</li></ul>',58),c=t("thead",null,[t("tr",null,[t("th",null,"Password"),t("th",null,"Salt"),t("th",null,"Encrypted password")])],-1),u=t("tr",null,[t("td",null,"nutmeg"),t("td",null,"Mi"),t("td",null,"MiqkFWCm1fNJI")],-1),p=t("td",null,"ellen1",-1),b=t("td",null,"ri",-1),f={href:"http://ri79KNd7V6.Sk",target:"_blank",rel:"noopener noreferrer"},g=t("tr",null,[t("td",null,"Sharon"),t("td",null,"./"),t("td",null,"./2aN7ysff3qM")],-1),m=t("tr",null,[t("td",null,"norahs"),t("td",null,"am"),t("td",null,"amfIADT2iqjAf")],-1),w=t("tr",null,[t("td",null,"norahs"),t("td",null,"7a"),t("td",null,"7azfT5tIdyh0I")],-1),y=t("p",null,"Attack approaches:",-1),_=t("ul",null,[t("li",null,[i("通过从"),t("code",null,"/etc/passwd"),i('获取用户ID进行 "在线 "密码猜测攻击')]),t("li",null,"获取root权限复制shadow文件发起离线字典攻击"),t("li",null,[i("Rainbow Table Attack "),t("ul",null,[t("li",null,"蛮力攻击的计算量很大"),t("li",null,"这种方法采用预先计算的查找表来找出哈希值（密码或其等价物）的前像。"),t("li",null,"内存密集型")])])],-1);function v(k,x){const l=e("ExternalLinkIcon");return n(),s("div",null,[h,t("table",null,[c,t("tbody",null,[u,t("tr",null,[p,b,t("td",null,[t("a",f,[i("ri79KNd7V6.Sk"),o(l)])])]),g,m,w])]),y,_])}const F=a(d,[["render",v],["__file","authentication.html.vue"]]);export{F as default};
