import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,e}from"./app-06102085.js";const t={},p=e(`<h1 id="基础运算" tabindex="-1"><a class="header-anchor" href="#基础运算" aria-hidden="true">#</a> 基础运算</h1><h2 id="术语" tabindex="-1"><a class="header-anchor" href="#术语" aria-hidden="true">#</a> 术语</h2><p>在正式开始前，我们先简单浏览一下常用术语。</p><ul><li><p><strong>运算元</strong> —— 运算符应用的对象。比如说乘法运算 <code>5 * 2</code>，有两个运算元：左运算元 <code>5</code> 和右运算元 <code>2</code>。有时候人们也称其为“参数”而不是“运算元”。</p></li><li><p>如果一个运算符对应的只有一个运算元，那么它是 <strong>一元运算符</strong>。比如说一元负号运算符（unary negation）<code>-</code>，它的作用是对数字进行正负转换：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span> <span class="token comment">// 符号反转运算符</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果一个运算符拥有两个运算元，那么它是 <strong>二元运算符</strong>。减号还存在二元运算符形式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span> y <span class="token operator">-</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2，二元运算符减号做减运算</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="数学" tabindex="-1"><a class="header-anchor" href="#数学" aria-hidden="true">#</a> 数学</h2><p>支持以下数学运算：</p><ul><li>加法 <code>+</code>,</li><li>减法 <code>-</code>,</li><li>乘法 <code>*</code>,</li><li>除法 <code>/</code>,</li><li>取余 <code>%</code>,</li><li>求幂 <code>**</code></li></ul><h2 id="类型转换" tabindex="-1"><a class="header-anchor" href="#类型转换" aria-hidden="true">#</a> 类型转换</h2><h3 id="用二元运算符-连接字符串" tabindex="-1"><a class="header-anchor" href="#用二元运算符-连接字符串" aria-hidden="true">#</a> 用二元运算符 + 连接字符串</h3><p>如果加号 <code>+</code> 被应用于字符串，它将合并（连接）各个字符串：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;my&quot;</span> <span class="token operator">+</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mystring</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：只要任意一个运算元是字符串，那么另一个运算元也将被转化为字符串。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;12&quot;</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;21&quot;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">&#39;1&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;41&quot;，不是 &quot;221&quot;</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;122&quot;，不是 &quot;14&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是减法和除法运算的示例：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">6</span> <span class="token operator">-</span> <span class="token string">&#39;2&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4，将 &#39;2&#39; 转换为数字</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;6&#39;</span> <span class="token operator">/</span> <span class="token string">&#39;2&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3，将两个运算元都转换为数字</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数字转化-一元运算符" tabindex="-1"><a class="header-anchor" href="#数字转化-一元运算符" aria-hidden="true">#</a> 数字转化，一元运算符 +</h3><p>还有一种 <code>+</code>是一元运算符。如果运算元不是数字，加号 <code>+</code> 则会将其转化为数字。</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>// 转化非数字
alert( +true ); // 1
alert( +&quot;&quot; );   // 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>二元运算符加号会把它们合并成字符串：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> apples <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> oranges <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> apples <span class="token operator">+</span> oranges <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;23&quot;，二元运算符加号合并字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们想把它们当做数字对待，我们需要转化它们，然后再求和：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> apples <span class="token operator">=</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> oranges <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 在二元运算符加号起作用之前，所有的值都被转化为了数字</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">+</span>apples <span class="token operator">+</span> <span class="token operator">+</span>oranges <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>

<span class="token comment">// 更长的写法 alert( Number(apples) + Number(oranges) ); // 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>一元运算符先于二元运算符作用于运算元</strong></p><h2 id="赋值运算符" tabindex="-1"><a class="header-anchor" href="#赋值运算符" aria-hidden="true">#</a> 赋值运算符</h2><p>我们知道赋值符号 <code>=</code> 也是一个运算符。从优先级表中可以看到它的优先级非常低，只有 <code>2</code>。</p><p>这也是为什么，当我们赋值时，比如 <code>x = 2 * 2 + 1</code>，所有的计算先执行，然后 <code>=</code> 才执行，将计算结果存储到 <code>x</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>赋值 = 返回一个值了，语句 <code>x = value</code> 将值 <code>value</code> 写入 <code>x</code> <strong>然后返回 x</strong>。</p><p>下面是一个在复杂语句中使用赋值的例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>
<span class="token function">alert</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面这个例子，<code>(a = b + 1)</code> 的结果是赋给 <code>a</code> 的值（也就是 <code>3</code>）。然后该值被用于进一步的运算。</p><p>不过，请不要写这样的代码。这样的技巧绝对不会使代码变得更清晰或可读。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">;</span>

a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>

<span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token function">alert</span><span class="token punctuation">(</span> b <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
<span class="token function">alert</span><span class="token punctuation">(</span> c <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="运算符的优先级" tabindex="-1"><a class="header-anchor" href="#运算符的优先级" aria-hidden="true">#</a> 运算符的优先级</h2><p>如果一个表达式拥有超过一个运算符，执行的顺序则由 <strong>优先级</strong> 决定。换句话说，所有的运算符中都隐含着优先级顺序。</p><p>在 JavaScript 中有众多运算符。每个运算符都有对应的优先级数字。数字越大，越先执行。如果优先级相同，则<strong>按照由左至右的顺序执行</strong>。</p><p>记住一元运算符优先级高于二元运算符</p><table><thead><tr><th>优先级</th><th>名称</th><th>符号</th></tr></thead><tbody><tr><td>...</td><td>...</td><td>...</td></tr><tr><td>15</td><td>一元加号</td><td><code>+</code></td></tr><tr><td>15</td><td>一元负号</td><td><code>-</code></td></tr><tr><td>14</td><td>求幂</td><td><code>**</code></td></tr><tr><td>13</td><td>乘号</td><td><code>*</code></td></tr><tr><td>13</td><td>除号</td><td><code>/</code></td></tr><tr><td>12</td><td>加号</td><td><code>+</code></td></tr><tr><td>12</td><td>减号</td><td><code>-</code></td></tr><tr><td>...</td><td>...</td><td>...</td></tr><tr><td>2</td><td>赋值符</td><td><code>=</code></td></tr><tr><td>...</td><td>...</td><td>...</td></tr></tbody></table><h2 id="原地修改" tabindex="-1"><a class="header-anchor" href="#原地修改" aria-hidden="true">#</a> 原地修改</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
n <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 现在 n = 7（等同于 n = n + 5）</span>
n <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 现在 n = 14（等同于 n = n * 2）</span>

<span class="token function">alert</span><span class="token punctuation">(</span> n <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 14</span>

<span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
counter<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment">// 和 counter = counter + 1 效果一样，但是更简洁</span>
<span class="token function">alert</span><span class="token punctuation">(</span> counter <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>

counter <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token operator">--</span>counter<span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="位运算符" tabindex="-1"><a class="header-anchor" href="#位运算符" aria-hidden="true">#</a> 位运算符</h2><p>位运算符把运算元当做 32 位整数，并在它们的二进制表现形式上操作。</p><p>这些运算符不是 JavaScript 特有的。大部分的编程语言都支持这些运算符。</p><p>下面是位运算符：</p><ul><li>按位与 ( <code>&amp;</code> )</li><li>按位或 ( <code>|</code> )</li><li>按位异或 ( <code>^</code> )</li><li>按位非 ( <code>~</code> )</li><li>左移 ( <code>&lt;&lt;</code> )</li><li>右移 ( <code>&gt;&gt;</code> )</li><li>无符号右移 ( <code>&gt;&gt;&gt;</code> )</li></ul><h2 id="逻辑运算符" tabindex="-1"><a class="header-anchor" href="#逻辑运算符" aria-hidden="true">#</a> 逻辑运算符</h2><ul><li><code>||</code>（或）</li><li><code>&amp;&amp;</code>（与）</li><li><code>!</code>（非）</li><li><code>??</code>（空值合并运算符）</li></ul><p>这些运算符和c++一样，存在短路的情况。</p><p>我们需要注意的是，在逻辑运算符中的返回值。js中的逻辑运算不一定返回 ture或者false，还会返回其它类型。</p><h3 id="或运算寻找第一个真值" tabindex="-1"><a class="header-anchor" href="#或运算寻找第一个真值" aria-hidden="true">#</a> 或运算寻找第一个真值</h3><p>给定几个参与或运算的值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> value1 <span class="token operator">||</span> value2 <span class="token operator">||</span> value3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>或运算符 <code>||</code> 做了如下的事情：</p><ul><li>从左到右依次计算操作数。</li><li>处理每一个操作数时，都将其转化为布尔值。如果结果是 <code>true</code>，就停止计算，返回这个操作数的<strong>初始值</strong>。</li><li>如果所有的操作数都被计算过（也就是，转换结果都是 <code>false</code>），则返回最后一个<strong>操作数</strong>。</li></ul><p><strong>返回的值是操作数的初始形式，不会做布尔转换。</strong></p><p>换句话说，一个或运算 <code>||</code> 的链，将返回第一个真值，如果不存在真值，就返回该链的最后一个值。</p><p>例如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1（1 是真值）</span>

<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1（1 是第一个真值）</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1（第一个真值）</span>

<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0（都是假值，返回最后一个值）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 短路用法</span>
<span class="token keyword">let</span> firstName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> lastName <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> nickName <span class="token operator">=</span> <span class="token string">&quot;SuperCoder&quot;</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span> firstName <span class="token operator">||</span> lastName <span class="token operator">||</span> nickName <span class="token operator">||</span> <span class="token string">&quot;Anonymous&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// SuperCoder </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="与运算寻找第一个假值" tabindex="-1"><a class="header-anchor" href="#与运算寻找第一个假值" aria-hidden="true">#</a> 与运算寻找第一个假值</h3><p>也存在短路</p><h3 id="非" tabindex="-1"><a class="header-anchor" href="#非" aria-hidden="true">#</a> <code>!</code>非</h3><p>两个非运算 <code>!!</code> 有时候用来将某个值转化为布尔类型：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token string">&quot;non-empty string&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token keyword">null</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="空值合并运算符" tabindex="-1"><a class="header-anchor" href="#空值合并运算符" aria-hidden="true">#</a> 空值合并运算符</h3><p>This is a recent addition to the language. Old browsers may need polyfills.</p><p>由于它对待 <code>null</code> 和 <code>undefined</code> 的方式类似，所以在本文中我们将使用一个特殊的术语对其进行表示。为简洁起见，当一个值既不是 <code>null</code> 也不是 <code>undefined</code> 时，我们将其称为“已定义的（defined）”。</p><p><code>a ?? b</code> 的结果是：</p><ul><li>如果 <code>a</code> 是已定义的，则结果为 <code>a</code>，</li><li>如果 <code>a</code> 不是已定义的，则结果为 <code>b</code>。</li></ul><p>换句话说，如果第一个参数不是 <code>null/undefined</code>，则 <code>??</code> 返回第一个参数。否则，返回第二个参数。</p><p>我们可以使用我们已知的运算符重写 <code>result = a ?? b</code>，像这样：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>result <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用法案例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> user<span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span>user <span class="token operator">??</span> <span class="token string">&quot;匿名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 匿名（user 未定义）</span>

<span class="token comment">// 当 height 的值为 null 或 undefined 时，将 height 的值设置为 100</span>
height <span class="token operator">=</span> height <span class="token operator">??</span> <span class="token number">100</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>||</code> 返回第一个 <strong>真</strong> 值。</li><li><code>??</code> 返回第一个 <strong>已定义的</strong> 值。</li></ul><p>换句话说，<code>||</code> 无法区分 <code>false</code>、<code>0</code>、空字符串 <code>&quot;&quot;</code> 和 <code>null/undefined</code>。</p><p>出于安全原因，JavaScript 禁止将 <code>??</code> 运算符与 <code>&amp;&amp;</code> 和 <code>||</code> 运算符一起使用，除非使用括号明确指定了优先级。</p><h2 id="逗号运算符" tabindex="-1"><a class="header-anchor" href="#逗号运算符" aria-hidden="true">#</a> 逗号运算符</h2><p>逗号运算符 <code>,</code> 是最少见最不常使用的运算符之一。有时候它会被用来写更简短的代码，因此为了能够理解代码，我们需要了解它。</p><p>逗号运算符能让我们处理多个语句，使用 <code>,</code> 将它们分开。<strong>每个语句都运行了，但是只有最后的语句的结果会被返回</strong>。</p><p>举个例子：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">alert</span><span class="token punctuation">(</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 7（3 + 4 的结果）</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是通常它并不能提升代码的可读性，使用它之前，我们要想清楚。</p><h2 id="值的比较" tabindex="-1"><a class="header-anchor" href="#值的比较" aria-hidden="true">#</a> 值的比较</h2><ul><li>相等性检查 <code>==</code> , 不会发生数字和null之间的转换</li><li>严格相等性检查 <code>===</code> ，不会发生转换</li><li>普通比较符 <code>&gt; &lt; &gt;= &lt;=</code>，会发生转换</li></ul><h3 id="常规比较" tabindex="-1"><a class="header-anchor" href="#常规比较" aria-hidden="true">#</a> 常规比较</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true（正确）</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false（错误）</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true（正确）</span>

<span class="token comment">// string 也可比较，字符串是按 Unicode 编码顺序个进行比较的。</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Z&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;A&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Glow&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;Glee&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;Bee&#39;</span> <span class="token operator">&gt;</span> <span class="token string">&#39;Be&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当对不同类型的值进行比较时，JavaScript 会首先将其转化为数字（number）再判定大小。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;2&#39;</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，字符串 &#39;2&#39; 会被转化为数字 2</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token string">&#39;01&#39;</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true，字符串 &#39;01&#39; 会被转化为数字 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="严格相等" tabindex="-1"><a class="header-anchor" href="#严格相等" aria-hidden="true">#</a> 严格相等</h3><p>普通的相等性检查 <code>==</code> 存在一个问题，它不能区分出 <code>0</code> 和 <code>false</code>, 也同样无法区分空字符串和 <code>false</code></p><p>**严格相等运算符 <code>===</code> 在进行比较时不会做任何的类型转换。**换句话说，如果 <code>a</code> 和 <code>b</code> 属于不同的数据类型，那么 <code>a === b</code> 不会做任何的类型转换而立刻返回 <code>false</code>。</p><h3 id="对-null-和-undefined-进行比较" tabindex="-1"><a class="header-anchor" href="#对-null-和-undefined-进行比较" aria-hidden="true">#</a> 对 null 和 undefined 进行比较</h3><p>null/undefined 会被转化为数字：null 被转化为 0，undefined 被转化为 NaN。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true, JavaScript 存在一个特殊的规则，会判定它们非严格下相等。</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="null-vs-0" tabindex="-1"><a class="header-anchor" href="#null-vs-0" aria-hidden="true">#</a> null vs 0</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 进行值的比较时，\`null\` 会被转化为数字，因此它被转化为了 0</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// (1) false</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (2) false</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">null</span> <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// (3) true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相等性检查 <code>==</code> 和普通比较符 <code>&gt; &lt; &gt;= &lt;=</code> 的代码逻辑是相互独立的。</p><p>这就是为什么（3）中 <code>null &gt;= 0</code> 返回值是 true，（1）中 <code>null &gt; 0</code> 返回值是 false。</p><h3 id="undefined" tabindex="-1"><a class="header-anchor" href="#undefined" aria-hidden="true">#</a> undefined</h3><p><code>undefined</code> 不应该被与其他值进行比较：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (1)</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (2)</span>
<span class="token function">alert</span><span class="token punctuation">(</span> <span class="token keyword">undefined</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false (3)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原因如下：</p><ul><li><code>(1)</code> 和 <code>(2)</code> 都返回 <code>false</code> 是因为 <code>undefined</code> 在比较中被转换为了 <code>NaN</code>，而 <code>NaN</code> 是一个特殊的数值型值，它与任何值进行比较都会返回 <code>false</code>。</li><li><code>(3)</code> 返回 <code>false</code> 是因为这是一个相等性检查，而 <code>undefined</code> 只与 <code>null</code> 相等，不会与其他值相等。</li></ul><h3 id="避免问题" tabindex="-1"><a class="header-anchor" href="#避免问题" aria-hidden="true">#</a> 避免问题</h3><p>我们为何要研究上述示例？我们需要时刻记得这些古怪的规则吗？不，其实不需要。虽然随着代码写得越来越多，我们对这些规则也都会烂熟于胸，但是我们需要更为可靠的方法来避免潜在的问题：</p><ul><li>除了严格相等 <code>===</code> 外，其他但凡是有 <code>undefined/null</code> 参与的比较，我们都需要格外小心。</li><li>除非你非常清楚自己在做什么，否则永远不要使用 <code>&gt;= &gt; &lt; &lt;=</code> 去比较一个可能为 <code>null/undefined</code> 的变量。对于取值可能是 <code>null/undefined</code> 的变量，请按需要分别检查它的取值情况。</li></ul>`,107),o=[p];function c(l,i){return s(),a("div",null,o)}const u=n(t,[["render",c],["__file","operator.html.vue"]]);export{u as default};
