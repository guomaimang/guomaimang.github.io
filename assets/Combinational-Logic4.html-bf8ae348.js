import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as a,e as i}from"./app-3e4b528e.js";const n={},s=i('<h1 id="combinational-logic-4" tabindex="-1"><a class="header-anchor" href="#combinational-logic-4" aria-hidden="true">#</a> Combinational Logic 4</h1><h2 id="finite-state-machine-fsm" tabindex="-1"><a class="header-anchor" href="#finite-state-machine-fsm" aria-hidden="true">#</a> Finite State Machine (FSM)</h2><h3 id="example-3-bit-synchronous-counter" tabindex="-1"><a class="header-anchor" href="#example-3-bit-synchronous-counter" aria-hidden="true">#</a> Example：3-bit Synchronous Counter</h3><ul><li>The counter will count through 000, 001, … , 111, then get back to 000</li><li>Each count (e.g., 001) is a <strong>state</strong> of the counter (machine)</li><li>The number of possible states is <strong>finite</strong></li></ul><p>This 3-bit Synchronous Counter is an example of <strong>Finite State Machine</strong></p><h3 id="concept" tabindex="-1"><a class="header-anchor" href="#concept" aria-hidden="true">#</a> Concept</h3><p><strong>FSM is an abstract model to describe real-world systems</strong></p><ul><li>It uses states to represent the situations that the system is in</li><li>It specifies「指定」 how the states of the system would change based on the external input, and how the system would produce external output accordingly 「它指定了系统状态如何根据外部输入进行更改，以及系统如何相应地产生外部输出」 <ul><li>The 3-bit Synchronous Counter is a special case – it does not have external input and output「3位同步计数器是一种特殊情况–它没有外部输入和输出」</li><li>However, the 3-bit Synchronous Counter did「确实」 demonstrate「演示」 an essential「重要」 part of FSM – the memory component to store the state「但是，3位同步计数器确实演示了FSM的重要部分–存储状态的内存组件」</li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/03/4981a016aed40.png" alt="image.png" title="image.png"><h3 id="formal-model-of-fsm" tabindex="-1"><a class="header-anchor" href="#formal-model-of-fsm" aria-hidden="true">#</a> Formal Model of FSM</h3><p>FSM = (States, Inputs, Outputs, State Transition Function)</p><p>FSM = ( S, I, O, π)</p><ul><li>S: the finite set of states</li><li>I: the finite set of inputs</li><li>O: the finite set of outputs</li><li>π: state transition function: define the relations among input, output, current state, next state「π：状态转换函数：定义输入，输出，当前状态，下一状态之间的关系」</li></ul><p>Two important relations for FSM</p><ul><li>Next state = external input + current state (i.e., the next state depends on the current state and the external input)</li><li>External output = external input + current state (note: not exactly as this; detailed later)</li></ul><p>There are Two Sub-Models: Mealy Machine vs. Moore Machine</p><h4 id="mealy-machine" tabindex="-1"><a class="header-anchor" href="#mealy-machine" aria-hidden="true">#</a> Mealy Machine</h4><img src="https://pic.hanjiaming.com.cn/2021/04/03/3c102cfca43c9.png" alt="image.png" title="image.png"><p>注：即输出结合input后再输出</p><h4 id="moore-machine" tabindex="-1"><a class="header-anchor" href="#moore-machine" aria-hidden="true">#</a> Moore Machine</h4><img src="https://pic.hanjiaming.com.cn/2021/04/03/d273b8b4c9ab2.png" alt="image.png" title="image.png"><p>注：即结合input前输出</p><ul><li>combinational logic: relates the current state, external input and output, next state</li><li>registers——memory compoennt: store the state of the machine</li></ul><h3 id="represent" tabindex="-1"><a class="header-anchor" href="#represent" aria-hidden="true">#</a> Represent</h3><p>How to Represent FSM？There are two basic approaches</p><p>Key: represent the relations among current state, input and next state, output &amp; Know how to transform between state diagram and state table</p><ul><li>State diagram</li><li>State table</li></ul><h4 id="state-diagram" tabindex="-1"><a class="header-anchor" href="#state-diagram" aria-hidden="true">#</a> State Diagram</h4><ul><li>Circles: represent states <ul><li>Labelled with「使用...标记」 S_k to denote「表示」 the state (or a binary encoding)「标记为S _ k表示状态（或二进制编码）」</li></ul></li><li>Directed arcs「有向弧」: represent the transitions between states <ul><li>Labelled with input/output for that state transition「标记有该状态转换的输入/输出」</li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/03/2c96d1f88b45c.png" alt="image.png" title="image.png"><p>Two circles: initial states</p><p>Example: the current state is S_k, given an external input a, the state will transit to the next state S_j, and the external output is p</p><p>Encoding of states: we ususally use binary numbers to encode the states; for example, if there are four states: S_0 (00), S_1 (01), S_2(10), and S_3(11).</p><p>注：上图表示：在Sk状态，如果输入a，则会输出p，状态变成Sj。b/q同理。</p><p>Mealy machine and Moore machine can be labelled differently using State Diagram</p><ul><li>Mealy machine: label directed arcs with input/output for that state transition</li><li>Moore machine: since output depends only on state, we can label directed arcs with input for that state transition, and label state circles with S_k/output</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/03/c1ece124b719f.png" alt="image.png" title="image.png"><h5 id="restrictions" tabindex="-1"><a class="header-anchor" href="#restrictions" aria-hidden="true">#</a> restrictions</h5><p>Some restrictions on state diagram</p><ul><li>Time is discretized「离散化」: use clock signal to control the timming of the transitioning of states (synchronous!) -- we usually use time t and t+1 to denote the timing for the current state and next state「时间离散化：使用时钟信号控制状态转换的时间（同步！）-我们通常使用时间t和t + 1表示当前状态和下一个状态的时序」</li><li>FSM can only be in one state at a time -- therefore, only in one state (or one circle) at a time「FSM一次只能处于一种状态-因此，一次只能处于一种状态（或一个圆圈）」</li></ul><p>State diagram is a clear visualization of FSM; but it is not that convinient for computation – we use an alternative, which is state table</p><h4 id="state-table" tabindex="-1"><a class="header-anchor" href="#state-table" aria-hidden="true">#</a> State Table</h4><img src="https://pic.hanjiaming.com.cn/2021/04/03/f736420397156.png" alt="image.png" title="image.png"><img src="https://pic.hanjiaming.com.cn/2021/04/03/4a805376f8579.png" alt="image.png" title="image.png"><h5 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h5><img src="https://pic.hanjiaming.com.cn/2021/04/03/926b01dfe54b7.png" alt="image.png" title="image.png"><p>We know these tools to describe it, but what&#39;s the analytical task?</p><h3 id="analytical-task" tabindex="-1"><a class="header-anchor" href="#analytical-task" aria-hidden="true">#</a> Analytical Task</h3><p>The Essential Analytical Task for FSM is</p><ul><li>Given state diagram/state table, derive the functions that specify the relations among next state, output, current state, and input「给定状态图/状态表，导出指定下一个状态，输出，当前状态和输入之间的关系的函数」 <ul><li>Next state = f (current state, input)</li><li>Output = g (current state, input)</li></ul></li><li>The design of sequential circuits relies on the above two functions</li></ul><h4 id="example-pattern-detector" tabindex="-1"><a class="header-anchor" href="#example-pattern-detector" aria-hidden="true">#</a> Example: Pattern Detector</h4><p>Design a machine that will detect a specific「特定的」 bit pattern「设计一台将检测特定位模式的机器」</p><ul><li>It receives bit stream</li><li>It has one output Z: if the bit pattern appears in the bit stream, the output Z = 1; otherwise, Z = 0「它具有一个输出Z：如果位模式出现在位流中，则输出Z = 1；否则，输出Z = 1。否则，Z = 0」</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/03/f4ed623005136.png" alt="image.png" title="image.png"><h5 id="modelling-the-problem" tabindex="-1"><a class="header-anchor" href="#modelling-the-problem" aria-hidden="true">#</a> Modelling the Problem</h5><p>Modelling the Problem using FSM</p><p>We use the following states to model the possible situations that the machine is in (detect pattern 1101)</p><ul><li>S0: the initial state</li><li>S1: the first desired symbol (1) is detected</li><li>S2: the desired sub-pattern 11 is detected</li><li>S3: the desired sub-pattern 110 is detected</li></ul><p>Intuition: we want to record the situations that will lead to the target pattern 1101</p><h5 id="states-and-states-transitions" tabindex="-1"><a class="header-anchor" href="#states-and-states-transitions" aria-hidden="true">#</a> States and States Transitions</h5><p>States and States Transitions (pattern 1101)</p><img src="https://pic.hanjiaming.com.cn/2021/04/03/113ad305afeb2.png" alt="image.png" title="image.png"><p>Worth to note:</p><p>(1) the transitions from S0 to S1 to S2 to S3 (when desired bit is received)「（1）从S0到S1到S2到S3的转换（接收到所需位时）」</p><p>(2) For most of the cases when undesired bit is received, it goes back to S0 (restart the detection again)「（2）在大多数情况下，当收到不希望的位时，它会返回到S0（再次重新开始检测）」</p><p>(3) Some special cases: S2 goes back to S2 (11 when received 1); S3 goes to S1 (110 when received 1)「（3）一些特殊情况：S2返回到S2（收到1时为11）； S3转到S1（收到1时为110）」</p><p><strong>This process needs case-by-case careful design</strong></p><h5 id="from-state-diagram-to-functions" tabindex="-1"><a class="header-anchor" href="#from-state-diagram-to-functions" aria-hidden="true">#</a> From State Diagram to Functions</h5><p>Approach: use Truth Table and Karnaugh Map</p><ul><li>Encode the states, input, and output <ul><li>S0 (00), S1(01), S2(10), S3(11)</li></ul></li><li>Construct the state diagram (it is actually a truth table)</li></ul><p>Now you can use K-map</p><img src="https://pic.hanjiaming.com.cn/2021/04/03/6398726ec663b.png" alt="image.png" title="image.png"><p>In the State Diagram (truth table):<br> (1) we use two bits P1，P0 to denote the current state; use N1, N0 for the next state<br> (2) (P1,P0,X) are the variables, N1, N0, Z are the function values<br> (3) Given a combination of (P1,P0,X), we need to find the value for N1, N0, Z from the state diagram</p><img src="https://pic.hanjiaming.com.cn/2021/04/03/429f3cb9073ba.png" alt="image.png" title="image.png"><p>The two important relations:</p><ul><li>Next state = current state + input</li><li>Output = current state + input</li></ul><p>We can then contruct the circuits using memory components and combinational logic</p><img src="https://pic.hanjiaming.com.cn/2021/04/03/7de500dd5beba.png" alt="image.png" title="image.png"><h2 id="design-of-sequential-circuits" tabindex="-1"><a class="header-anchor" href="#design-of-sequential-circuits" aria-hidden="true">#</a> Design of sequential circuits</h2><h3 id="a-recap-of-terminologies-on-flip-flops" tabindex="-1"><a class="header-anchor" href="#a-recap-of-terminologies-on-flip-flops" aria-hidden="true">#</a> A Recap of Terminologies on Flip-Flops</h3><p>「Flip-Flops 术语的回顾」</p><ul><li>Symbol (diagram)</li><li>Charactristic table/characteristic equation</li><li>Excitation table</li></ul><img src="https://pic.hanjiaming.com.cn/2021/04/06/30651edb0837b.png" alt="image.png" title="image.png"><h3 id="common-flip-flop-types" tabindex="-1"><a class="header-anchor" href="#common-flip-flop-types" aria-hidden="true">#</a> Common Flip-Flop Types</h3><img src="https://pic.hanjiaming.com.cn/2021/04/08/1ce7bc74c24dd.png" alt="image.png" title="image.png"><h3 id="think" tabindex="-1"><a class="header-anchor" href="#think" aria-hidden="true">#</a> Think</h3><p>For a real-world problem, we know how to get the relations (functions) among input, current state and next state, output「对于一个现实世界的问题，我们知道如何获得输入，当前状态和下一状态，输出之间的关系（函数）」</p><p>For implementation using Flip-Flops, we need the input/output of that type of flip-flops「对于使用触发器的实现，我们需要该类型触发器的输入/输出」</p><p>What are the relations between current state/next state and input/output of flip-flops?「触发器的当前状态/下一个状态与输入/输出之间有什么关系？」</p><p>Back to the Previous Problem</p><p>We are given the state diagram of FSM. We can drive the functions:</p><ul><li>Next state = f (external input, current state)</li><li>External output = g (external input, current state)</li></ul><p>Note: f, g can be relialized using combinational logic</p><p>However, we need to implement f and g using Flip-Flops. What&#39;s the next state? What&#39;s the input to the flip-flops?</p><p><strong>For D Flip-flop, it is easy</strong></p><ul><li>Characteristic equation: Q_{next} = D</li><li>Next state = f (external input, current state)</li><li>D = f (external input, current state)</li></ul><p><strong>Generally, for other flip-flops</strong></p><ul><li>We will use the excitation table of that flip-flop to derive the <strong>excitation table of the circuit</strong></li><li>Excitation table: what <strong>inputs of the flip-flop</strong> are required to transit from one state to the next state「从一个状态转换到下一个状态需要触发器的哪些输入」</li><li>This excitation table of the circuit is also a truth table: the inputs of the flip-flop are the fucntion values and others are variables</li></ul><h4 id="example-1" tabindex="-1"><a class="header-anchor" href="#example-1" aria-hidden="true">#</a> Example</h4><p>Design a sequential circuit whose state diagram is shown as follows, using J-K Flip-Flops「使用J-K触发器设计时序电路，其状态图如下所示」</p><p>Encoding:</p><ul><li>Use the outputs of <strong>two</strong> J-K Flip-Flops Q0, Q1 to denote the four states</li><li>Use X to denote the external input</li><li>There is no external output for this FSM</li></ul><p>批注：用x为输入，x作为下一个的输入，随着输入的变化， Q0, Q1发生变化。无输出。即 x_next = f(x), 或者 input = f(x) 这时我们用找出影响x的基本要素。</p><p>目的：构建 input = f(x) 函数</p><p>1.先画出 总部件 的 Symbol (diagram)</p><img src="https://pic.hanjiaming.com.cn/2021/04/09/f5fe764ca2027.png" alt="image.png" title="image.png" width="300px"><ol start="2"><li>画出 元部件的 Exitation table</li></ol><p>分析：Q0, Q1的变化是由 Q0、Q1的当前状态 和 J0,K0,J1,K1 决定的</p><ol start="2"><li>根据 总部件 的 Symbol (diagram) 画出 总部件 的 state table</li></ol><img src="https://pic.hanjiaming.com.cn/2021/04/09/9c56aa52c3e01.png" alt="image.png" title="image.png"><ol start="4"><li>根据 总部件 的 state table 画出 总部件 的 Excitation table</li></ol><img src="https://pic.hanjiaming.com.cn/2021/04/09/f1853f7c85fe9.png" alt="image.png" title="image.png"><p>For example: the first row, look at Q0, 0 -&gt; 0, the required inputs are J0 = 0, K0 =X</p><p>This is a truth table with Q0 Q1 as variables and J0, K0, J1, K1 as function values (it contains don&#39;t care conditions「它包含 无关条件 」)</p><p>**这时，我们要用 Q0，Q1，x **去表示 next ，即 next = f(Q0，Q1，x )</p><ol start="5"><li>将 元部件 的 输入（J0,K0,J1,K1） 和 总部件的输入x 进行对应，使用多种化简方法，比如k-map</li></ol><p>k-map的两个维度分别是两组变量。</p><img src="https://pic.hanjiaming.com.cn/2021/04/09/43d40e0977472.png" alt="image.png" title="image.png"><ol start="6"><li>画出电路</li></ol><img src="https://pic.hanjiaming.com.cn/2021/04/09/24e7f8ab57dfa.png" alt="image.png" title="image.png" width="300px"><h3 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h3><p>Critical steps of designing sequential circuits</p><p>FSM model (this is the hardest part): define the states and state transitions「FSM模型（这是最难的部分）：定义状态和状态转换」</p><p>The rest is routine「例行的」:</p><ul><li>State table + excitation table of flip-flops -&gt; excitation table of the circuit</li><li>Use K-map to derive the SOP form of two functions: <ul><li>Input of Flip-flips = current state (output of flip-flops) + external input</li><li>External output = current state (output of flip-flops) + external input</li></ul></li></ul><p>批注</p><ul><li>对于 Next ，我们要找的函数是 Next = f(变量)； <ul><li>Next 能够被 拆解成 有很多个 基本元件的Next，这里需要多个函数：比如外界输入的x，和 当前状态值</li><li>一般题目会给出 基本元件。</li></ul></li><li>对于 Output, 我们要找的函数是 output = g(变量)；</li></ul>',127),l=[s];function o(r,p){return e(),a("div",null,l)}const u=t(n,[["render",o],["__file","Combinational-Logic4.html.vue"]]);export{u as default};
