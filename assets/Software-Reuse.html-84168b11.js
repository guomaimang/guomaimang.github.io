const e=JSON.parse('{"key":"v-0ceb0dc0","path":"/note/it/pm/se/Software-Reuse.html","title":"Software Reuse","lang":"zh-CN","frontmatter":{"article":false,"date":"2022-12-13T00:00:00.000Z","order":9,"headerDepth":1,"description":"Software Reuse 在过去的20年中，已经有一个重大的转变，即转向基于系统化软件重用的设计过程。 基于重复使用的软件工程 系统再利用：完整的系统，其中可能包括几个应用程序，可以被重新使用。 应用程序重用：一个应用程序可以通过不加改变地合并到其他应用程序或通过开发应用程序系列来重用。 组件重用：从子系统到单个对象的应用程序组件都可以重用。 对象和函数重用：可以重用实现单个定义良好的对象或函数的小规模软件组件。 软件重用的好处和问题","head":[["meta",{"property":"og:url","content":"https://guomaimang.github.io/note/it/pm/se/Software-Reuse.html"}],["meta",{"property":"og:site_name","content":"HAN Jiaming | Hirsun | 韩佳明"}],["meta",{"property":"og:title","content":"Software Reuse"}],["meta",{"property":"og:description","content":"Software Reuse 在过去的20年中，已经有一个重大的转变，即转向基于系统化软件重用的设计过程。 基于重复使用的软件工程 系统再利用：完整的系统，其中可能包括几个应用程序，可以被重新使用。 应用程序重用：一个应用程序可以通过不加改变地合并到其他应用程序或通过开发应用程序系列来重用。 组件重用：从子系统到单个对象的应用程序组件都可以重用。 对象和函数重用：可以重用实现单个定义良好的对象或函数的小规模软件组件。 软件重用的好处和问题"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-15T05:33:29.000Z"}],["meta",{"property":"article:author","content":"Hirsun (HAN Jiaming)"}],["meta",{"property":"article:published_time","content":"2022-12-13T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-15T05:33:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Software Reuse\\",\\"description\\":\\"Software Reuse 在过去的20年中，已经有一个重大的转变，即转向基于系统化软件重用的设计过程。 基于重复使用的软件工程 系统再利用：完整的系统，其中可能包括几个应用程序，可以被重新使用。 应用程序重用：一个应用程序可以通过不加改变地合并到其他应用程序或通过开发应用程序系列来重用。 组件重用：从子系统到单个对象的应用程序组件都可以重用。 对象和函数重用：可以重用实现单个定义良好的对象或函数的小规模软件组件。 软件重用的好处和问题\\"}"]]},"headers":[{"level":2,"title":"Some Approaches","slug":"some-approaches","link":"#some-approaches","children":[]},{"level":2,"title":"Reuse Planning Factors","slug":"reuse-planning-factors","link":"#reuse-planning-factors","children":[]},{"level":2,"title":"Application Frameworks","slug":"application-frameworks","link":"#application-frameworks","children":[]},{"level":2,"title":"Web Application Frameworks","slug":"web-application-frameworks","link":"#web-application-frameworks","children":[]},{"level":2,"title":"Extending Frameworks","slug":"extending-frameworks","link":"#extending-frameworks","children":[]}],"git":{"createdTime":1726378409000,"updatedTime":1726378409000,"contributors":[{"name":"hanjiaming","email":"47519540+guomaimang@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":11.62,"words":1162},"filePathRelative":"note/it/pm/se/Software-Reuse.md","localizedDate":"2022年12月13日","excerpt":"<h1> Software Reuse</h1>\\n<p>在过去的20年中，已经有一个重大的转变，即转向基于系统化软件重用的设计过程。</p>\\n<p>基于重复使用的软件工程</p>\\n<ul>\\n<li>系统再利用：完整的系统，其中可能包括几个应用程序，可以被重新使用。</li>\\n<li>应用程序重用：一个应用程序可以通过不加改变地合并到其他应用程序或通过开发应用程序系列来重用。</li>\\n<li>组件重用：从子系统到单个对象的应用程序组件都可以重用。</li>\\n<li>对象和函数重用：可以重用实现单个定义良好的对象或函数的小规模软件组件。</li>\\n</ul>\\n<p>软件重用的好处和问题</p>\\n","autoDesc":true}');export{e as data};
