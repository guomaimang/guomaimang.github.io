import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as i,c as n,e as l}from"./app-1a186aa2.js";const a={},t=l('<h1 id="software-evolution" tabindex="-1"><a class="header-anchor" href="#software-evolution" aria-hidden="true">#</a> Software Evolution</h1><ol><li>理解软件系统必须适应和发展，如果它们要保持有用的话，软件变化和发展应该被视为软件工程的一个组成部分。</li><li>了解不同类型的软件维护，以及影响对<strong>遗留软件系统</strong>进行修改的成本的因素。</li><li>了解<strong>版本控制系统</strong>应该提供的基本功能，以及如何在集中式和分布式系统中实现这些功能。</li><li>了解什么是<strong>遗留系统</strong>，以及为什么这些系统对企业很重要。</li><li>了解如何对遗留系统进行评估，以决定它们是否应该被废弃、维护、重新设计或替换。</li></ol><h2 id="software-change-and-evolution" tabindex="-1"><a class="header-anchor" href="#software-change-and-evolution" aria-hidden="true">#</a> Software Change and Evolution</h2><p>软件变化是不可避免的</p><ul><li>错误必须被修复。</li><li>系统的性能或可靠性可能必须得到改善。</li><li>商业环境的变化。</li><li>新的计算机和设备被添加到系统中。</li><li>在使用该软件时，会出现新的要求。</li></ul><p>进化的重要性</p><ul><li>组织在其软件系统上有巨大的投资 - 它们是关键的商业资产。</li><li>为了保持这些资产对企业的价值，它们必须被改变和更新。</li><li>大公司的大部分软件预算都用于改变和发展现有软件，而不是开发新的软件。</li></ul><img src="https://pic.hanjiaming.com.cn/2022/12/15/a8bd862fcc3db.png" alt="1671044289106.png" style="zoom:50%;"><h2 id="evolution-and-servicing" tabindex="-1"><a class="header-anchor" href="#evolution-and-servicing" aria-hidden="true">#</a> Evolution and Servicing</h2><ul><li>Evolution：在一个软件系统的生命周期中，它正处于运行使用阶段，并随着新需求的提出和在系统中的实施而不断发展。</li><li>Servicing：在这个阶段，软件仍然是有用的，但所做的唯一改变是保持其运行所需的改变，即错误修复和反映软件环境变化的改变。 没有增加新的功能。</li><li>Retirement：该软件仍可使用，但只做必要的修改。用户必须解决他们发现的问题。</li></ul><img src="https://pic.hanjiaming.com.cn/2022/12/15/0827ab7befce7.png" alt="1671044507138.png" style="zoom:50%;"><h2 id="evolution-processes" tabindex="-1"><a class="header-anchor" href="#evolution-processes" aria-hidden="true">#</a> Evolution Processes</h2><p>软件进化过程取决于</p><ul><li>正在维护的软件的类型。</li><li>The development processes used;</li><li>The skills and experience of the people involved.</li></ul><p><strong>Proposals for change</strong> are the driver for system evolution. 「变革提案是系统演化的驱动力。」</p><ul><li>来自系统利益相关者的错误报告</li><li>来自系统开发团队的软件改进新思路</li><li>适应新环境的要求</li><li>对新要求的请求</li></ul><p>变化的识别和演变在整个系统的生命周期中持续进行。</p><h2 id="a-general-model" tabindex="-1"><a class="header-anchor" href="#a-general-model" aria-hidden="true">#</a> A General Model</h2><p>软件进化过程的一般模型</p><img src="https://pic.hanjiaming.com.cn/2022/12/15/73e31636d6879.png" alt="1671044787392.png" style="zoom:50%;"><p>Change implementation</p><ul><li>开发过程的迭代「Iteration」，对系统的修订被设计「designed」、实施「implemented」和测试。</li><li>Development 和 Evolution 之间的一个关键区别是，Evolution 实施的第一阶段可能涉及到方案理解</li></ul><h2 id="urgent-change-requests" tabindex="-1"><a class="header-anchor" href="#urgent-change-requests" aria-hidden="true">#</a> Urgent Change Requests</h2><p><strong>可能</strong>必须在不经历软件演化过程的所有阶段的情况下实施紧急变更</p><ul><li>如果必须修复一个<strong>严重的系统故障</strong>，以便继续正常运行。</li><li>如果<strong>系统环境的变化</strong>（例如，操作系统升级）产生了意想不到的影响。</li><li>如果有需要非常快速反应的<strong>业务变化</strong>（例如，竞争产品的发布）。</li></ul><h2 id="agile-methods-and-evolution" tabindex="-1"><a class="header-anchor" href="#agile-methods-and-evolution" aria-hidden="true">#</a> Agile Methods and Evolution</h2><p>敏捷方法以增量开发为基础，所以从开发到演化是一个无缝的过渡。</p><ul><li>进化只是基于频繁的系统发布的开发过程的一种延续。</li><li>当系统发生变化时，自动回归测试「Automated regression testing」尤其有价值。</li><li>变化可以表现为额外的用户故事。</li></ul><p>Handover problems</p><ul><li>开发团队采用了敏捷的方法，但 evolution team 更倾向于采用基于计划的方法</li><li>基于计划的方法已被用于开发，但 evolution team 更喜欢使用敏捷的方法。</li></ul><h2 id="software-maintenance" tabindex="-1"><a class="header-anchor" href="#software-maintenance" aria-hidden="true">#</a> Software Maintenance</h2><p>在一个程序投入使用后对其进行修改。</p><ul><li>该术语多用于改变定制软件「custom software」。通用软件产品据说是通过进化「evolve」来创造新的版本。</li><li>维护通常不涉及对系统结构的重大改变。</li><li>Software Maintenance 变化是通过<strong>修改现有的组件和向系统添加新的组件来实现的</strong>。</li></ul><p>Types of maintenance</p><ul><li>Fault repairs</li><li>Environmental adaptation</li><li>Functionality addition and modification</li></ul><h3 id="maintenance-costs" tabindex="-1"><a class="header-anchor" href="#maintenance-costs" aria-hidden="true">#</a> Maintenance Costs</h3><ul><li>通常大于开发成本（2x到100x，取决于应用）。</li><li>随着软件的维护而增加。</li><li>在维护过程中为系统增加新的功能通常比在开发过程中增加同样的功能更昂贵。 <ul><li>程序维护工作是不受欢迎的。维护人员往往缺乏经验，而且领域知识有限。</li><li>将维护和开发分开意味着开发团队没有动力去编写可维护的软件</li><li>一个新的团队必须了解正在维护的程序</li><li>随着程序的老化，它们的结构会退化，而且变得更难改变</li></ul></li></ul><h3 id="maintenance-prediction" tabindex="-1"><a class="header-anchor" href="#maintenance-prediction" aria-hidden="true">#</a> Maintenance Prediction</h3><p>评估系统的哪些部分可能会导致问题，并具有较高的维护成本</p><ul><li>预测一个 <strong>系统的变更请求的数量</strong> 需要了解<strong>该系统与其外部环境之间的关系</strong>。</li><li><strong>复杂度</strong>「Complexity」和 <strong>过程数据</strong> 可用于帮助预测可维护性</li><li>使用 <strong>关于变更请求的预测信息</strong> 和 <strong>关于系统可维护性的预测</strong> 来预测 <strong>维护成本</strong></li></ul><h2 id="software-reengineering" tabindex="-1"><a class="header-anchor" href="#software-reengineering" aria-hidden="true">#</a> Software Reengineering</h2><ul><li>在不改变功能的情况下，<strong>重组或重写部分或全部的遗留系统</strong>，使其更容易维护。</li><li>适用于较大系统中的一些<strong>但不是所有子系统</strong>需要经常维护的情况。</li><li>Advantages of reengineering over replacement <ul><li>Reduced <strong>risk</strong></li><li>Reduced <strong>cost</strong></li></ul></li><li>Reengineering cost factors <ul><li>要重新设计的软件的质量</li><li>可用于重新设计的工具支持</li><li>需要的数据转换的范围</li><li>是否有专家人员进行重新设计</li></ul></li><li>软件重新设计的局限性 <ul><li>转换<strong>编程范式</strong>是<strong>不可能</strong>的</li><li>重大的架构或数据管理变化是<strong>昂贵的</strong></li><li>由此产生的系统可能不如<strong>一个新系统</strong>的可维护性</li></ul></li></ul><h2 id="refactoring" tabindex="-1"><a class="header-anchor" href="#refactoring" aria-hidden="true">#</a> Refactoring</h2><ul><li>对一个项目进行改进的过程，<strong>通过改变来减缓退化的速度</strong>。 <ul><li>当你重构一个程序时，<strong>你不应该增加功能</strong>，而应该专注于程序改进。</li><li>把它看作是 &quot;预防性维护&quot;</li></ul></li><li>Refactoring vs. Re-engineering <ul><li>Refactoring 是在整个开发和演化过程中不断改进的过程，<strong>它的目的是避免结构和代码退化，从而增加维护系统的成本和困难。</strong></li><li>Re-engineering 发生在系统维护了一段时间并且维护成本增加之后，它使用自动化工具来处理和重新设计遗留系统以创建一个<strong>新的</strong>、更易于维护的系统</li></ul></li></ul><h2 id="version-management" tabindex="-1"><a class="header-anchor" href="#version-management" aria-hidden="true">#</a> Version Management</h2><h3 id="codelines-and-baselines" tabindex="-1"><a class="header-anchor" href="#codelines-and-baselines" aria-hidden="true">#</a> Codelines and Baselines</h3><p><strong>追踪软件组件</strong>或<strong>配置项目的不同版本</strong>以及使用这些组件的系统的过程。</p><ul><li>它还涉及到确保不同的开发者对这些版本的修改不会相互干扰。</li><li>版本管理可以被认为是管理代码线「codelines」和基线「baselines」的过程。 <ul><li>代码线是一个<strong>源代码</strong>版本的<strong>序列</strong>，序列中的后期版本来自早期版本。</li><li>基线规定了特定系统中<strong>包含的组件版本</strong>以及<strong>使用的库和配置文件</strong>等。</li></ul></li></ul><img src="https://pic.hanjiaming.com.cn/2022/12/15/fade3107be9ff.png" alt="1671046598471.png" style="zoom:50%;"><p>主线「mainline」是一个从原始基线发展起来的系统版本序列。</p><h3 id="version-control-systems" tabindex="-1"><a class="header-anchor" href="#version-control-systems" aria-hidden="true">#</a> Version Control Systems</h3><ul><li>版本控制（VC）系统识别、存储和控制对不同版本的组件的访问。现代版本控制系统有两种类型 <ul><li>集中式系统，有一个单一的主资源库，维护正在开发的软件组件的所有版本。</li><li>分布式系统，其中组件库的多个版本同时存在。</li></ul></li></ul><h3 id="project-repository-and-private-workspace" tabindex="-1"><a class="header-anchor" href="#project-repository-and-private-workspace" aria-hidden="true">#</a> Project Repository and Private Workspace</h3><p>项目库维护着所有组件的 &quot;主 &quot;版本，用于创建系统建设的基线。</p><ul><li>在修改组件时，开发人员将这些组件从资源库中复制（检出）到他们的工作区，并在这些副本上工作。</li><li>当他们完成修改后，修改后的组件会被返回（checked-in）到版本库中。</li></ul><p>Centralized vs. distributed</p><ul><li>在集中式版本控制中，<strong>私有工作区只包含项目库的组件</strong>。</li><li>在分布式版本控制中，<strong>私有工作区是项目库的一个克隆</strong>。</li></ul><figure><img src="https://pic.hanjiaming.com.cn/2022/12/15/09baac2590296.png" alt="1671046939105.png" tabindex="0" loading="lazy"><figcaption>1671046939105.png</figcaption></figure><h3 id="benefits-of-distributed-version-control" tabindex="-1"><a class="header-anchor" href="#benefits-of-distributed-version-control" aria-hidden="true">#</a> Benefits of Distributed Version Control</h3><ul><li>它为存储库提供了一个备份机制：如果资源库被破坏，工作可以继续，项目资源库可以从本地副本中恢复。</li><li>它允许离线工作，以便开发人员可以在没有网络连接的情况下提交更改。</li><li>项目支持是默认的工作方式：开发人员可以在他们的本地机器上编译和测试整个系统，并测试他们所做的修改。</li><li>分布式 VC 对于开源开发至关重要：几个人可能同时在同一个系统上工作，没有任何中央协调。</li></ul><h2 id="storage-management" tabindex="-1"><a class="header-anchor" href="#storage-management" aria-hidden="true">#</a> Storage Management</h2><p>当版本控制系统最初开发时，存储管理是其最重要的功能之一</p><ul><li>由于磁盘空间昂贵，系统不保留每个版本的完整副本，而是存储一个版本与另一个版本之间的差异（deltas）列表。</li><li>将这些内容应用于主版本（通常是最新的版本），可以重新创建一个目标版本。</li></ul><p>由于磁盘存储现在相对便宜，Git 使用了一种替代的、更快的方法。</p><ul><li>Git 不使用增量，而是对存储的文件及其关联的元信息应用标准压缩算法。</li><li>它不存储文件的重复副本。检索文件只需将其解压缩，无需应用一系列操作。</li></ul><h2 id="legacy-systems" tabindex="-1"><a class="header-anchor" href="#legacy-systems" aria-hidden="true">#</a> Legacy Systems</h2><p>依赖于不再用于新系统开发的语言和技术的旧系统。</p><ul><li>它们的结构可能已经因变化而退化了</li><li>它们可能依赖于旧的硬件，并可能有相关的遗留流程和程序。</li><li>遗留系统不仅是软件系统，而且是更广泛的社会技术系统，包括硬件、软件、库和其他支持性软件和业务流程。</li></ul><h2 id="summary" tabindex="-1"><a class="header-anchor" href="#summary" aria-hidden="true">#</a> Summary</h2><ul><li>软件开发和进化可以被认为是一个综合的、迭代的过程，可以用螺旋模型表示。</li><li>对于定制系统，软件维护的成本通常超过软件开发的成本。</li><li>The process of <strong>software evolution</strong> is <em>driven by requests for changes</em> and includes <strong>change impact analysis,</strong> <strong>release planning</strong> and <strong>change implementation.</strong></li><li>遗留系统是指<strong>使用过时的软件和硬件技术开发的</strong>、对企业仍然<strong>有用</strong>的旧软件系统。</li><li>There are 3 types of software maintenance, namely <strong>bug fixing,</strong> <strong>modifying software to work in a new environment</strong>, and <strong>implementing new or changed requirements</strong>.</li><li>Software re-engineering is concerned with re-structuring and re- documenting software to make it easier to understand and change.</li><li>Refactoring, making program changes that preserve functionality, is a form of preventative maintenance.</li><li>Version management involves keeping track of the different versions of software components as changes are made to them.</li></ul>',70),r=[t];function o(s,g){return i(),n("div",null,r)}const h=e(a,[["render",o],["__file","Software-Evolution.html.vue"]]);export{h as default};
