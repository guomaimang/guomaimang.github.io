import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as c,c as o,a as n,b as s,d as e,e as i}from"./app-12f9fcf6.js";const l={},u=i(`<h1 id="keep-alive" tabindex="-1"><a class="header-anchor" href="#keep-alive" aria-hidden="true">#</a> Keep-alive</h1><h2 id="什么是-http-持久连接" tabindex="-1"><a class="header-anchor" href="#什么是-http-持久连接" aria-hidden="true">#</a> 什么是 HTTP 持久连接？</h2><p>HTTP 持久连接，也称为 HTTP keep-alive 或 HTTP 连接重用，是使用相同的 TCP 连接发送和接收多个 HTTP 请求/响应的想法，而不是为每个请求/响应对打开一个新连接。使用持久连接对于提高 HTTP 性能非常重要。</p><p>使用持久连接有几个优点，包括：</p><ul><li>网络友好。由于 TCP 连接的设置和断开更少，因此网络流量更少。</li><li>减少后续请求的延迟。由于避免了初始 TCP 握手</li><li>持久连接允许 TCP 有足够的时间来确定网络的拥塞状态，从而做出适当的反应。</li></ul><p>使用 HTTPS 或 HTTP over SSL/TLS 的优势更加明显。在那里，除了初始 TCP 连接设置之外，持久连接可以减少昂贵的 SSL/TLS 握手次数以建立安全关联。</p><p>在 HTTP/1.1 中，持久连接是任何连接的默认行为。也就是说，除非另有说明，否则客户端应该假设服务器将保持持久连接，即使在服务器的错误响应之后也是如此。但是，该协议为客户端和服务器提供了发出 TCP 连接关闭信号的方法。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p><code>含有 Keep-Alive</code> 首部的响应示例:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>HTTP/1.1 200 OK
Connection: Keep-Alive
Content-Encoding: gzip
Content-Type: text/html; charset=utf-8
Date: Thu, 11 Aug 2016 15:23:13 GMT
Keep-Alive: timeout=10, max=1000
Last-Modified: Mon, 25 Jul 2016 04:32:39 GMT
Server: Apache
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="实现" tabindex="-1"><a class="header-anchor" href="#实现" aria-hidden="true">#</a> 实现</h2><p>TCP/IP 需要两次握手。使用keep-alive可以告知client that 服务器的socket没有关闭可以复用，这样将减少通信次数。Silver Spork 支持保持socket不关闭，直到IO阻塞超过10s。</p><p>默认的，该程序设置 <code>SoTimeout</code> 为10s。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Socket</span> socket <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
socket<span class="token punctuation">.</span><span class="token function">setKeepAlive</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
socket<span class="token punctuation">.</span><span class="token function">setSoTimeout</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// millisecond</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>当线程未终止时，线程将一直阻塞在新的inputStream。</li><li>如果10s 内无新的input stream（即 <code>socket.getInputStream()</code> 阻塞超过10s），socket 将会抛出 <code>InterruptedIOException</code>。 <ul><li>这时，socket将会关闭。</li></ul></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
		<span class="token class-name">DataInputStream</span> dis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  	<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
	<span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedIOException</span> e<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>
    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference" aria-hidden="true">#</a> Reference</h2>`,17),r={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/net/http-keepalive.html",target:"_blank",rel:"noopener noreferrer"},d={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Keep-Alive",target:"_blank",rel:"noopener noreferrer"};function k(v,m){const a=p("ExternalLinkIcon");return c(),o("div",null,[u,n("p",null,[n("a",r,[s("https://docs.oracle.com/javase/8/docs/technotes/guides/net/http-keepalive.html"),e(a)])]),n("p",null,[n("a",d,[s("https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Keep-Alive"),e(a)])])])}const b=t(l,[["render",k],["__file","Keep-alive.html.vue"]]);export{b as default};
