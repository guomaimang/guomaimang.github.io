import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{o as l,c as n,e as r}from"./app-f7164153.js";const a={},o=r('<h1 id="mysql-mha-高可用方案" tabindex="-1"><a class="header-anchor" href="#mysql-mha-高可用方案" aria-hidden="true">#</a> MySQL MHA 高可用方案</h1><p>今天来学习 MySQL 中非常经典的 MHA 高可用方案，简明扼要地讲解 MHA 是如何实现高可用及故障转移的。</p><p>MHA（Master High Availability）是由一位日本程序员开发的 MySQL 高可用方案。</p><ul><li>yoshinorim开发的 MySQL 高可用方案，采用 Perl 语言开发。</li><li>MHA 是 MySQL 领域中使用最广泛、最成熟的高可用架构方案之一。</li></ul><h2 id="mha-架构图解" tabindex="-1"><a class="header-anchor" href="#mha-架构图解" aria-hidden="true">#</a> MHA 架构图解</h2><p>下图展示了一个完整的 MHA 架构方案：</p><figure><img src="https://pic.hanjiaming.com.cn/2024/12/23/a754bd51ba1f7.png" alt="1734966534182.png" tabindex="0" loading="lazy"><figcaption>1734966534182.png</figcaption></figure><p>架构讲解</p><ol><li><strong>主从同步</strong>：MySQL 主服务器在处理数据后生成 binlog（日志），并将其发送给从属服务器。 <ul><li>从属服务器通过 binlog 重放来保持数据同步。</li></ul></li><li><strong>高可用问题</strong>：<strong>单纯的主从架构不具备高可用性和故障迁移能力。</strong><ul><li>如果主服务器挂掉，需要人工干预进行主从切换，导致业务中断。</li></ul></li></ol><h2 id="mysql-主从同步基础" tabindex="-1"><a class="header-anchor" href="#mysql-主从同步基础" aria-hidden="true">#</a> MySQL 主从同步基础</h2><p>MySQL 主从同步是基于 binlog 实现的：</p><ol><li><strong>主服务器</strong>：生成 binlog 记录操作。</li><li><strong>从服务器</strong>：接受并重放 binlog。</li><li><strong>问题</strong>：主从架构本身不具备高可用性，主服务器挂掉后无法自动切换。</li></ol><h2 id="mha-角色与组件" tabindex="-1"><a class="header-anchor" href="#mha-角色与组件" aria-hidden="true">#</a> MHA 角色与组件</h2><p>MHA 在原有的主从架构上增加了以下角色和组件：</p><ol><li><strong>VIP（虚拟IP）</strong>：在应用和主服务器之间增加一个虚拟 IP，MHA 可以根据需要漂移 VIP。</li><li><strong>MHA Manager</strong>：管理者，负责指挥调度。</li><li><strong>MHA Node</strong>：每个节点上运行的组件，负责接收命令并执行自动化任务。</li><li><strong>Binlog Server</strong>：同步主服务器的 binlog，不对外提供数据服务。</li></ol><p>工具与脚本：MHA 包含多个工具包和脚本，大部分由 MHA 自动执行：</p><ul><li><strong>MHA Manager</strong>：包含管理者的工具和脚本。</li><li><strong>MHA Node</strong>：每个节点上部署的工具和脚本。</li></ul><h2 id="mha-故障检测与转移过程" tabindex="-1"><a class="header-anchor" href="#mha-故障检测与转移过程" aria-hidden="true">#</a> MHA 故障检测与转移过程</h2><img src="https://pic.hanjiaming.com.cn/2024/12/23/86c9226382ca5.png" alt="1734966708827.png" style="zoom:33%;"><h3 id="故障检测" tabindex="-1"><a class="header-anchor" href="#故障检测" aria-hidden="true">#</a> 故障检测</h3><ol><li><strong>前置检查</strong>：启动时检查配置文件和 GTID。</li><li><strong>主节点检测</strong>：每三秒向主节点发送一个 <code>SELECT 1</code> 查询，连续三次失败则认为主节点有问题。</li><li><strong>从节点验证</strong>：通知所有从属服务器尝试连接主服务器，若两个从属服务器都无法连接，则确认主服务器挂掉。</li></ol><h3 id="故障转移过程" tabindex="-1"><a class="header-anchor" href="#故障转移过程" aria-hidden="true">#</a> 故障转移过程</h3><figure><img src="https://pic.hanjiaming.com.cn/2024/12/23/3f6dbbb6a084a.png" alt="1734966877087.png" tabindex="0" loading="lazy"><figcaption>1734966877087.png</figcaption></figure><ol><li><strong>保存现场</strong>：断开虚拟 IP 和主服务器的连接，停止主从同步。</li><li><strong>抽取 binlog</strong>：从 Binlog Server 抽取最新的 binlog。</li><li><strong>数据比对与同步</strong>： <ul><li><strong>从属服务器比对</strong>：确定最新的从属服务器，并将差异数据同步到其他从属服务器。</li><li><strong>与主服务器比对</strong>：从 Binlog Server 获取的 binlog 与从属服务器的数据进行比对，确保数据完整一致。</li></ul></li><li><strong>提升新的主服务器</strong>： <ul><li><strong>指定主服务器</strong>：可以手动指定新的主服务器。</li><li><strong>最新日志</strong>：选择日志最新的从属服务器。</li><li><strong>实例列表顺序</strong>：按照实例列表顺序选择。</li></ul></li><li><strong>切换 VIP</strong>：将 VIP 指向新的主服务器，确保应用可以通过 VIP 访问新的主服务器。</li></ol><div class="hint-container tip"><p class="hint-container-title">恢复旧的主服务器</p><p>旧的主服务器恢复后会自动降级为从属节点，与新的主服务器同步数据。</p></div><h2 id="mha-的优缺点" tabindex="-1"><a class="header-anchor" href="#mha-的优缺点" aria-hidden="true">#</a> MHA 的优缺点</h2><p>优点</p><ul><li>良好的兼容性，支持主流的 MySQL 版本。</li><li>自动化程度高，减少人工干预。</li></ul><p>缺点</p><ol><li><strong>VIP 方案</strong>：没有自带 VIP 实现方案，需要额外的脚本或工具。</li><li><strong>从属节点监控</strong>：只关注主节点，从属节点的可用性不在监控范围内。</li><li><strong>安全性问题</strong>：基于 SSH 进行远程登录，存在安全隐患。</li><li><strong>负载均衡</strong>：不提供从属服务器的负载均衡功能。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>MHA 是目前传统企业应用及金融领域使用的主要高可用方案，尽管存在一些缺点，但其良好的兼容性和高效的自动化机制使其在 MySQL 高可用解决方案中占据重要地位。</p>',32),t=[o];function s(e,g){return l(),n("div",null,t)}const c=i(a,[["render",s],["__file","mysql-mha.html.vue"]]);export{c as default};
