const e=JSON.parse('{"key":"v-f1b49e3a","path":"/note/cs/cn/Java-Socket-Programming/Log.html","title":"日志记录","lang":"zh-CN","frontmatter":{"article":false,"date":"2022-04-19T00:00:00.000Z","description":"日志记录 class Logger 多个线程需要同时读写日志，所以需要在写入日志时锁定，防止出现不同步。在多线程中，IO尤其需要防止死锁的出现。 之前已经说过，log文件的位置以及名称在全局变量中设置。当文件不存在时，将会被自动地创建。 每一条日志也会输出到终端 Silver Spork 已经实现了 文件资源抢占。当一个线程要求logger写入日志的时候，其他进程将会等待，直到资源可用。 不会出现死锁。无论在读写中是否出现异常，logger最终会被释放以让其他的线程使用。 内存安全。当产生一行日志后，将立刻追加写入到硬盘中的文件内，不会在内存中堆积。 追加写入。每次启动程序后，程序将自动写入下划线，以区分不同时间的日志。","head":[["meta",{"property":"og:url","content":"https://guomaimang.github.io/note/cs/cn/Java-Socket-Programming/Log.html"}],["meta",{"property":"og:site_name","content":"HAN Jiaming | Hirsun | 韩佳明"}],["meta",{"property":"og:title","content":"日志记录"}],["meta",{"property":"og:description","content":"日志记录 class Logger 多个线程需要同时读写日志，所以需要在写入日志时锁定，防止出现不同步。在多线程中，IO尤其需要防止死锁的出现。 之前已经说过，log文件的位置以及名称在全局变量中设置。当文件不存在时，将会被自动地创建。 每一条日志也会输出到终端 Silver Spork 已经实现了 文件资源抢占。当一个线程要求logger写入日志的时候，其他进程将会等待，直到资源可用。 不会出现死锁。无论在读写中是否出现异常，logger最终会被释放以让其他的线程使用。 内存安全。当产生一行日志后，将立刻追加写入到硬盘中的文件内，不会在内存中堆积。 追加写入。每次启动程序后，程序将自动写入下划线，以区分不同时间的日志。"}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-15T05:33:29.000Z"}],["meta",{"property":"article:author","content":"Hirsun (HAN Jiaming)"}],["meta",{"property":"article:published_time","content":"2022-04-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-15T05:33:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"日志记录\\",\\"description\\":\\"日志记录 class Logger 多个线程需要同时读写日志，所以需要在写入日志时锁定，防止出现不同步。在多线程中，IO尤其需要防止死锁的出现。 之前已经说过，log文件的位置以及名称在全局变量中设置。当文件不存在时，将会被自动地创建。 每一条日志也会输出到终端 Silver Spork 已经实现了 文件资源抢占。当一个线程要求logger写入日志的时候，其他进程将会等待，直到资源可用。 不会出现死锁。无论在读写中是否出现异常，logger最终会被释放以让其他的线程使用。 内存安全。当产生一行日志后，将立刻追加写入到硬盘中的文件内，不会在内存中堆积。 追加写入。每次启动程序后，程序将自动写入下划线，以区分不同时间的日志。\\"}"]]},"headers":[{"level":2,"title":"class Logger","slug":"class-logger","link":"#class-logger","children":[]},{"level":2,"title":"记录什么","slug":"记录什么","link":"#记录什么","children":[]},{"level":2,"title":"追加记录","slug":"追加记录","link":"#追加记录","children":[]},{"level":2,"title":"Reference","slug":"reference","link":"#reference","children":[]}],"git":{"createdTime":1726378409000,"updatedTime":1726378409000,"contributors":[{"name":"hanjiaming","email":"47519540+guomaimang@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.68,"words":368},"filePathRelative":"note/cs/cn/Java-Socket-Programming/Log.md","localizedDate":"2022年4月19日","excerpt":"<h1> 日志记录</h1>\\n<h2> class Logger</h2>\\n<p>多个线程需要同时读写日志，所以需要在写入日志时锁定，防止出现不同步。在多线程中，IO尤其需要防止死锁的出现。</p>\\n<p>之前已经说过，log文件的位置以及名称在全局变量中设置。当文件不存在时，将会被自动地创建。</p>\\n<p>每一条日志也会输出到终端</p>\\n<p>Silver Spork 已经实现了</p>\\n<ul>\\n<li>文件资源抢占。当一个线程要求logger写入日志的时候，其他进程将会等待，直到资源可用。</li>\\n<li>不会出现死锁。无论在读写中是否出现异常，logger最终会被释放以让其他的线程使用。</li>\\n<li>内存安全。当产生一行日志后，将立刻追加写入到硬盘中的文件内，不会在内存中堆积。</li>\\n<li>追加写入。每次启动程序后，程序将自动写入下划线，以区分不同时间的日志。</li>\\n</ul>","autoDesc":true}');export{e as data};
