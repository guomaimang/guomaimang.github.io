import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as n,e}from"./app-8a03df4a.js";const i={},l=e(`<h1 id="连载中" tabindex="-1"><a class="header-anchor" href="#连载中" aria-hidden="true">#</a> 连载中</h1><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">ls</span> <span class="token parameter variable">-al</span> <span class="token comment">#查看目录 </span>
<span class="token builtin class-name">pwd</span> <span class="token comment">#返回当前目录</span>
<span class="token function">cal</span> <span class="token comment">#查看日历</span>
<span class="token function">ps</span> <span class="token parameter variable">-elf</span> <span class="token comment">#查看进程</span>
<span class="token function">more</span> <span class="token comment">#查看更多 可以组合 ps -elf|more</span>

<span class="token function">bash</span> <span class="token comment"># start a subshell</span>
<span class="token builtin class-name">exit</span> <span class="token comment"># exit the subshell</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合命令" tabindex="-1"><a class="header-anchor" href="#组合命令" aria-hidden="true">#</a> 组合命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span>ls<span class="token punctuation">;</span> <span class="token function">cal</span> <span class="token number">2022</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">wc</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="echo" tabindex="-1"><a class="header-anchor" href="#echo" aria-hidden="true">#</a> echo</h2><p>作用: 打印</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token parameter variable">-n</span> <span class="token string">&quot;You must be &quot;</span>
<span class="token comment"># -n keeps output on the same line</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="variable" tabindex="-1"><a class="header-anchor" href="#variable" aria-hidden="true">#</a> Variable</h2><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3><ul><li>等号两边不能有空格</li><li>local variables 小写</li><li>global variables / environment variables 通常大写</li></ul><h3 id="保留符" tabindex="-1"><a class="header-anchor" href="#保留符" aria-hidden="true">#</a> 保留符</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">$$</span> <span class="token comment"># evaluates to the PID of current shell (not the current command/process)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">hello</span><span class="token operator">=</span>world <span class="token comment"># 不建议，应当加上引号</span>
<span class="token assign-left variable">name</span><span class="token operator">=</span><span class="token string">&quot;Mickey Mouse&quot;</span>

<span class="token builtin class-name">echo</span> <span class="token variable">$name</span> <span class="token comment"># &gt;&gt;&gt; name</span>

<span class="token assign-left variable">PERSON</span><span class="token operator">=</span>Mary <span class="token comment"># you may also use export again</span>
<span class="token builtin class-name">export</span> <span class="token variable">$PERSON</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$PERSON</span>

<span class="token assign-left variable">name1</span><span class="token operator">=</span>John <span class="token assign-left variable">name2</span><span class="token operator">=</span>”Mary Anne” 
$ <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token number">10</span>
<span class="token comment"># var1=str1 var2=str2 ... varN=strN</span>
<span class="token builtin class-name">echo</span> <span class="token variable">$name1</span> and <span class="token variable">$name2</span> <span class="token comment"># &gt;&gt;&gt; John and Mary Anne</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="common-built-in-variables" tabindex="-1"><a class="header-anchor" href="#common-built-in-variables" aria-hidden="true">#</a> Common Built-In Variables</h3><ul><li>HOME: Store the full pathname of the home directory: where you will go to (home) when you just type cd.</li><li>PATH: Store a list of directories to be searched when running programs or shell scripts, separated by “:”.</li><li>PS1: Store primary prompt string, with a default value of &#39;<code>\\s-\\v\\$</code> &#39;, meaning system-version then <code>$</code>.</li><li>PS2: Store secondary prompt string, with a default value of &#39;&gt; &#39;. It is used for continuation of input lines.</li><li>PWD: Store current working directory set by cd command.</li><li>HOSTNAME</li><li>UID</li><li>PPID: Store process id of parent.</li><li>HISTSIZE</li></ul><h3 id="special-option-variables" tabindex="-1"><a class="header-anchor" href="#special-option-variables" aria-hidden="true">#</a> Special Option Variables</h3><ul><li><p>history: Setting it will enable command history to be stored, useful for future, default to on.</p></li><li><p>noclobber: Setting it will prevent overwriting of files when using I/O redirection, default to off.</p></li><li><p>ignoreeof: Setting it will prevent accidental logging out with <strong><code>&lt;Ctrl-D&gt;</code></strong> (end of input), often used when entering data from keyboard, default to off.</p></li><li><p>allexport: Setting it will automatically export all modified variables, default to off.</p></li></ul><p>To turn on/off, use <strong>set</strong> <strong>–o</strong>/+o variable</p><ul><li><strong>set –o noclobber</strong> # turn on noclobber feature</li><li><strong>set +o history</strong> # turn off history storage</li></ul><h3 id="str" tabindex="-1"><a class="header-anchor" href="#str" aria-hidden="true">#</a> <code>$(str)</code></h3><p>将返回bash 执行 str 的结果</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token assign-left variable">p2</span><span class="token operator">=</span>”<span class="token punctuation">(</span><span class="token environment constant">$PWD</span><span class="token punctuation">)</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">whoami</span><span class="token variable">)</span></span>- ”
$ <span class="token builtin class-name">echo</span> <span class="token variable">$p2</span>
<span class="token comment"># &gt;&gt;&gt; (/home/12345678d) 12345678d-</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h2><h3 id="declare" tabindex="-1"><a class="header-anchor" href="#declare" aria-hidden="true">#</a> declare</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token assign-left variable">var</span><span class="token operator">=</span><span class="token punctuation">(</span>val1 val2 <span class="token punctuation">..</span>. valN<span class="token punctuation">)</span> <span class="token comment"># initialize an array of size N</span>
var<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>val <span class="token comment"># assign val to element i in array var</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="access" tabindex="-1"><a class="header-anchor" href="#access" aria-hidden="true">#</a> access</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token variable">\${var<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token comment"># access element i in array var</span>
<span class="token variable">\${<span class="token operator">#</span>var<span class="token punctuation">[</span>i<span class="token punctuation">]</span>}</span> <span class="token comment"># return length of element i in array var</span>
<span class="token variable">\${<span class="token operator">#</span>var<span class="token punctuation">[</span>*<span class="token punctuation">]</span>}</span> <span class="token comment"># return number of non-null elements in array var</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="quotation" tabindex="-1"><a class="header-anchor" href="#quotation" aria-hidden="true">#</a> Quotation</h2><h3 id="single-quote-str" tabindex="-1"><a class="header-anchor" href="#single-quote-str" aria-hidden="true">#</a> Single quote (’str’)</h3><ul><li>The strong quote.</li><li>Enclosed string looks like literal.</li><li>No substitution and no execution is done.</li></ul><p>相当于忽略所有转义</p><h3 id="double-quote-str" tabindex="-1"><a class="header-anchor" href="#double-quote-str" aria-hidden="true">#</a> Double quote (”str”)</h3><ul><li>The weak quote.</li><li>Enclosed string is almost like literal.</li><li>Substitution is done for variable contents (prefixed with &quot;<code>$</code>&quot;).</li><li>Execution is done for back-quoted commands.</li><li>Watch out for &quot;!!&quot;, which is trying to match a past command.</li><li>This is a bug in showing the current command.</li></ul><h3 id="backquote" tabindex="-1"><a class="header-anchor" href="#backquote" aria-hidden="true">#</a> Backquote</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">(</span><span class="token variable"><span class="token variable">\`</span>str<span class="token variable">\`</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A special backquote enables a command to be executed</p><p>In bash, it is more common to put it as <strong><code>$(str)</code></strong> instead.</p><h2 id="shell-scripts" tabindex="-1"><a class="header-anchor" href="#shell-scripts" aria-hidden="true">#</a> Shell Scripts</h2><ul><li>We use bash, so the first line is &quot;<code>#!/bin/bash</code>&quot;.</li><li>Warning: never create a shell script called <strong>test</strong>.</li><li><strong>chmod 700 file</strong> or <strong>chmod u+x file</strong></li></ul><h3 id="guidelines" tabindex="-1"><a class="header-anchor" href="#guidelines" aria-hidden="true">#</a> Guidelines</h3><ul><li>A shell script does not do unnecessary work.</li><li>A shell script should perform the task for which it is intended.</li><li>A shell script should run without errors.</li><li>Shell script program logic is clearly defined and apparent.</li><li>Shell scripts should be reusable.</li></ul><h2 id="read-input" tabindex="-1"><a class="header-anchor" href="#read-input" aria-hidden="true">#</a> Read input</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> –n ’Please enter your name: ’
<span class="token builtin class-name">read</span> name

<span class="token builtin class-name">read</span> –p ’Please enter your name: ’ name
<span class="token builtin class-name">echo</span> name is <span class="token variable">$name</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="command-line-argument" tabindex="-1"><a class="header-anchor" href="#command-line-argument" aria-hidden="true">#</a> Command Line Argument</h2><ul><li>The script name is assigned to <code>$0</code> (inclusive of the <code>./ </code>part of the path).</li><li>All words following the script name are assigned to<code> $1, $2, $3 … \${10}, \${11},</code> and so on.</li></ul>`,47),t=[l];function o(r,c){return s(),n("div",null,t)}const u=a(i,[["render",o],["__file","unnamed.html.vue"]]);export{u as default};
